{
  "swagger": "2.0",
  "info": {
    "title": "OSF APIv2 Documentation",
    "description": "This is the official documentation for the OSF (Open Science Framework) API v2. \nIt provides access to the full range of OSF's functionality including project management, file handling, user management, registrations, preprints, and metadata operations.\n\n## Getting Started\nFor detailed information on getting started, authentication, and best practices, visit our [support page](https://osf.io/support).\n\n## API Features\n - RESTful resource-oriented API\n - Supports pagination, filtering, and sparse fieldsets\n - Comprehensive error handling and descriptive error codes\n - OAuth-based authentication and authorization\n",
    "version": "2.0",
    "termsOfService": "https://osf.io/terms_of_use/",
    "contact": {
      "name": "OSF Support Team",
      "email": "support@osf.io",
      "url": "https://help.osf.io/"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://cdn.cos.io/media/images/cos_center_logo_small.original.png",
      "backgroundColor": "transparent"
    }
  },
  "host": "api.test.osf.io",
  "schemes": [
    "https"
  ],
  "basePath": "/v2",
  "x-tagGroups": [
    {
      "name": "Welcome",
      "tags": [
        "Introduction",
        "General Usage",
        "Authentication",
        "Pagination",
        "Versioning",
        "Filtering",
        "Sparse Fieldsets",
        "Embedding",
        "Request Formatting",
        "Errors & Error Codes",
        "Entities & Entity Collections"
      ]
    },
    {
      "name": "API Reference",
      "tags": [
        "Actions",
        "Addons",
        "Applications",
        "Base",
        "CEDAR Metadata",
        "Citations",
        "Comments",
        "Collections",
        "Collection Submissions",
        "Collection Submissions Actions",
        "Collection Providers",
        "Custom Metadata",
        "Files",
        "Licenses",
        "Logs",
        "Institutions",
        "Identifiers",
        "Registration Schemas",
        "Registration Schema Blocks",
        "Schema Responses",
        "Schema Response Actions",
        "Nodes",
        "Notification Subscriptions",
        "Preprints",
        "Preprint Providers",
        "Draft Registrations",
        "Registrations",
        "Registration Providers",
        "Regions",
        "OAuth Scopes",
        "Taxonomies",
        "Tokens",
        "Users",
        "View Only Links",
        "Wikis",
        "Subjects",
        "GUIDs",
        "Requests",
        "Resources"
      ]
    }
  ],
  "tags": [
    {
      "name": "Introduction",
      "x-traitTag": true,
      "description": "Welcome to the Open Science Framework API. With this API you can access users, projects, components, logs, and files from the [Open Science Framework](https://osf.io/). The Open Science Framework (OSF) is a free, open-source service maintained by the [Center for Open Science](http://cos.io/).\n\nThe OSF serves as a repository and archive for study designs, materials, data, manuscripts, or anything else associated with your research during the research process. Every project and file on the OSF has a permanent unique identifier, and every registration (a permanent, time-stamped version of your projects and files) can be assigned a DOI. You can use the OSF to measure your impact by monitoring the traffic to projects and files you make public. With the OSF you have full control of what parts of your research are public and what remains private."
    },
    {
      "name": "General Usage",
      "x-traitTag": true,
      "description": "The OSF API generally conforms to the [JSON-API v1.0 spec](http://jsonapi.org/format/1.0/). Where exceptions exist, they will be noted. Each endpoint will have its own documentation, but there are some general principles.\nNote: Assume undocumented routes/features/fields are unstable.\n#### Canonical URLs\nAll canonical URLs have trailing slashes.  A request to an endpoint without a trailing slash will result in a **301 Redirect** to the canonical URL.  There are some exceptions when working with the Files API, so if a URL in a response does not have a slash, do not append one.\n#### Plurals\nEndpoints are always pluralized.  `/users/`, not `/user/`, `/nodes/`, not `/node/`.\nThe only exception are the node and preprint citation endpoints, which are `/citation/`, not `/citations/`.\n#### Common Actions\nEvery endpoint in the OSF API responds to `GET`, `HEAD`, and `OPTION` requests.\nYou must have adequate permissions to interact with any endpoint. Unauthorized use will result in **401 Unauthorized** or **403 Forbidden** responses.\nUse `HEAD` to probe an endpoint and make sure your headers are well-formed. A `GET` request will return a representation of the entity or entity collection referenced by the endpoint.\nAn `OPTIONS` request will return a JSON object that describes the endpoint, including the name, a description, the acceptable request formats, the allowed response formats, and any actions available via the endpoint.\n### Testing\nThe OSF provides public testing servers to test integrations against.\n#### Testing Server\nThe test-* subdomains of the OSF are intended to match, at any given time, the current production environment of the Open Science Framework.\nWe have staging servers that will have newer features, including newer API features, that aren't ready for production. However, because those servers are subject to the whims of QA and whichever group needs to do specific testing, they aren't particular stable for API developers.\nThe `test` subdomains of the OSF are intended to match, at any given time, the current production environment of the OSF. The test servers linked below are primarily for developing your API application on a stable system.\n\n - Test web server: https://test.osf.io/\n\n - Test API server: https://api.test.osf.io/v2/\n\n - Test Files server (known as Waterbutler): https://files.us.test.osf.io/\n\n#### Ephemerality Notice\nExpect the server to be down from time to time while we update software, and don't expect data to persist indefinitely. We periodically run data migrations on the test servers without notice."
    },
    {
      "name": "Authentication",
      "x-traitTag": true,
      "description": "#### Token Auth\nTo use a Personal Access Token, make an `Authorization` header with the contents `Bearer <token>` as shown in the example below, replacing `<token>` with your token.\n\n    ```\n    curl -X \"GET\" \"https://api.osf.io/v2/users/me/\" -H \"Authorization: Bearer <token>\"\n    ```\n\nTo make a Personal Access Token, visit your OSF settings page (either on the [OSF](https://osf.io/settings/tokens) or our [testing server](https://test.osf.io/settings/tokens)) to create one. You can limit the scope of the token, but remember that it has access to all of the information that you do within the limits of the scope, so be careful with your tokens.\n#### OAuth\nThe OSF allows third-party web applications to connect to the OSF on behalf of other users via the OAuth 2.0 web application flow.\nYou can add a developer application from the OSF settings page (either on the [OSF](https://osf.io/settings/applications) or our [testing server](https://osf.io/settings/applications)).\nYou can check out the [OAuth SSO Guide](https://github.com/CenterForOpenScience/osf-cas/blob/develop/README_OAUTH_SSO_GUIDE.md) for options."
    },
    {
      "name": "Pagination",
      "x-traitTag": true,
      "description": "All entity collection endpoints respond to the `page` query parameter as described in the [JSON-API spec](http://jsonapi.org/format/#fetching-pagination).\n\nHowever, links to the first, last, previous, and next pages of results are provided in the `links` key of the response, and you are encouraged to use those rather than adding query parameters by hand.\n\nIf there are only enough results to fill one page, the `first`, `last`, `prev`, and `next` links will be null.\n#### Versioning\nAs of version `2.3`, pagination links conform to the JSON API specification. Meta information was pulled out of the `links` object and placed in a top-level `meta` object.\n\nThe `meta` key contains the total number of entities available, as well as the current number of results displayed per page."
    },
    {
      "name": "Versioning",
      "x-traitTag": true,
      "description": "Versioning can be specified in three different ways:\n\n#### URL Path Versioning\n+ `/v2/` is the only documented path, but only refers to the major version\n+ A version specified via the URL path is a **required** part of the URL.\n+ Only a major version can be specified via the URL path, i.e. `/v2.0.6/` is invalid, additionally, paths such as `/v2.0/` are invalid.\n+ If the default version of the API is within the major version specified in the URL path, the default version will be applied (i.e. if the default version is `2.3` and the URL path is `/v2/`, then version returned will be `2.3`).\n+ If the default version of the API is not within the major version specified in the URL path, the URL path version will be applied (i.e. if the default version is `3.0` and the URL path is `/v2/`, then the version returned will be `2.0`)\n\n#### Query Parameter Versioning\n+ `/v2/nodes/?version=2.1.6`\n+ Pinning to a specific version via a query parameter is **optional**.\n+ A specific version (major, minor, or patch) for a single request can be specified via the `version` query parameter, as long as it is an allowed version.\n+ If the version specified in the query parameter does not fall within the same major version specified in the URL path, i.e `/v2/nodes/?version=3.1.4` a 409 Conflict response will be returned.\n\n#### Header Versioning\n+ `Accept-Header=application/vnd.api+json;version=3.0.1`\n+ Pinning to a specific version via request header is **optional**.\n+ A specific version (major, minor, or patch) for a single request can be specified via the `Accept Header` of the request, as long as it is an allowed version.\n+ If the version specified in the header does not fall within the same major version specified in the URL path a 409 Conflict response will be returned.\n+ If both a header version and query parameter version are specified, the versions must match exactly or a 409 Conflict response will be returned (i.e. one does not take precedence over the other).\n\n#### CHANGELOG\n`v2.1`\n+ Pagination links conform to JSON API specification, i.e. `meta` information was pulled out of the `links` object and placed in a top-level `meta` object.\n+ Deprecate the `node_links` field in the **Node** and **Registration** serializers in favor of `linked_nodes` and `linked_registrations`.\n\n`v2.2`\n+ Modify institution nodes list so that affiliated components are also returned from `/v2/institutions/<id>/nodes/`.\n+ Ensure all existing date fields are standardized on UTC.\n\n`v2.3`\n+ Handle merged users more correctly on `/v2/users/`.\n\n`v2.4`\n+ Deprecate the `parents` field in the **Taxonomies** serializer.\n+ Deprecate the following fields in the **Preprint Provider** serializer:\n    + `social_facebook`, `social_instagram`, and `social_twitter`\n    + `banner_path`, `logo_path`, and `header_text`\n    + `email_contact`"
    },
    {
      "name": "Filtering",
      "x-traitTag": true,
      "description": "Entity collections can be filtered by adding a query parameter in the form:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`filter[<fieldname>]=<matching information>`\n\nString queries are filtered using substring matching. For example, if you were trying to find [Lise Meitner](http://en.wikipedia.org/wiki/Lise_Meitner):\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/users/?filter[full_name]=meitn`\n\nYou can filter on multiple fields, or the same field in different ways, by &-ing the query parameters together.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/users/?filter[full_name]=lise&filter[family_name]=mei`\n\nBoolean fields should be queried with `true` or `false`.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[registered]=true`\n\nYou can request multiple resources by filtering on id and placing comma-separated values in your query parameter.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[id]=aegu6,me23a`\n\nYou can filter with case-sensitivity or case-insensitivity by using `contains` and `icontains`, respectively.\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?filter[tags][icontains]=help`"
    },
    {
      "name": "Sparse Fieldsets",
      "x-traitTag": true,
      "description": "All endpoints respond to the `fields` query parameter as described in the [JSON-API spec](http://jsonapi.org/format/#fetching-sparse-fieldsets).\n\n\nFrom the specification:\n\n<blockquote>\n  <p>A client MAY request that an endpoint return only specific fields in the response on a per-type basis by including a fields[TYPE] parameter.</p>\n  <p>The value of the fields parameter MUST be a comma-separated (U+002C COMMA, “,”) list that refers to the name(s) of the fields to be returned.</p>\n  <p>If a client requests a restricted set of fields for a given resource type, an endpoint MUST NOT include additional fields in resource objects of that type in its response.</p>\n</blockquote>\n\n#### Basic Usage\n\nWhen making a request to an endpoint that returns a serialized object of some `type`, you can specify `fields[<type>]=<comma,separated,list,of,fields>` to receive a subset of the object's fields in the response.\n\n\nFor example, the request below will serialize only the `title` attribute and `children` relationship for each node in the response.\n\n\nhttps://api.osf.io/v2/nodes/?fields[nodes]=title,children\n\n\nSparse fieldsets can be used to restrict both attribute and relationship fields.\nNote that top-level objects (such as `type`, `id`, `attributes`, `relationships`, and `links`) will always be serialized and cannot be excluded.\n\n#### Advanced Usage\n\nSparse fieldsets can be used to restrict any entity returned in the response.\n\n\nFor example, the request below will serialize only the `full_name` attribute for each user (auto-embedded by the `embed=contributors` query parameter), and the `title` attribute for each node.\n\n\nhttps://api.osf.io/v2/nodes/?fields[nodes]=title,contributors&embed=contributors&fields[users]=full_name\n\n\nAny field specified in another query parameters used by the serializer (e.g. `embed`) must also be included in the sparse fieldset.\nFor example, fields that are being embedded on the sparse type (e.g. `nodes`) must also be included in `fields[<type>]` when using embeds, or the embed will be invalid.\n\n\nA request to embed contributors and restrict nodes to only return the `title` attribute should have the form:\n\n\nhttps://api.osf.io/v2/nodes/?embed=contributors&fields[nodes]=title,contributors\n\n\n**NOT**\n\n\nhttps://api.osf.io/v2/nodes/?embed=contributors&fields[nodes]=title\n"
    },
    {
      "name": "Embedding",
      "x-traitTag": true,
      "description": "All related resources that appear in the `relationships` attribute are embeddable, meaning it is possible to fetch a node and its contributors in a single request by adding a query parameter like:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?embed=contributors`\n\nThe embedded results will have the following structure:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`{relationship_name}: {full_embedded_response}`\n\nWhere `full_embedded_response` means the full API response resulting from a **GET** request to the `href` link of the corresponding related resource.\n\nThis means if there are no errors in processing the embedded request the response will have the format:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`data: {response}`\n\nAnd if there are errors processing the embedded request the response will have the format:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`errors: {errors}`\n\nMultiple embeds can be achieved with multiple query parameters separated by \"&\".\n\n&nbsp;&nbsp;&nbsp;&nbsp;`/nodes/?embed=contributors&embed=comments`\n\nSome endpoints are automatically embedded, such as the [node contributors](#operation/nodes_contributors_list) endpoint, which automatically embeds user information."
    },
    {
      "name": "Request Formatting",
      "x-traitTag": true,
      "description": "## Attribute Validation\nEndpoints that allow creation or modification of entities generally limit updates to certain attributes of the entity.\n\nIf you attempt to set an attribute that does not permit updates (such as a `date_created` timestamp), the API will silently ignore that attribute.\n\nThis will not affect the response from the API: if the request would have succeeded without the updated attribute, it will still report as successful. Likewise, if the request would have failed without the attribute update, the API will still report a failure.\n\nTypoed or non-existent attributes will behave the same as non-updatable attributes and will be silently ignored. If a request is not working the way you expect, make sure to double check your spelling.\n## Create/Update Requests\n#### Formatting POST/PUT/PATCH Request Bodies\nThe OSF API follows the JSON-API spec for [create and update requests](http://jsonapi.org/format/1.0/#crud). This means all request bodies must be wrapped with some metadata.\n\nEach request body must be an object with a `data` key containing at least a `type` member. The value of the `type` member must agree with the `type` of the entities represented by the endpoint. If not, a **409 Conflict** will be returned.\n\nThe request should also contain an `attributes` member with an object containing the key-value pairs to be created/updated.\n\n**PUT/PATCH** requests must also have an `id` key that matches the ID part of the endpoint you are making a request to. If the `id` key does not match the ID part of the URL path, a **409 Conflict** error will be returned.\n\n#### Creating a Node via POST Example\n\n    POST /v2/nodes/\n    {\n      \"data\": {\n        \"type\": \"nodes\",\n        \"attributes\": {\n          \"title\" : \"A Phylogenetic Tree of Famous Internet Cats\",\n          \"category\" : \"project\",\n          \"description\" : \"How closely related are Grumpy Cat and C.H. Cheezburger? Is memefulness inheritable?\"\n        }\n      }\n    }\n\n\n#### Updating a User via PUT Example\n\n    PUT /v2/users/me/\n    {\n      \"data\": {\n        \"id\": \"3rqxc\",\n        \"type\": \"users\",\n        \"attributes\": {\n          \"full_name\" : \"Henrietta Swan Leavitt\",\n          \"given_name\" : \"Henrietta\",\n          \"middle_names\" : \"Swan\",\n          \"family_name\" : \"Leavitt\"\n        }\n      }\n    }\n\n**Note:** If you PUT/PATCH to the `/users/me/` endpoint, you must still provide your full user id in the `id` field of the request.  We do not support using the `me` alias in request bodies at this time.\n\n#### PUT vs. PATCH\nFor most endpoints that support updates via **PUT** requests, we also allow **PATCH** updates.\n\n**PUT** requests require all mandatory attributes to be set, even if their value is unchanged. **PATCH** requests may omit mandatory attributes, whose value will be unchanged."
    },
    {
      "name": "Errors & Error Codes",
      "x-traitTag": true,
      "description": "## Errors\nWhen a request fails for any reason, the OSF API will return an appropriate HTTP response code and include a descriptive error in the body of the response.\n\nThe response body will be a JSON object with a key, `errors`, pointing to an array of error objects.\n\nIn general, these error objects will consist of a `detail` key with a detailed error message and a `source` object that may contain a field `pointer` that is a [JSON Pointer](https://tools.ietf.org/html/rfc6901) to the error-causing attribute.\n\nThe `error` objects may include additional information in accordance with the [JSON-API error spec](http://jsonapi.org/format/1.0/#error-objects).\n\n#### Example\nAn error response from an incorrect create node request:\n\n    {\n      \"errors\": [\n        {\n          \"source\": {\n            \"pointer\": \"/data/attributes/category\"\n          },\n          \"detail\": \"This field is required.\"\n        },\n        {\n          \"source\": {\n            \"pointer\": \"/data/type\"\n          },\n          \"detail\": \"This field may not be null.\"\n        },\n        {\n          \"source\": {\n            \"pointer\": \"/data/attributes/title\"\n          },\n          \"detail\": \"This field is required.\"\n        }\n      ]\n    }\n\n## Error Codes\nThe OSF API uses conventional HTTP response codes to indicate the success or failure of an API request.\n\nIn general, codes in the `2xx` range indicate success, codes in the `4xx` range indicate an error that failed given the information provided (e.g., a required parameter was omitted, invalid authentication credentials were provided, etc.), and codes in the `5xx` range indicate an error with our API servers (these are rare, and if they occur consistently, should be [reported](mailto:support@osf.io)).\n\n`200` **OK**\n\nThe request was successful and everything worked as expected.\n\n`201` **Created**\n\nThe request was successful and a new resource was created. The newly created resource can be referenced by the ID returned in the response.\n\n`204` **No Content**\n\nThe request was sucessful but does not need to return an entity-body.\n\n`400` **Bad Request**\n\nThe request was unacceptable, often due to a missing required parameter or malformed data.\n\n`401` **Unauthorized**\n\nThe request requires user authentication, which was not provided.\n\n`403` **Forbidden**\n\nThe request was understood but not fulfilled, most likely due to invalid permissions.\n\n`404` **Not Found**\n\nThe requested resource does not exist.\n\n`405` **Method Not Allowed**\n\nThe method specified in the request is not allowed for the resource.\n\n`409` **Conflict**\n\nThe request could not be completed due to a conflict with the current state of the resource or within the request data.\n\n`410` **Gone**\n\nThe requested resource is no longer available, most likely because it was deleted.\n\n`429` **Too Many Requests**\n\nThe user has sent too many requests in a given amount of time.\n\nWait at least the amount of time specified in the `Retry-After` header of the response before sending another request.\n\nAuthenticated requests have a rate limit of 10,000/day.\n\nUnauthenticated requests have a rate limit of 100/hour.\n\n`5xx` **Server Errors**\n\nThe API server encountered an unexpected error."
    },
    {
      "name": "Entities & Entity Collections",
      "x-traitTag": true,
      "description": "## Entities\nAn entity is a single resource that has been retrieved from the API, usually from an endpoint with the entity's ID as the final path part. A successful response from an entity request will be a JSON object with a top level `data` key pointing to a sub-object with the following members:\n#### ID\nThe identifier for the entity.  This **MUST** be included with all PUT and PATCH requests.\n#### Type\nThe type identifier of this entity.  This **MUST** be included with all create and update requests.\n#### Attributes\nThe properties of the entity.  Names, descriptions, etc.\n#### Relationships\nRelationships are URLs to other entities or entity collections that have a relationship to the entity.\n\nFor example, the node entity provides a `contributors` relationship that points to the endpoint to retrieve all contributors to that node. It is recommended to use these links rather than to filter general entity collection endpoints by IDs. They'll be faster, easier, and less error-prone.\n\nGenerally a relationship will have the following structure:\n\n\n    {relationship_name}: {\n      \"links\": {\n        \"related\": {\n          \"href\": {url_to_related_entity_or_entity_collection},\n          \"meta\": {}\n        }\n      }\n    }\n\n\nIf there are no related entities, `href` will be null.\n#### Embeds\nPlease see the [embedding](#tag/Embedding) documentation.\n#### Links\nLinks are urls to alternative representations of the entity or actions that may be performed on the entity.\n\nMost entities will provide a `self` link that is the canonical endpoint for the entity where update and delete requests should be sent. Most entities will also provide an `html` link that directs to the entity's page on the Open Science Framework.\n## Entity Collections\nEntity collection endpoints return a list of entities and an additional data structure with pagination links, such as `next`, `prev`, `first`, and `last`.\n\nThe OSF API limits all entity collection responses to a maximum of 10 entities.\n\nThe response object has two keys:\n#### Data\nThe `data` key is an array of entities that match the query.\n\nEach entity in the array is the same representation that is returned from that entity's `self` link, meaning that refetching the entity is unnecessary.\n#### Links\nThe `links` key contains pagination information, including links to the previous, next, first, and last pages of results.\n\nThe `meta` key contains the total number of entities available, as well as the current number of results displayed per page.\nIf there are only enough results to fill one page, the `first`, `last`, `prev`, and `next` values will be null."
    },
    {
      "name": "Addons",
      "description": "Addons represent a user connection to an external service, some addons allow for additional storage, some modify user authentication or add a redirect link to a project."
    },
    {
      "name": "Base",
      "description": "This is the \"home page\" of the API you can get important autentication information for the user making the request and get links to other resources."
    },
    {
      "name": "CEDAR Metadata",
      "description": "CEDAR Metadata endpoints allow you to create, read, update, and manage metadata records based on CEDAR templates. These templates enable users to apply structured, standardized metadata to nodes and files for improved data sharing, discoverability, and interoperability. CEDAR Metadata records are associated with OSF resources and can be published or kept private depending on user permissions and workflow."
    },
    {
      "name": "Custom Metadata",
      "description": "Custom Metadata endpoints allow users to manage freeform or structured metadata associated with OSF nodes and files. Unlike CEDAR metadata, Custom Metadata provides more flexible fields tailored to specific research needs or institutional requirements. Users can create, view, and edit metadata records that describe files or items in OSF, including funder information, language, resource type, and more."
    },
    {
      "name": "Wikis",
      "description": "The Wikis endpoints allow users to create, update, retrieve, and manage wiki pages and their versions for OSF projects and registrations. Wikis are collaborative documents that enable teams to share information and document their research process directly within OSF. Each wiki page maintains a version history, providing transparency and accountability over changes."
    },
    {
      "name": "Subjects",
      "description": "Subjects endpoints provide access to the taxonomy used for categorizing OSF resources such as nodes, preprints, and registrations. Subjects can be hierarchical, with parent and child relationships, allowing for fine-grained classification. This enables better organization and discoverability of research content across the OSF ecosystem."
    },
    {
      "name": "GUIDS",
      "description": "GUID endpoints resolve OSF Globally Unique Identifiers (GUIDs) to their corresponding resources, such as nodes, users, files, registrations, preprints, and collections. These endpoints allow you to retrieve metadata about a resource or redirect to the appropriate resource-specific endpoint for further actions. GUIDs are a fundamental part of OSF's resource identification system."
    },
    {
      "name": "Requests",
      "description": "Requests endpoints handle formal user submissions for actions such as requesting access to private content, withdrawal of preprints, and affiliation requests. Requests can be associated with nodes, preprints, or other resources and go through a workflow process including approval, rejection, and moderation actions. These endpoints facilitate transparency and control over changes and user interactions within OSF."
    },
    {
      "name": "Resources",
      "description": "Resources endpoints manage research-related resources (outcome artifacts) connected to OSF registrations. These resources can include datasets, software, materials, papers, and supplementary files. The endpoints support creating, retrieving, updating, and finalizing resources, making them an integral part of OSF's open science workflow and enabling accurate documentation and discoverability of research outputs."
    },
    {
      "name": "Registration Schemas",
      "description": "A Registration Schemas defines the range of valid responses to a registration. Each Registration Schema is composed of <a href=\"#tag/Registration-Schema-Blocks\">\"blocks\"</a> that define the individual questions a user responds to. Registration Schemas are created by the Center for Open Science or an affiliated institution and periodically migrated into the system. Registration Schemas are updated and deactivated using an internal versioning system."
    },
    {
      "name": "Registration Schema Blocks",
      "description": "Registration Schema Blocks are read-only entities, they represent question prompts and form inputs known as \"blocks\" that make up a Registration Schemas. Each block has a designated `block_type` that determines what type of information that Schema Block's corresponding block in the Schema Response."
    },
    {
      "name": "Schema Responses",
      "description": "Schema Responses contain user supplied responses to a Registration Schema. A Schema Response aggregates all of the the responses for a given version of a Registration's Registration Schema. Schema Responses are created when a Registration is completed. Once a Registration is completed the Schema Responses for a Registration can be revisied and updated by using it's associated action endpoints.\n\nThere are a few states for Schema Responses:\n\n  - `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you\n  must create a Schema Response Action that triggers a new submission.\n\n  - `in_progess` is the state of a Schema Response where the response is editable and still private, Schema\n  Responses are editted via a PATCH request as specified below.\n\n  - `unapproved` is the state of a Schema Response where edits have been made and \"locked-in\", now contributors\n  have the ability to reject the changes, however if they are not rejected changes are automatically approved\n  after 48 hours. If `unapproved` Schema Responses are rejected, they are returned to the `in_progress` state. If\n  `unapproved` Schema Responses are approved they either enter an `approved` state or go into a\n  `pending_moderation` to be accepted or denied by a moderator.\n\n  - `pending_moderation` is the state of a Schema Response where moderators have an opportunity to reject or\n  approve a Schema Response that has been approved by it's contributors. This state is only reachable for Schema\n  Responses that are associated with a Registration that has Registration Provider a moderated workflow.\n\n  - `approved` is the state of a Schema Response where it is public and immutable, in order to update an approved\n  Schema Response a new one must be created."
    },
    {
      "name": "Schema Response Actions",
      "description": "Schema Response Actions are objects that when created cause state transitions for Schema Responses. Users use state transitions to submit, approve, and revise new Schema Responses.\n\nSchema Response Actions have a few different triggers to cause state transitions:\n\n  - `submit` is a trigger to transition a Schema Response from an `in_progress` state to an `unapproved` state,\n  this freezes edits for the Schema Response and allows all admin contributors to the Schema Response's\n  Registration to either approved or reject the Schema Response.\n\n  - `approve` is a trigger to transition a Schema Response from an `unapproved` state to an `approved` state, this\n  makes the Schema Response changes public completing the update of the Schema Response. On Schema Responses that\n  are associated with a Registration that has Registration Provider a moderated workflow the `approve` trigger\n  will transition the Schema Response to `pending_moderation`.\n\n  - `accept` is a trigger to transition a Schema Response from an `pending_moderation` state to an `approved`\n  state. This trigger is only valid for Schema Responses that are associated with a Registration that has\n  Registration Provider a moderated workflow and only possible for a user designated as moderator of a\n  Registration Provider.\n\n  - `admin_reject` is a trigger to transition a Schema Response from an `unapproved` state to an\n  `in_progress`  state. This trigger allows users to reject purposed changes to a Schema Response.\n\n  - `moderator_reject` is a trigger to transition a Schema Response from an `pending_moderation` state to an\n  `in_progress`  state. This trigger is only valid for Schema Responses that are associated with a Registration\n  that has Registration Provider a moderated workflow and only possible for a user designated as moderator of a\n  Registration Provider."
    },
    {
      "name": "Draft Registrations",
      "description": "\nA Draft Registration is a object that allows a user to edit and revise a registration before it is registered. Draft Registrations allow contributors to coordinate on a single registration, so they can upload files and change Registration metadata before the Registration is archived."
    },
    {
      "name": "Collection Submissions",
      "description": "\nA Collection Submission is an object that allows a user to add a resource, either a project, preprint, or registration to a collection. Once created, a Collection Submission may be automatically accepted or await moderation. Once a Collection Submission is in a moderation state, an assigned moderator may accept or reject the submission.\nThere are a few states for Collection Submissions:\n\n  - `in_progress` is the initial state of a Collection Submission where the resource is editable and still private.\n\n  - `pending` is the state where the Collection Submission is awaiting moderation.\n\n  - `accepted` means the Collection Submission has been approved and added to the collection.\n\n  - `rejected` means the Collection Submission has been declined by the moderator.\n\n  - `removed` means the Collection Submission has been removed from the collection, after initial acceptance."
    },
    {
      "name": "Collection Submissions Actions",
      "description": "A Collection Submission Action is an object that triggers a change in the moderation state of a Collection Submission and works as a record to log all previous transitions for a Collection Submission.\nCollection Submission Actions have a few different triggers to cause state transitions:\n\n  - `submit` is used to move a Collection Submission from the `in_progress` to the `pending` state, indicating the\n    submission is in a `pending` state, ready for moderation.\n\n  - `accept` is used by moderators to approve a Collection Submission, changing its state to `accepted`.\n\n  - `reject` is used by moderators to reject a Collection Submission, changing its state to `rejected`.\n\n  - `remove` is used to permanently remove a Collection Submission from the moderation queue,\n    changing its state to `removed`.\n\n  - `resubmit` is used to resubmit a previously rejected or removed Collection Submission, moving it back to the\n    `pending` state from the `rejected` or `removed` state.\n\n  - `cancel` is used to cancel a Collection Submission in a `pending` state, reverting it back to the\n    `in_progress`."
    },
    {
      "name": "Collection Providers",
      "description": "A Collection Submissions Provider represents the data for moderators and admins for a group of collections. It acts as a central hub for managing all collection submissions within various collections, ensuring that the moderation process is handled efficiently and consistently across different collections.\nThe Collection Submissions Provider holds important information, such as the list of moderators and admins, and the moderation rules for all collections under its umbrella. Historical data about past collection submissions and their states is saved via Collection Submission Actions.\nThrough the Collection Submissions Provider, moderators can oversee the state of all submissions in collections they manage, ensuring that each submission follows the appropriate state transitions and adheres to the standards set for collection submissions. It aids in providing transparency and order to the process of managing collections and ensures that moderators and admins have the tools and information they need to effectively manage collection submissions."
    },
    {
      "name": "Registration Providers",
      "description": "Registration Providers are entities that manage and moderate groups of registrations on the OSF platform.  \nEach Registration Provider defines workflows, review policies, and customization options for their collection of registrations. Registration Providers can be configured to operate in different moderation modes, such as pre-moderation, post-moderation, or automated workflows.\nRegistration Providers may also specify accepted license types, registration schemas, taxonomies, and review  workflows for their associated registrations. They allow communities or organizations to manage the  visibility and curation of registered research within their domain.\n**Attributes include:**\n  - `id`: The unique identifier for the registration provider.\n  - `name`: Human-readable name of the provider.\n  - `description`: A description of the provider’s purpose and scope.\n  - `reviews_workflow`: Defines the moderation workflow type (e.g., pre-moderation, post-moderation).\n  - `allow_submissions`: Boolean indicating whether new registrations can be submitted.\n  - `licenses_acceptable`: List of licenses accepted by the provider.\n\n**Endpoints include:**\n  - List and detail views of Registration Providers.\n  - Access to registrations under a given provider.\n  - Access to registration schemas and licenses supported by a provider.\n  - Management of moderators and submission actions within the provider's moderation system."
    },
    {
      "name": "Requests",
      "description": "Manage user-initiated requests related to nodes and preprints, including access requests, withdrawal requests, and institutional affiliation requests. Requests are actions initiated by users to either gain access to private content, withdraw content, or request affiliation with institutions. Administrators and moderators can approve or reject requests, while requesters can view and comment on their submissions.\n"
    },
    {
      "name": "Resources",
      "description": "Resources are structured data artifacts associated with a Registration. These can include datasets, analytic code, materials, papers, or supplementary files that contribute to the outcomes of a study or project. Resources are part of the registration’s metadata and support reproducibility, data sharing, and transparency in research.\nEach Resource can have an optional Persistent Identifier (PID) such as a DOI, and can be marked as finalized, indicating it is ready for public dissemination or archival. Resources are grouped under a Registration and contribute to Open Practice Badges when relevant artifacts are provided.\nResources are managed through the API endpoints to:\n - **Create** new resources for a Registration (e.g., data, code, papers)\n - **List** existing resources linked to a Registration\n - **Retrieve** details about an individual resource\n - **Update** a resource’s description, type, or PID\n - **Finalize** a resource to prevent further changes (once validated)\n\n**Note**: Once a resource is finalized, it cannot be edited or deleted.\n### Resource Types\n - `data`: Raw or processed datasets related to the research\n - `analytic_code`: Code or scripts used for analysis\n - `materials`: Research materials, such as instruments or questionnaires\n - `papers`: Manuscripts or published papers\n - `supplements`: Supplementary materials that enhance understanding of the research\n\n**Permissions**:\n - Read access requires view permissions on the parent Registration.\n - Write access requires edit permissions on the parent Registration.\n"
    },
    {
      "name": "Notification Subscriptions",
      "description": "**Notification Subscriptions** allow users to manage how they receive alerts about activities and events  related to OSF resources, such as projects, preprints, registrations, and collections. Subscriptions control  **when** notifications are sent and **which events** trigger them.\nThese subscriptions are **private** and are only visible to the authenticated user who owns them.\n### Subscription Scope and Types\nSubscriptions can be configured at different scopes depending on the resource type:\n- **Global Subscriptions**  \n  Apply OSF-wide, affecting events like comment replies, mentions, and review updates across all resources.\n\n- **Node Subscriptions**  \n  Apply to individual projects or components (nodes), tracking events such as new comments or file updates.\n\n- **Provider Subscriptions**  \n  Apply to resources within a specific provider (collection, preprint, or registration providers). These subscriptions\n  typically track events relevant to moderation workflows, such as new pending submissions.\n\n### Attributes\n- `event_name`  \n  The specific event that triggers this subscription.  \n  Available event names depend on the scope of the subscription. Examples include:\n    - `comments`\n    - `file_updated`\n    - `global_mentions`\n    - `new_pending_submissions`\n\n- `frequency`  \n  Determines how often the user receives notifications for the event:\n    - `instant`: Sends an email notification immediately after the event occurs.\n    - `daily`: Groups event notifications into a daily summary email.\n    - `none`: Disables notifications for the event.\n\n  Users can update their notification frequency for each subscription.\n\n### Relationships\n\n - `user`  \n  The user who owns the subscription. Each subscription is tied to a single user.\n - `provider`  \n  The provider associated with the subscription, if applicable. This may be a Collection Provider, Preprint Provider, \n  or Registration Provider. Global subscriptions do not have a provider relationship.\n\n### Available Event Names by Subscription Scope\n#### Node-Level Subscriptions Subscriptions specific to individual projects or components:\n - `comments`: Notify when comments are added.\n - `file_updated`: Notify when files are updated.\n\n#### Global Subscriptions Default notification preferences applied OSF-wide:\n - `global_comment_replies`: Notify when someone replies to your comments.\n - `global_comments`: Notify when comments are added to your projects.\n - `global_file_updated`: Notify when files are updated in your projects.\n - `global_mentions`: Notify when you are mentioned.\n - `global_reviews`: Notify when your preprint submissions are updated.\n\n#### Provider-Level Subscriptions Notifications related to moderation workflows or submissions within a specific provider:\n - `new_pending_submissions`: Notify when new preprint submissions are awaiting moderation.\n\n### Notification Channels\nNotifications are delivered via **email**, according to the selected `frequency`:\n - `instant`: Immediate email notifications per event.\n - `daily`: Batched email summary delivered daily.\n - `none`: No email notifications are sent.\n\n### Permissions and Access\n\n - Only the authenticated user who owns a subscription can view or update it.\n - Subscriptions are managed via the OSF API and reflect the user's current notification preferences for supported events."
    },
    {
      "name": "Regions",
      "description": "Storage Regions are predefined geographical or cloud-storage areas where files are stored within OSF Storage.\nEach region provides isolation of data in compliance with geographic or regulatory requirements. Users can  specify their preferred region for storing project files when using OSF Storage.\n  - `id`: Unique identifier of the region (e.g., `us-east-1`).\n  - `name`: Human-readable name for the region (e.g., `US East`).\n\n**Endpoints include:**\n\n  - **List Regions:** Retrieve all available storage regions.\n  - **Region Detail:** Retrieve details about a specific storage region."
    },
    {
      "name": "Preprint Providers",
      "description": "Preprint Providers are entities that manage and moderate groups of preprints on the OSF platform.  \nEach Preprint Provider oversees its own preprint service, which can include branding, theming, subject areas, moderation workflows, and licensing policies. Preprint Providers are often affiliated with journals, societies, or research communities and enable researchers to share early versions of their work.\nPreprint Providers can implement customizable review and moderation workflows, as well as curate the preprints submitted to their service. Providers can also specify submission requirements, allowable licenses, and taxonomies for classifying preprints.\n**Attributes include:**\n  - `id`: The unique identifier for the preprint provider.\n  - `name`: Human-readable name of the provider.\n  - `description`: A description of the provider’s purpose and scope.\n  - `reviews_workflow`: Defines the moderation workflow type (e.g., pre-moderation, post-moderation).\n  - `allow_submissions`: Boolean indicating whether new preprints can be submitted.\n  - `licenses_acceptable`: List of licenses accepted by the provider.\n  - `social_links`: Optional links to provider social media (e.g., Twitter, Facebook).\n\n**Endpoints include:**\n  - List and detail views of Preprint Providers.\n  - Access to preprints associated with a given provider.\n  - Access to taxonomies and licenses supported by a provider.\n  - Management of moderators and submission actions within the provider's moderation system."
    },
    {
      "name": "Tokens",
      "description": "**Personal Access Tokens** allow users to authenticate API requests without credentials.\nTokens support fine-grained permissions (scopes) to control API access levels.  "
    },
    {
      "name": "Applications",
      "description": "**OAuth2 Applications** allow external services to securely authenticate and interact with OSF resources via OAuth2.\nRegistered applications manage OAuth2 flows, client credentials, and access tokens.\nOperations include:\n  - Creating new OAuth2 applications\n  - Viewing and updating application details\n  - Deactivating or deleting applications\n  - Resetting client secrets (deprecated after v2.14)"
    },
    {
      "name": "OAuth Scopes",
      "description": "OAuth scopes define specific permissions for OAuth applications and personal access tokens.\nEach scope indicates the permission level granted to perform actions via the OSF API, such as reading node data (`osf.nodes.read`) or modifying node data (`osf.nodes.write`).\nScopes can be queried and managed through these endpoints to understand and control access levels associated with applications and tokens."
    },
    {
      "name": "Actions",
      "description": "Actions represent state transitions or comments performed on reviewable or request-related resources within the OSF platform, such as Preprints, Nodes, Preprint Requests, Node Requests, and Collection Submissions. These endpoints document and facilitate moderation and administrative workflows, ensuring transparency and  accountability in managing user interactions, moderation processes, and lifecycle management for various resources.\nActions are categorized based on their targets:\n\n - **Review Actions**: Pertaining to moderation and review processes on Preprints.\n - **Node Request Actions**: Related to Node Requests (e.g., access or withdrawal requests).\n - **Preprint Request Actions**: Related to Preprint Requests, such as withdrawal requests.\n\n Actions require specific permissions depending on their triggers:\n  - `submit`: Typically open, no special permissions required.\n  - `accept`/`reject`: Require moderation or admin permissions.\n  - `edit_comment`: Requires administrative permissions.\n\n Each successful action response returns a JSON:API formatted object containing:\n  - **id** : The identifier of the action.\n  - **type** : Type of action performed (e.g., `review-actions`, `node-request-actions`).\n  - **attributes** : Information including `trigger`, `comment`, `from_state`, `to_state`, timestamps (`date_created`, `date_modified`), visibility (`visible`), and automation flag (`auto`).\n  - **relationships** :\n   - `creator`: User who initiated the action.\n   - `target` : The resource the action applies to (e.g., Preprint, Node Request).\n   - `provider` : Provider associated with the target, if applicable.\n\n Actions may fail due to various reasons, resulting in standard error responses:\n  - `400 Bad Request`: Invalid or malformed payload.\n  - `403 Forbidden`: Insufficient permissions to perform the action.\n  - `404 Not Found`: The target resource does not exist or is inaccessible.\n  - `409 Conflict`: Invalid action due to the current state of the target resource."
    },
    {
      "name": "Identifiers",
      "description": "Identifiers are unique strings associated with various entities in the OSF system, such as project nodes,  registrations or preprints. Identifiers serve as a means to distinctly reference these entities using standardized formats like DOI  (Digital Object Identifier). Each identifier is linked to a specific entity, providing a persistent and resolvable URL that can be used for citation, sharing, and retrieval purposes.\nIdentifiers play a crucial role in ensuring that entities within the OSF ecosystem can be reliably accessed and referenced across different platforms and services. By adhering to widely recognized standards, identifiers facilitate interoperability and integration with external systems, enhancing the visibility and accessibility of research outputs.\nThe Identifiers system allows users to access both Datacite and Crossref for DOI minting services and stores detailed metadata about each identifier, including its category, value, and the entity it is associated with. This ensures that users can effectively manage and utilize identifiers in their research workflows, promoting  transparency and traceability of scholarly work."
    },
    {
      "name": "Users",
      "description": "Users represent individual accounts within the OSF (Open Science Framework) platform. Each user account includes identifying information such as names, email addresses, profile details,  and metadata about activity and affiliations. The Users endpoints provide access to user-related resources  for profile display, updates, affiliation management, node contributions, and interaction with various OSF  services.\nThe Users API enables both read and write operations, allowing for:\n\n - **Retrieving user information**: Includes full name, bibliographic name parts (given, middle, family, suffix),\n  timezone, locale, account status, and registration date.\n - **Updating user attributes**: Authenticated users can update certain profile fields such as name, locale, \n  timezone, employment history, education, and social links.\n - **Managing relationships**: Users can access related resources such as their affiliated institutions, \n  nodes they contribute to, registrations, preprints, groups, and more.\n - **Accessing nested resources**: Email addresses, settings, external identities, and export/download data.\n\nCertain fields and actions are restricted based on authentication and permission levels. For example:\n\n - Viewing a user's full profile or updating information requires authentication.\n - Some attributes and relationships (e.g., `emails`, `settings`) are only accessible to the current user.\n - Accessing deactivated or anonymized users may return limited metadata or result in error responses.\n\nUser profiles also support structured fields for `employment` and `education` (e.g., `institution`, `title`,  `dates`, `ongoing` `status`) and `social` (e.g., `GitHub`, `ORCID`, `Twitter`), which are validated and  standardized for consistency and citation accuracy.\nThese endpoints are fundamental for user discovery, personalization, and managing identity and reputation  across the OSF ecosystem."
    }
  ],
  "paths": {
    "/addons/": {
      "get": {
        "summary": "List all addons",
        "description": "\nA paginated list of addons configurable with the OSF, for read purposes only.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 addons. Each resource in the array is a separate addon object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Addons"
        ],
        "operationId": "addons_list",
        "x-response-schema": "Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon",
                "properties": {
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon entity.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The URL to the third-party service provider."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name of the third-party service provider."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the service provider."
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "documentation",
                            "storage",
                            "bibliography",
                            "other",
                            "security",
                            "citations"
                          ]
                        },
                        "readOnly": true,
                        "description": "List of categories this addon belongs to."
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon entity (`addons`)."
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the addon entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.box.com",
                      "name": "Box",
                      "categories": [
                        "storage"
                      ],
                      "description": "Box is a file storage add-on. Connect your Box account to an OSF project to interact with files hosted on Box via the OSF."
                    },
                    "type": "addon",
                    "id": "box"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://dataverse.harvard.edu/",
                      "name": "Dataverse",
                      "categories": [
                        "storage"
                      ],
                      "description": "Dataverse is an open source software application to share, cite, and archive data. Connect your Dataverse account to share your Dataverse datasets via the OSF."
                    },
                    "type": "addon",
                    "id": "dataverse"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.dropbox.com",
                      "name": "Dropbox",
                      "categories": [
                        "storage"
                      ],
                      "description": "Dropbox is a file storage add-on. Connect your Dropbox account to an OSF project to interact with files hosted on Dropbox via the OSF."
                    },
                    "type": "addon",
                    "id": "dropbox"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.figshare.com",
                      "name": "figshare",
                      "categories": [
                        "storage"
                      ],
                      "description": "Figshare is an online digital repository. Connect your figshare account to share your figshare files along with other materials in your OSF project."
                    },
                    "type": "addon",
                    "id": "figshare"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.github.com",
                      "name": "GitHub",
                      "categories": [
                        "storage"
                      ],
                      "description": "GitHub is a web-based Git repository hosting service. Connect your GitHub repo to your OSF project to share your code alongside other materials in your OSF project."
                    },
                    "type": "addon",
                    "id": "github"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.mendeley.com",
                      "name": "Mendeley",
                      "categories": [
                        "citations"
                      ],
                      "description": "Mendeley is a reference management tool. Connecting Mendeley folders to OSF projects allows you and others to view, copy, and download citations that are relevant to your project from the Project Overview page."
                    },
                    "type": "addon",
                    "id": "mendeley"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "http://www.zotero.org",
                      "name": "Zotero",
                      "categories": [
                        "citations"
                      ],
                      "description": "Zotero is a reference management tool. Connecting Zotero folders to OSF projects allows you and others to view, copy, and download citations that are relevant to your project from the Project Overview page."
                    },
                    "type": "addon",
                    "id": "zotero"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://owncloud.org/",
                      "name": "ownCloud",
                      "categories": [
                        "storage"
                      ],
                      "description": "ownCloud is an open source, self-hosted file sync and share app platform. Connect your ownCloud account to an OSF project to interact with files hosted on ownCloud via the OSF."
                    },
                    "type": "addon",
                    "id": "owncloud"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://aws.amazon.com/s3/",
                      "name": "Amazon S3",
                      "categories": [
                        "storage"
                      ],
                      "description": "Amazon S3 is a file storage add-on. Connect your S3 account to an OSF project to interact with files hosted on S3 via the OSF."
                    },
                    "type": "addon",
                    "id": "s3"
                  },
                  {
                    "links": {},
                    "attributes": {
                      "url": "https://drive.google.com",
                      "name": "Google Drive",
                      "categories": [
                        "storage"
                      ],
                      "description": "Google Drive is a file storage add-on. Connect your Google Drive account to an OSF project to interact with files hosted on Google Drive via the OSF."
                    },
                    "type": "addon",
                    "id": "googledrive"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 10,
                  "per_page": 1000
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "#### Returns\nA JSON object with `meta` and `links` keys.\n\nThe `meta` key contains information such as a welcome message from the API, the specified version of the request, and the full representation of the current user, if authentication credentials were provided in the request.\n\nThe `links` key contains links to the following entity collections: [addons](#tag/Addons), [collections](), [institutions](#tag/Institutions), [licenses](#tag/Licenses), [registration schemas](#tag/Registration Schemas), [nodes](#tag/Nodes), [registrations](#tag/Registrations), [users](#tag/Users)",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Base"
        ],
        "operationId": "base_read"
      }
    },
    "/citations/styles/": {
      "get": {
        "summary": "List all citation styles",
        "description": "\nA paginated list of all standard citation styles available for rendering citations.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 citation styles. Each resource in the array is a separate citation syle and contains the full representation of the citation style object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include citation styles that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/citations/styles/?filter[title]=open.\n\nCitation styles may be filtered by their `id`, `title`, `short-title`, and `summary`.\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Citations"
        ],
        "operationId": "citations_styles_list",
        "x-response-schema": "Citation Style",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Citation Style",
                "required": [
                  "id",
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the citation style, e.g. APA."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the citation style entity (`citation-styles`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "required": [
                      "date_parsed",
                      "title"
                    ],
                    "description": "The properties of the citation style entity.",
                    "properties": {
                      "date_parsed": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the citation style was first parsed, as an iso8601 formatted timestamp."
                      },
                      "short_title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The short name for the citation style."
                      },
                      "summary": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The summary of the citation style."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The official name of the citation style."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the citation style entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {},
                    "attributes": {
                      "date_parsed": "2015-02-16T04:16:25.732000",
                      "summary": null,
                      "short_title": "AMR",
                      "title": "Academy of Management Review"
                    },
                    "type": "citation-styles",
                    "id": "academy-of-management-review"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/citations/styles/?page=115",
                  "prev": null,
                  "next": "https://api.osf.io/v2/citations/styles/?page=2",
                  "meta": {
                    "total": 1149,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/citations/styles/{style_id}/": {
      "get": {
        "summary": "Retrieve a citation style",
        "description": "Retrieves the details of a citation style.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested citation style, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "description": "The unique identifier of the citation style.",
            "required": true,
            "type": "string",
            "name": "style_id",
            "in": "path"
          }
        ],
        "tags": [
          "Citations"
        ],
        "operationId": "citations_styles_read",
        "x-response-schema": "Citation Style",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Citation Style",
              "required": [
                "id",
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the citation style, e.g. APA."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the citation style entity (`citation-styles`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "required": [
                    "date_parsed",
                    "title"
                  ],
                  "description": "The properties of the citation style entity.",
                  "properties": {
                    "date_parsed": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the citation style was first parsed, as an iso8601 formatted timestamp."
                    },
                    "short_title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The short name for the citation style."
                    },
                    "summary": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The summary of the citation style."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The official name of the citation style."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation style entity."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {},
                  "attributes": {
                    "date_parsed": "2015-02-16T04:16:26.233000",
                    "summary": null,
                    "short_title": "APA",
                    "title": "American Psychological Association 6th edition"
                  },
                  "type": "citation-styles",
                  "id": "apa"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{comment_id}/": {
      "get": {
        "summary": "Retrieve a comment",
        "description": "Retrieves the details of a comment\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested comment, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "comment_id",
            "description": "The unique identifier of the comment you wish to retrieve."
          }
        ],
        "tags": [
          "Comments"
        ],
        "operationId": "comments_read",
        "x-response-schema": "Comment",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Comment",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the comment entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the comment entity (`comments`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the comment entity.",
                  "properties": {
                    "can_edit": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to edit this comment"
                    },
                    "content": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The content of the comment."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                    },
                    "modified": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has been edited."
                    },
                    "deleted": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is deleted."
                    },
                    "is_abuse": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is flagged or confirmed spam."
                    },
                    "is_ham": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not an admin checked the legitimacy of this comment."
                    },
                    "has_report": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment the current user reported this as spam."
                    },
                    "has_children": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has replies."
                    },
                    "page": {
                      "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the node the comment is on."
                    },
                    "replies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the replies to the comment."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the target of the comment."
                    },
                    "reports": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the reports connected to the comment."
                    },
                    "user": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the user who created the comment."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the comment entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the comment."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "comments",
                  "attributes": {
                    "content": "comment content"
                  },
                  "relationships": {
                    "target": {
                      "data": {
                        "type": "{target_type}",
                        "id": "{target_id}"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/gvuew/",
                          "meta": {}
                        }
                      }
                    },
                    "replies": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/gvuew/comments/?filter%5Btarget%5D=twpgrpv78d8s",
                          "meta": {}
                        }
                      }
                    },
                    "target": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/gvuew/",
                          "meta": {
                            "type": "nodes"
                          }
                        }
                      }
                    },
                    "reports": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/comments/twpgrpv78d8s/reports/",
                          "meta": {}
                        }
                      }
                    },
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/rnizy/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/comments/twpgrpv78d8s/"
                  },
                  "attributes": {
                    "can_edit": true,
                    "date_modified": "2017-02-10T20:44:03.193000",
                    "deleted": false,
                    "is_ham": false,
                    "has_children": false,
                    "modified": false,
                    "content": "comments about things",
                    "has_report": false,
                    "is_abuse": false,
                    "date_created": "2017-02-10T20:44:03.185000",
                    "page": "node"
                  },
                  "type": "comments",
                  "id": "twpgrpv78d8s"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a comment",
        "description": "Updates the specified comment by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns JSON with a `data` key containing the new representation of the updated comment, if the request is successful.\n\nIf the request is unsuccessful, JSON with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "comment_id",
            "description": "The unique identifier of the comment you wish to update."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "comments",
                  "id": "{comment_id}",
                  "attributes": {
                    "content": "changed comment content"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Comments"
        ],
        "operationId": "comments_put",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a comment",
        "description": "Deletes a comment. This action can be undone by setting deleted to False in a comment update request.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "comment_id",
            "description": "The unique identifier of the comment you wish to delete."
          }
        ],
        "tags": [
          "Comments"
        ],
        "operationId": "comments_delete",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/files/{file_id}/": {
      "get": {
        "summary": "Retrieve a file",
        "description": "Retrieves the details of a file (or folder)\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested file, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n### Waterbutler API actions\n\nFiles can be modified through the Waterbutler API routes found in `links` (`new_folder`, `move`, `upload`, `download`, and `delete`).\n\n#### Download (files)\n\nTo download a file, issue a GET request against the download link. The response will have the Content-Disposition header set, which will will trigger a download in a browser.\n\n#### Create Subfolder (folders)\n\nYou can create a subfolder of an existing folder by issuing a PUT request against the new_folder link. The ?kind=folder portion of the query parameter is already included in the new_folder link. The name of the new subfolder should be provided in the name query parameter. The response will contain a WaterButler folder entity. If a folder with that name already exists in the parent directory, the server will return a 409 Conflict error response.\n\n#### Upload New File (folders)\n\n\n  To upload a file to a folder, issue a PUT request to the folder's upload link with the raw file data in the request body, and the kind and name query parameters set to 'file' and the desired name of the file. The response will contain a WaterButler file entity that describes the new file. If a file with the same name already exists in the folder, the server will return a 409 Conflict error response.\n\n\n#### Update Existing File (file)\n\nTo update an existing file, issue a PUT request to the file's upload link with the raw file data in the request body and the kind query parameter set to \"file\". The update action will create a new version of the file. The response will contain a WaterButler file entity that describes the updated file.\n\n#### Rename (files, folders)\n\nTo rename a file or folder, issue a POST request to the move link with the action body parameter set to \"rename\" and the rename body parameter set to the desired name. The response will contain either a folder entity or file entity with the new name.\n\n#### Move & Copy (files, folders)\n\nMove and copy actions both use the same request structure, a POST to the move url, but with different values for the action body parameters. The path parameter is also required and should be the OSF path attribute of the folder being written to. The rename and conflict parameters are optional. If you wish to change the name of the file or folder at its destination, set the rename parameter to the new name. The conflict param governs how name clashes are resolved. Possible values are replace and keep. replace is the default and will overwrite the file that already exists in the target folder. keep will attempt to keep both by adding a suffix to the new file's name until it no longer conflicts. The suffix will be ' (x)' where x is a increasing integer starting from 1. This behavior is intended to mimic that of the OS X Finder. The response will contain either a folder entity or file entity with the new name.\nFiles and folders can also be moved between nodes and providers. The resource parameter is the id of the node under which the file/folder should be moved. It must agree with the path parameter, that is the path must identify a valid folder under the node identified by resource. Likewise, the provider parameter may be used to move the file/folder to another storage provider, but both the resource and path parameters must belong to a node and folder already extant on that provider. Both resource and provider default to the current node and providers.\nIf a moved/copied file is overwriting an existing file, a 200 OK response will be returned. Otherwise, a 201 Created will be returned.\n\n#### Delete (file, folders)\n\nTo delete a file or folder send a DELETE request to the delete link. Nothing will be returned in the response body.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file you wish to retrieve."
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_detail",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                          "meta": {}
                        }
                      }
                    },
                    "versions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                  },
                  "attributes": {
                    "extra": {
                      "hashes": {
                        "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                        "md5": "44325d4f13b09f3769ede09d7c20a82c"
                      },
                      "downloads": 442
                    },
                    "kind": "file",
                    "name": "OSC2012.pdf",
                    "last_touched": "2015-09-18T01:11:16.328000",
                    "materialized_path": "/OSC2012.pdf",
                    "date_modified": "2014-10-17T19:24:12.264Z",
                    "current_version": 1,
                    "delete_allowed": true,
                    "date_created": "2014-10-17T19:24:12.264Z",
                    "provider": "osfstorage",
                    "path": "/553e69248c5e4a219919ea54",
                    "current_user_can_comment": true,
                    "guid": "sejcv",
                    "checkout": null,
                    "tags": [],
                    "size": 216945
                  },
                  "type": "files",
                  "id": "553e69248c5e4a219919ea54"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a file",
        "description": "Updates the specified file by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns JSON with a `data` key containing the new representation of the updated file, if the request is successful.\n\nIf the request is unsuccessful, JSON with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file you wish to update."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "files",
                  "id": "{file_id}",
                  "attributes": {
                    "name": "new file name.jpg"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_patch",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/files/{file_id}/versions/": {
      "get": {
        "summary": "List all file versions",
        "description": "\nA paginated list of all file versions.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 file versions. Each resource in the array is a separate file version object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file from which you want to retrieve versions."
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_versions",
        "x-response-schema": "File Version",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File Version",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file version."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file versions entity (`file_versions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "readOnly": true,
                    "description": "The properties of the file versions entity.",
                    "properties": {
                      "content_type": {
                        "type": "object",
                        "readOnly": true,
                        "description": "MIME content-type for the file (null if unavailable)."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date of the file version creation, as an iso8601 formatted timestamp."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file version entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for a file version."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the html version page."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/1/",
                      "html": "https://osf.io/ezcuj/files/osfstorage/553e69248c5e4a219919ea54?revision=1"
                    },
                    "attributes": {
                      "content_type": "application/octet-stream",
                      "date_created": "2017-01-01T12:34:56.78910",
                      "size": 216945
                    },
                    "type": "file_versions",
                    "id": "1"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files/{file_id}/versions/{version_id}/": {
      "get": {
        "summary": "Retrieve a file version",
        "description": "Retrieves the details of a file version\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested file, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "file_id",
            "description": "The unique identifier of the file from which you want to retrieve versions."
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "version_id",
            "description": "The file version number you want to retrieve."
          }
        ],
        "tags": [
          "Files"
        ],
        "operationId": "files_version_detail",
        "x-response-schema": "File Version",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File Version",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file version."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file versions entity (`file_versions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "readOnly": true,
                    "description": "The properties of the file versions entity.",
                    "properties": {
                      "content_type": {
                        "type": "object",
                        "readOnly": true,
                        "description": "MIME content-type for the file (null if unavailable)."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date of the file version creation, as an iso8601 formatted timestamp."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file version entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for a file version."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the html version page."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/1/",
                    "html": "https://osf.io/ezcuj/files/osfstorage/553e69248c5e4a219919ea54?revision=1"
                  },
                  "attributes": {
                    "content_type": "application/octet-stream",
                    "date_created": "2017-01-01T12:34:56.78910",
                    "size": 216945
                  },
                  "type": "file_versions",
                  "id": "1"
                }
              }
            }
          }
        }
      }
    },
    "/licenses/": {
      "get": {
        "summary": "List all licenses",
        "description": "A paginated list of licenses. The returned licenses are sorted by their name.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of 10 licenses. Each resource in the array is a separate license object and contains the full representation of the license, meaning additional requests to a license's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include licenses that match your filters by utilizing the `filter` query parameter, e.g. [https://api.osf.io/v2/licenses/?filter[name]=apache](https://api.osf.io/v2/licenses/?filter[name]=apache).\n\nLicenses may be filtered by their `id`, and `name`.",
        "tags": [
          "Licenses"
        ],
        "operationId": "license_list",
        "x-response-schema": "License",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "License",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the license."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the license (`license`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the license.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Name of the license."
                      },
                      "text": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full text of the license."
                      },
                      "required_fields": {
                        "type": "array",
                        "readOnly": true,
                        "description": "Fields required for this license (provided to help front-end validators). Maps to properties on the NodeLicense model.",
                        "items": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Individual fields required by this license."
                        }
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the license.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the license."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e968/"
                    },
                    "attributes": {
                      "text": "Copyright (c) {{year}}, {{copyrightHolders}}\nAll rights reserved.\n\nThe full descriptive text of the License.\n",
                      "required_fields": [
                        "year",
                        "copyrightHolders"
                      ],
                      "name": "BSD 2-Clause \"Simplified\" License"
                    },
                    "type": "licenses",
                    "id": "563c1cf88c5e4a3877f9e968"
                  }
                ],
                "links": {
                  "first": "",
                  "last": "https://api.osf.io/v2/licenses/?page=2",
                  "prev": "",
                  "next": "https://api.osf.io/v2/licenses/?page=2",
                  "meta": {
                    "total": 16,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/license/{license_id}/": {
      "get": {
        "summary": "Retrieve a license",
        "description": "Retrieves the details of a license.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested license, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "license_id",
            "description": "The unique identifier of the license."
          }
        ],
        "tags": [
          "Licenses"
        ],
        "operationId": "licenses_read",
        "x-response-schema": "License",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "License",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the license."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the license (`license`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the license.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Name of the license."
                    },
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Full text of the license."
                    },
                    "required_fields": {
                      "type": "array",
                      "readOnly": true,
                      "description": "Fields required for this license (provided to help front-end validators). Maps to properties on the NodeLicense model.",
                      "items": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Individual fields required by this license."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the license.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the license."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e968/"
                  },
                  "attributes": {
                    "text": "Copyright (c) {{year}}, {{copyrightHolders}}\nAll rights reserved.\n\nThe full descriptive text of the License\n",
                    "required_fields": [
                      "year",
                      "copyrightHolders"
                    ],
                    "name": "BSD 2-Clause \"Simplified\" License"
                  },
                  "type": "licenses",
                  "id": "563c1cf88c5e4a3877f9e968"
                }
              }
            }
          }
        }
      }
    },
    "/logs/{log_id}/": {
      "get": {
        "summary": "Retrieve a log",
        "description": "Retrieves the details of a log.\nA log is permanent immutable record of a node's history. A log is created when a user performs one of many actions. See the [actions](#Logs_logs_actions) section for more details.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested log, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "description": "The unique identifier of the log you wish to retrieve.",
            "required": true,
            "type": "string",
            "name": "log_id",
            "in": "path"
          }
        ],
        "tags": [
          "Logs"
        ],
        "operationId": "logs_read",
        "x-response-schema": "Log",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "Log",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the log."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the log (`logs`)"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the log.",
                  "required": [
                    "action",
                    "date"
                  ],
                  "properties": {
                    "date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The date and time at which the log was created, as an iso8601 formatted timestamp."
                    },
                    "action": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The type of action performed on the OSF. See actions section for full list of possible actions."
                    },
                    "params": {
                      "type": "object",
                      "title": "Log Params",
                      "readOnly": true,
                      "description": "The type of action performed on the OSF. See description for full list of possible actions.",
                      "properties": {
                        "addon": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The addon associated with the connected node."
                        },
                        "anonymous_link": {
                          "type": "boolean",
                          "readOnly": true,
                          "description": "The view only link added to the node was anonymous."
                        },
                        "bucket": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The Amazon s3 bucket connected to the connected node."
                        },
                        "citation_name": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Name of citation associated with the connected node."
                        },
                        "contributors": {
                          "type": "string",
                          "readOnly": true,
                          "description": "List of contributors on the connected node involved in the action represented by this node log."
                        },
                        "data_set": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The dataset associated with the connected node."
                        },
                        "destination": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title."
                        },
                        "figshare_title": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Title of the fighshare project associated with this node log"
                        },
                        "forward_url": {
                          "type": "string",
                          "readOnly": true,
                          "description": "URL that the connected node forwards to."
                        },
                        "github_user": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The github user involved with the action represented by this node log."
                        },
                        "github_repo": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The github repository involved with the action represented by this node log."
                        },
                        "file": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dictionary with information about the file involved with the log."
                        },
                        "filename": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Filename for the file associated with the log."
                        },
                        "kind": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Kind of the object associated with the log."
                        },
                        "folder": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Folder associated with the log."
                        },
                        "folder_name": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Name of the folder associated with the log."
                        },
                        "license": {
                          "type": "string",
                          "readOnly": true,
                          "description": "License for the associated node."
                        },
                        "identifiers": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dictionary containing the DOI and ARK ID for a preprint associated with the log."
                        },
                        "institution": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dictionary containing the ID and Name of the institution associated with the log."
                        },
                        "old_page": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Old name of wiki page for a wiki rename log action."
                        },
                        "page": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Current name of wiki page for rename log action."
                        },
                        "page_id": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Primary key of the wiki page associated with the log."
                        },
                        "params_node": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Node that is refered to in the params of the log."
                        },
                        "params_project": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Project that is refered to in the params of the log."
                        },
                        "path": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Path for a file associated with the log."
                        },
                        "pointer": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the node that is linked to the associated node."
                        },
                        "preprint": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Preprint related to the associated node."
                        },
                        "preprint_provider": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Preprint provider for the associated node."
                        },
                        "previous_institution": {
                          "type": "string",
                          "readOnly": true,
                          "description": "If a primary institution for the associated node is changed, this will show the previous institution."
                        },
                        "source": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title."
                        },
                        "study": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Dataverse study linked to the associated node."
                        },
                        "tag": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Tag associated with the associated node."
                        },
                        "tags": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Tags associated with the associated node."
                        },
                        "target": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title."
                        },
                        "template_node": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary containing information about the node that was used as a template for the associated node."
                        },
                        "title_new": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The new title for the associated node."
                        },
                        "title_original": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The original title for the associated node"
                        },
                        "updated_fields": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary containing all of the fields updated on the associated node."
                        },
                        "urls": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Links to access information about the file associated with this log."
                        },
                        "version": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Version of the wiki page associated with this log."
                        },
                        "wiki": {
                          "type": "string",
                          "readOnly": true,
                          "description": "A dictionary with information about the wiki page associated with the log."
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the log.",
                  "required": [
                    "node"
                  ],
                  "properties": {
                    "node": {
                      "description": "A relationship to the node associated with this log.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "original_node": {
                      "description": "A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "user": {
                      "description": "A relationship to the user who performed the log action.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "linked_node": {
                      "description": "A relationship to the node linked to this log.",
                      "readOnly": true,
                      "type": "string"
                    },
                    "template_node": {
                      "description": "A relationship to the node used as a template for this log.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "links": {
                  "description": "URLs to alternative representations of the log entity.",
                  "readOnly": true,
                  "type": "object",
                  "title": "Links",
                  "required": [
                    "self"
                  ],
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the log."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "original_node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/jk5cv/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/logs/4fc706a80b6e9118ef000122/"
                  },
                  "attributes": {
                    "date": "2012-05-31T05:50:32.083000",
                    "action": "contributor_added",
                    "params": {
                      "params_node": {
                        "id": "ezcuj",
                        "title": "Reproducibility Project: Psychology"
                      },
                      "contributors": [
                        {
                          "family_name": "Nosek",
                          "middle_names": "A.",
                          "given_name": "Brian",
                          "full_name": "Brian A. Nosek",
                          "active": true,
                          "id": "cdi38"
                        }
                      ]
                    }
                  },
                  "type": "logs",
                  "id": "4fc706a80b6e9118ef000122"
                }
              }
            }
          }
        }
      }
    },
    "/actions/": {
      "get": {
        "summary": "Actions",
        "description": "\nA log can have one of many actions. The complete list of loggable actions (in the format {identifier}: {description}) is as follows:\n* `project_created`: A Node is created\n* `project_registered`: A Node is registered\n* `project_deleted`: A Node is deleted\n* `created_from`: A Node is created using an existing Node as a template\n* `pointer_created`: A Pointer is created\n* `pointer_forked`: A Pointer is forked\n* `pointer_removed`: A Pointer is removed\n* `node_removed`: A component is deleted\n* `node_forked`: A Node is forked\n---\n* `made_public`: A Node is made public\n* `made_private`: A Node is made private\n* `tag_added`: A tag is added to a Node\n* `tag_removed`: A tag is removed from a Node\n* `edit_title`: A Node's title is changed\n* `edit_description`: A Node's description is changed\n* `updated_fields`: One or more of a Node's fields are changed\n* `external_ids_added`: An external identifier is added to a Node (e.g. DOI, ARK)\n* `view_only_link_added`: A view-only link was added to a Node\n* `view_only_link_removed`:  A view-only link was removed from a Node\n---\n* `contributor_added`: A Contributor is added to a Node\n* `contributor_removed`: A Contributor is removed from a Node\n* `contributors_reordered`: A Contributor's position in a Node's bibliography is changed\n* `permissions_updated`: A Contributor`s permissions on a Node are changed\n* `made_contributor_visible`: A Contributor is made bibliographically visible on a Node\n* `made_contributor_invisible`: A Contributor is made bibliographically invisible on a Node\n---\n* `wiki_updated`: A Node's wiki is updated\n* `wiki_deleted`: A Node's wiki is deleted\n* `wiki_renamed`: A Node's wiki is renamed\n* `made_wiki_public`: A Node's wiki is made public\n* `made_wiki_private`: A Node's wiki is made private\n---\n* `addon_added`: An add-on is linked to a Node\n* `addon_removed`: An add-on is unlinked from a Node\n* `addon_file_moved`: A File in a Node's linked add-on is moved\n* `addon_file_copied`: A File in a Node's linked add-on is copied\n* `addon_file_renamed`: A File in a Node's linked add-on is renamed\n* `node_authorized`: An addon is authorized for a project\n* `node_deauthorized`: An addon is deauthorized for a project\n* `folder_created`: A Folder is created in a Node's linked add-on\n* `file_added`: A File is added to a Node's linked add-on\n* `file_updated`: A File is updated on a Node's linked add-on\n* `file_removed`: A File is removed from a Node's linked add-on\n* `file_restored`: A File is restored in a Node's linked add-on\n---\n* `comment_added`: A Comment is added to some item\n* `comment_removed`: A Comment is removed from some item\n* `comment_updated`: A Comment is updated on some item\n---\n* `embargo_initiated`: An embargoed Registration is proposed on a Node\n* `embargo_approved`: A proposed Embargo of a Node is approved\n* `embargo_cancelled`: A proposed Embargo of a Node is cancelled\n* `embargo_completed`: A proposed Embargo of a Node is completed\n* `retraction_initiated`: A Withdrawal of a Registration is proposed\n* `retraction_approved`: A Withdrawal of a Registration is approved\n* `retraction_cancelled`: A Withdrawal of a Registration is cancelled\n* `registration_initiated`: A Registration of a Node is proposed\n* `registration_approved`: A proposed Registration is approved\n* `registration_cancelled`: A proposed Registration is cancelled",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Logs"
        ],
        "operationId": "logs_actions"
      }
    },
    "/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "\nA paginated list of all verified institutions.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include institutions that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/?filter[id]=cos.\n\nInstitutions may be filtered by their `id`, `name`, and `auth_url`",
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      },
                      "iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Internationalized Resource Identifier (IRI) of the institution."
                      },
                      "ror_iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Research Organization Registry (ROR) IRI of the institution."
                      },
                      "iris": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "List of IRIs associated with the institution."
                      },
                      "assets": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo."
                          },
                          "logo_rounded": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo with rounded corners."
                          },
                          "banner": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's banner."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Static path to the institution specific logo."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "department_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/metrics/departments/",
                            "meta": {}
                          }
                        }
                      },
                      "users_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/metrics/users/",
                            "meta": {}
                          }
                        }
                      },
                      "summary_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/metrics/sumary/",
                            "meta": {}
                          },
                          "data": {
                            "id": "cos",
                            "type": "institution-summary-metrics"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/cos/"
                    },
                    "attributes": {
                      "name": "Center For Open Science",
                      "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>.",
                      "iri": "http://www.test.edu",
                      "ror_iri": "https://ror.org/000000000",
                      "iris": [
                        "https://ror.org/000000000",
                        "http://www.test.edu/",
                        "https://osf.io/institutions/test/"
                      ],
                      "assets": {
                        "logo": "https://storage.test.com/test-shield.png",
                        "logo_rounded": "https://storage.test.com/test-shield-rounded-corners.png",
                        "banner": "https://storage.test.com/test-banner.png"
                      }
                    }
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "meta": {
                    "total": 15,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/": {
      "get": {
        "summary": "Retrieve an institution",
        "description": "Retrieves the details of an institution\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested institution, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_detail",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      },
                      "iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Internationalized Resource Identifier (IRI) of the institution."
                      },
                      "ror_iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Research Organization Registry (ROR) IRI of the institution."
                      },
                      "iris": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "List of IRIs associated with the institution."
                      },
                      "assets": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo."
                          },
                          "logo_rounded": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo with rounded corners."
                          },
                          "banner": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's banner."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Static path to the institution specific logo."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/users/",
                          "meta": {}
                        }
                      }
                    },
                    "registrations": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "department_metrics": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/metrics/departments/",
                          "meta": {}
                        }
                      }
                    },
                    "users_metrics": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/metrics/users/",
                          "meta": {}
                        }
                      }
                    },
                    "summary_metrics": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/institutions/cos/metrics/sumary/",
                          "meta": {}
                        },
                        "data": {
                          "id": "cos",
                          "type": "institution-summary-metrics"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/institutions/cos/"
                  },
                  "attributes": {
                    "name": "Center For Open Science",
                    "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>.",
                    "iri": "http://www.test.edu",
                    "ror_iri": "https://ror.org/000000000",
                    "iris": [
                      "https://ror.org/000000000",
                      "http://www.test.edu/",
                      "https://osf.io/institutions/test/"
                    ],
                    "assets": {
                      "logo": "https://storage.test.com/test-shield.png",
                      "logo_rounded": "https://storage.test.com/test-shield-rounded-corners.png",
                      "banner": "https://storage.test.com/test-banner.png"
                    }
                  },
                  "type": "institutions",
                  "id": "cos"
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/users/": {
      "get": {
        "summary": "List all affiliated users",
        "description": "A paginated list of all users affiliated with an institution.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 users. Each resource in the array is a separate users object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nYou can optionally request that the response only include users that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/users?filter[family_name]=Nosek.\n\nUsers may be filtered by their `id`, `full_name`, `given_name`, `middle_names`, and `family_name`",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_users_list",
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "User",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the user entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the user entity (`users`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the user entity.",
                    "required": [
                      "active",
                      "date_registered",
                      "full_name"
                    ],
                    "properties": {
                      "active": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the user is an active user."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                      },
                      "family_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The family name of the user, used for bibliographic citations."
                      },
                      "full_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The full name of the user, used for display on the OSF."
                      },
                      "given_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The given name of the user, used for bibliographic citations."
                      },
                      "middle_names": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The middle names of the user, used for bibliographic citations."
                      },
                      "suffix": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The suffix of the user, used for bibliographic citations."
                      },
                      "locale": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's locale, e.g. 'en_US'."
                      },
                      "timezone": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's timezone, e.g. 'Etc/UTC'."
                      },
                      "social": {
                        "type": "object",
                        "readOnly": false,
                        "additionalProperties": true,
                        "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                      },
                      "employment": {
                        "type": "array",
                        "readOnly": false,
                        "description": "A list of the user's employment history records.",
                        "items": {
                          "type": "object",
                          "required": [
                            "institution",
                            "startYear",
                            "startMonth",
                            "ongoing"
                          ],
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "institution": {
                              "type": "string"
                            },
                            "department": {
                              "type": "string"
                            },
                            "startYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "startMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "endYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "endMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "ongoing": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "education": {
                        "type": "array",
                        "readOnly": false,
                        "description": "A list of the user's educational history records.",
                        "items": {
                          "type": "object",
                          "required": [
                            "institution",
                            "startYear",
                            "startMonth",
                            "ongoing"
                          ],
                          "properties": {
                            "degree": {
                              "type": "string"
                            },
                            "institution": {
                              "type": "string"
                            },
                            "department": {
                              "type": "string"
                            },
                            "startYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "startMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "endYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "endMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "ongoing": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                    "properties": {
                      "institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions the user is affiliated with."
                      },
                      "nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes the user is a contributor to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the user entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile page on the OSF."
                      },
                      "profile_image": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile image."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "users",
                    "id": "{user_id}",
                    "attributes": {
                      "full_name": "Casey M. Rollins",
                      "middle_names": "Marie",
                      "social": {
                        "github": [
                          "https://github.com/caseyrollins"
                        ],
                        "twitter": [
                          "https://twitter.com/crollins"
                        ]
                      },
                      "employment": [
                        {
                          "title": "Data Scientist",
                          "institution": "Open Science Framework",
                          "department": "Engineering",
                          "startYear": 2018,
                          "startMonth": 5,
                          "ongoing": true
                        }
                      ],
                      "education": [
                        {
                          "degree": "MS in Computer Science",
                          "institution": "University of Somewhere",
                          "department": "Computer Science",
                          "startYear": 2014,
                          "startMonth": 9,
                          "endYear": 2016,
                          "endMonth": 6,
                          "ongoing": false
                        }
                      ]
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/cdi38/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/users/cdi38/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/users/cdi38/institutions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/users/cdi38/",
                      "html": "https://osf.io/cdi38/",
                      "profile_image": "https://secure.gravatar.com/avatar/37fc491096861dae49fe23ba665af56b?d=identicon"
                    },
                    "attributes": {
                      "family_name": "Nosek",
                      "suffix": "",
                      "locale": "en_US",
                      "date_registered": "2012-05-31T05:29:01.320000",
                      "middle_names": "A.",
                      "given_name": "Brian",
                      "full_name": "Brian A. Nosek",
                      "active": true,
                      "timezone": "America/New_York"
                    },
                    "type": "users",
                    "id": "cdi38"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/users/?page=8",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/users/?page=2",
                  "meta": {
                    "total": 77,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/nodes/": {
      "get": {
        "summary": "List all affiliated nodes",
        "description": "A paginated list of all nodes affiliated with an institution.\n#### Versioning\nAs of version `2.2`, affiliated components (in addition to affiliated top-level projects) are returned from this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate nodes object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/nodes?filter[title]=science.\n\nNodes may be filtered by their `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_node_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/comments/?filter%5Btarget%5D=qpxv2",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qpxv2/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/qpxv2/",
                      "html": "https://osf.io/qpxv2/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "A project storing mp4 files of all the webinar videos posted to the COS youtube channel",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-02-09T14:19:23.054000",
                      "title": "COS Webinar Videos",
                      "collection": false,
                      "registration": false,
                      "date_created": "2017-02-08T18:27:00.135000",
                      "current_user_can_comment": true,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2017"
                      },
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "qpxv2"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/nodes/?page=330",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "meta": {
                    "total": 337,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/registrations/": {
      "get": {
        "summary": "List all affiliated registrations",
        "description": "A paginated list of all registrations affiliated with an institution.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate users object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/institutions/cos/registrations?filter[title]=science.\n\nRegistrations may be filtered by their  `id`, `title`, `description`, `public`, `tags`, `category`, `date_created`, `date_modified`, `root`, `parent`, `contributors`, and `preprint`",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "institution_id",
            "description": "The unique identifier of the institution you wish to retrieve."
          }
        ],
        "tags": [
          "Institutions"
        ],
        "operationId": "institutions_registration_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/comments/?filter%5Btarget%5D=xemzv",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xemzv/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/xemzv/",
                      "html": "https://osf.io/xemzv/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This project contains the materials and proposal for the upcoming OASPA 2016 Conference",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-12-14T20:48:58.147000",
                      "title": "COASPA 2016, Center for Open Science",
                      "collection": false,
                      "registration": true,
                      "date_created": "2016-05-26T14:56:27.310000",
                      "current_user_can_comment": true,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "TOP Guidelines",
                        "Open Practice Badges",
                        "Registered Reports",
                        "Prereg Challenge"
                      ]
                    },
                    "type": "nodes",
                    "id": "xemzv"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/registrations/?page=3",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/registrations/?page=2",
                  "meta": {
                    "total": 22,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{institution_id}/relationships/nodes/": {
      "get": {
        "summary": "List nodes affiliated with an institution (relationship data)",
        "description": "Retrieve relationship data for nodes affiliated with the given institution.\n\n### Permissions\n- Public nodes: Anyone can view the affiliation.\n- Private nodes: Only contributors can view affiliation.\n- Requires read access to the institution and nodes.\n",
        "tags": [
          "Institutions"
        ],
        "operationId": "listInstitutionNodeRelationships",
        "parameters": [
          {
            "name": "institution_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the institution."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved node relationships.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "nodes"
                      },
                      "id": {
                        "type": "string",
                        "example": "abcd1"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "/v2/institutions/{institution_id}/relationships/nodes/"
                    },
                    "related": {
                      "type": "string",
                      "example": "/v2/institutions/{institution_id}/nodes/"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view this institution's nodes."
          },
          "404": {
            "description": "Institution not found."
          }
        }
      },
      "post": {
        "summary": "Add node relationships to an institution",
        "description": "Add nodes to an institution's affiliated nodes relationship.\n\n### Permissions\n- Requires write access on each node being added.\n- User must be affiliated with the institution.\n",
        "tags": [
          "Institutions"
        ],
        "operationId": "addInstitutionNodeRelationships",
        "consumes": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "institution_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the institution."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "List of node relationships to add.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "nodes"
                      },
                      "id": {
                        "type": "string",
                        "example": "abcd1"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Nodes successfully affiliated with institution."
          },
          "204": {
            "description": "No changes made (nodes already affiliated)."
          },
          "400": {
            "description": "Invalid request payload."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to affiliate these nodes."
          },
          "404": {
            "description": "Institution not found."
          }
        }
      },
      "delete": {
        "summary": "Remove node relationships from an institution",
        "description": "Remove nodes from an institution's affiliated nodes relationship.\n\n### Permissions\n- Requires write access on each node being removed.\n",
        "tags": [
          "Institutions"
        ],
        "operationId": "removeInstitutionNodeRelationships",
        "consumes": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "institution_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the institution."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "List of node relationships to remove.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "nodes"
                      },
                      "id": {
                        "type": "string",
                        "example": "abcd1"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Nodes successfully removed from affiliation."
          },
          "400": {
            "description": "Invalid request payload."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to modify these nodes."
          },
          "404": {
            "description": "Institution not found."
          }
        }
      }
    },
    "/institutions/{institution_id}/relationships/registrations/": {
      "get": {
        "summary": "List registrations affiliated with an institution (relationship data)",
        "description": "Retrieve relationship data for registrations affiliated with the given institution.\n\n### Permissions\n- Public registrations: Anyone can view the affiliation.\n- Private registrations: Only contributors can view affiliation.\n- Requires read access to the institution and registrations.\n",
        "tags": [
          "Institutions"
        ],
        "operationId": "listInstitutionRegistrationRelationships",
        "parameters": [
          {
            "name": "institution_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the institution."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved registration relationships.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "id": {
                        "type": "string",
                        "example": "reg123"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "/v2/institutions/{institution_id}/relationships/registrations/"
                    },
                    "related": {
                      "type": "string",
                      "example": "/v2/institutions/{institution_id}/registrations/"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view this institution's registrations."
          },
          "404": {
            "description": "Institution not found."
          }
        }
      },
      "post": {
        "summary": "Add registration relationships to an institution",
        "description": "Add registrations to an institution's affiliated registrations relationship.\n\n### Permissions\n- Requires write access on each registration being added.\n- User must be affiliated with the institution.\n",
        "tags": [
          "Institutions"
        ],
        "operationId": "addInstitutionRegistrationRelationships",
        "consumes": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "institution_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the institution."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "List of registration relationships to add.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "id": {
                        "type": "string",
                        "example": "reg123"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Registrations successfully affiliated with institution."
          },
          "204": {
            "description": "No changes made (registrations already affiliated)."
          },
          "400": {
            "description": "Invalid request payload."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to affiliate these registrations."
          },
          "404": {
            "description": "Institution not found."
          }
        }
      },
      "delete": {
        "summary": "Remove registration relationships from an institution",
        "description": "Remove registrations from an institution's affiliated registrations relationship.\n\n### Permissions\n- Requires write access on each registration being removed.\n",
        "tags": [
          "Institutions"
        ],
        "operationId": "removeInstitutionRegistrationRelationships",
        "consumes": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "institution_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the institution."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "List of registration relationships to remove.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "id": {
                        "type": "string",
                        "example": "reg123"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Registrations successfully removed from affiliation."
          },
          "400": {
            "description": "Invalid request payload."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to modify these registrations."
          },
          "404": {
            "description": "Institution not found."
          }
        }
      }
    },
    "/schemas/registrations/": {
      "get": {
        "summary": "Retrieve a list of Registration Schemas",
        "description": "Retrieve a paginated list of all active Registration Schemas. Registration Schemas describe the supplemental questions that accompany a registration. Registration Schemas are read-only for API users.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of 10 Registration Schemas. Each resource in the array is a separate Registration Schemas object.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Registration Schemas"
        ],
        "operationId": "registration_schemas_list",
        "x-response-schema": "Registration Schemas",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema (`registration-schemas`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the Registration Schema"
                    },
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents whether the Registration Schema is active."
                    },
                    "schema_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "The version of this Registration Schema"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "items": {
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "description": "This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs that link to alternative representations of the Registration Schema.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Registration Schema.",
                  "properties": {
                    "schema_blocks": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the list of schema blocks that contain the question prompt information for the Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registration-schemas",
                    "id": "6176c9d45e01f100091d4f94",
                    "attributes": {
                      "name": "Test Long-Form Registration Schema",
                      "schema_version": 2,
                      "schema": {
                        "title": "Test Long-Form Registration Schema",
                        "name": "Test Long-Form Registration Schema",
                        "atomicSchema": true,
                        "version": 2,
                        "description": "This is a test form for documentation purposes.",
                        "pages": [],
                        "blocks": [
                          {
                            "block_type": "page-heading",
                            "display_text": "The title of the page"
                          },
                          {
                            "block_type": "question-label",
                            "display_text": "The first question, put answer below."
                          },
                          {
                            "block_type": "long-text-input",
                            "registration_response_key": "Q1"
                          }
                        ]
                      },
                      "description": "This is a test form for documentation purposes.",
                      "active": true
                    },
                    "relationships": {
                      "schema_blocks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/schema_blocks/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 20,
                  "version": 2.2
                },
                "links": {
                  "self": "https://api.test.osf.io/v2/schemas/registrations/",
                  "first": null,
                  "last": "https://api.test.osf.io/v2/schemas/registrations/?page=2",
                  "prev": null,
                  "next": "https://api.test.osf.io/v2/schemas/registrations/?page=2"
                }
              }
            }
          }
        }
      }
    },
    "/schemas/registrations/{registration_schema_id}": {
      "get": {
        "summary": "Retrieve a Registration Schema",
        "description": "Retrieves the details of a given Registration Schema. Registration Schemas defines the desired supplemental information that should accompany be included in a Registration. Registration Schemas are Read-only to API users.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_schema_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Registration Schemas"
        ],
        "operationId": "registration_schema_read",
        "x-response-schema": "Registration Schema",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema (`registration-schemas`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the Registration Schema"
                    },
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents whether the Registration Schema is active."
                    },
                    "schema_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "The version of this Registration Schema"
                    },
                    "schema": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "items": {
                          "type": "object"
                        }
                      },
                      "readOnly": true,
                      "description": "This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs that link to alternative representations of the Registration Schema.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Registration Schema.",
                  "properties": {
                    "schema_blocks": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the list of schema blocks that contain the question prompt information for the Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "registration-schemas",
                  "id": "6176c9d45e01f100091d4f94",
                  "attributes": {
                    "name": "Test Long-Form Registration Schema",
                    "schema_version": 2,
                    "schema": {
                      "title": "Test Long-Form Registration Schema",
                      "name": "Test Long-Form Registration Schema",
                      "version": 2,
                      "description": "This is a test form for documentation purposes.",
                      "pages": [],
                      "blocks": [
                        {
                          "block_type": "page-heading",
                          "display_text": "The title of the page"
                        },
                        {
                          "block_type": "question-label",
                          "display_text": "The first question, put answer below."
                        },
                        {
                          "block_type": "long-text-input",
                          "registration_response_key": "Q1"
                        }
                      ],
                      "atomicSchema": true
                    },
                    "description": "This is a test form for documentation purposes.",
                    "active": true
                  },
                  "relationships": {
                    "schema_blocks": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/schema_blocks/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/": {
      "get": {
        "summary": "List all Schema Responses",
        "description": "This retrieves a paginated list of all active Schema Responses that are public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys. The `data` key contains an array of 10 Schema Responses. Each resource in the array is a separate Registration Schemas object. The `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_responses_list",
        "x-response-schema": "Schema Responses",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registration-schemas",
                    "id": "61b79f9eadbb5701424a2d5e",
                    "attributes": {
                      "revision_justification": "I made a mistake",
                      "date_created": "2021-12-13T19:31:42.058Z",
                      "date_submitted": "2021-12-13T19:53:02.837Z",
                      "date_modified": "2021-12-13T19:53:05.015Z",
                      "revision_responses": {
                        "q1": "Answer 1",
                        "q2": "Answer 2"
                      },
                      "reviews_state": "approved",
                      "is_original_response": false,
                      "is_pending_current_user_approval": false
                    },
                    "relationships": {
                      "actions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "registration": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/jxtek/",
                            "meta": {}
                          },
                          "data": {
                            "id": "jxtek",
                            "type": "registration"
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/5e795fc0d2833800195735d0/",
                            "meta": {}
                          },
                          "data": {
                            "id": "5e795fc0d2833800195735d0",
                            "type": "registration-schemas"
                          }
                        }
                      },
                      "initiated_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/swrv7/",
                            "meta": {}
                          },
                          "data": {
                            "id": "swrv7",
                            "type": "users"
                          }
                        }
                      }
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.test.osf.io/v2/schema_responses/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Schema Response",
        "description": "This endpoint creates a new Schema Response with an `in_progress` state. A new response can only be created if the current schema response is in an `approved` state.\n#### Returns\nReturns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_response_ppost",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "61c1e058e88376000a90e5dd",
                  "type": "schema-responses",
                  "attributes": {
                    "date_created": "2021-12-21T14:10:32.665084",
                    "date_submitted": null,
                    "date_modified": "2021-12-21T14:10:32.665111",
                    "revision_justification": "",
                    "revision_responses": {
                      "uploader": [],
                      "summary": "A summary of what is contained in this registration."
                    },
                    "updated_response_keys": [],
                    "reviews_state": "in_progress"
                  },
                  "relationships": {
                    "actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61c1e058e88376000a90e5dd/actions/",
                          "meta": {}
                        }
                      }
                    },
                    "registration": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/e4ygz/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "e4ygz",
                        "type": "registrations"
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/5e13965879bee100010a790f/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "5e13965879bee100010a790f",
                        "type": "registration-schemas"
                      }
                    },
                    "initiated_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/zpw9n/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "zpw9n",
                        "type": "users"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61c1e058e88376000a90e5dd/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}": {
      "get": {
        "summary": "Retrieve a Schema Response",
        "description": "This retrieves a single Schema response using it's id.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_responses_read",
        "x-response-schema": "Schema Response",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "registration-schemas",
                  "id": "61b79f9eadbb5701424a2d5e",
                  "attributes": {
                    "revision_justification": "I made a mistake",
                    "date_created": "2021-12-13T19:31:42.058Z",
                    "date_submitted": "2021-12-13T19:53:02.837Z",
                    "date_modified": "2021-12-13T19:53:05.015Z",
                    "revision_responses": {
                      "q1": "Answer 1",
                      "q2": "Answer 2"
                    },
                    "reviews_state": "approved",
                    "is_original_response": false,
                    "is_pending_current_user_approval": false
                  },
                  "relationships": {
                    "actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/actions/",
                          "meta": {}
                        }
                      }
                    },
                    "registration": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/jxtek/",
                          "meta": {}
                        },
                        "data": {
                          "id": "jxtek",
                          "type": "registration"
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/5e795fc0d2833800195735d0/",
                          "meta": {}
                        },
                        "data": {
                          "id": "5e795fc0d2833800195735d0",
                          "type": "registration-schemas"
                        }
                      }
                    },
                    "initiated_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/swrv7/",
                          "meta": {}
                        },
                        "data": {
                          "id": "swrv7",
                          "type": "users"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Registration's Schema Response",
        "description": "Patching to this endpoint allows one to directly edit the revision responses on the Schema Response of a Registration if that Schema Response is in an `in_progress` state.\n#### Returns\nReturns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_response_patch",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Responses",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Schema Response (`schema-response`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Schema Response.",
                  "properties": {
                    "revision_justification": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A user provided string representing the reason a new Schema Response was needed."
                    },
                    "date_created": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was created"
                    },
                    "date_submitted": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was submitted for approval."
                    },
                    "date_modified": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The date the Schema Response was most recently changed."
                    },
                    "revision_responses": {
                      "type": "object",
                      "items": {
                        "type": "object",
                        "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                      },
                      "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                    },
                    "is_pending_current_user_approval": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                    },
                    "is_original_response": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                    },
                    "updated_response_keys": {
                      "type": "array",
                      "readOnly": true,
                      "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": false,
                  "description": "URLs to alternative representations of the Schema Response entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the detail page for a Schema Response."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "actions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                    },
                    "registration": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration for this Schema Response."
                    },
                    "registration_schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the Registration Schema for this Schema Response."
                    },
                    "initiated_by": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A link to the User who initiated the creation of the Schema Response."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "schema-responses",
                  "attributes": {
                    "revision_justification": "I made a mistake.",
                    "revision_responses": {
                      "Q1": "updated response"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "registration-schemas",
                  "id": "61b79f9eadbb5701424a2d5e",
                  "attributes": {
                    "revision_justification": "I made a mistake",
                    "date_created": "2021-12-13T19:31:42.058Z",
                    "date_submitted": "2021-12-13T19:53:02.837Z",
                    "date_modified": "2021-12-13T19:53:05.015Z",
                    "revision_responses": {
                      "q1": "updated respons",
                      "q2": "Answer 2"
                    },
                    "reviews_state": "in_progress",
                    "is_original_response": false,
                    "is_pending_current_user_approval": false
                  },
                  "relationships": {
                    "actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/actions/",
                          "meta": {}
                        }
                      }
                    },
                    "registration": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/jxtek/",
                          "meta": {}
                        },
                        "data": {
                          "id": "jxtek",
                          "type": "registration"
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/5e795fc0d2833800195735d0/",
                          "meta": {}
                        },
                        "data": {
                          "id": "5e795fc0d2833800195735d0",
                          "type": "registration-schemas"
                        }
                      }
                    },
                    "initiated_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/swrv7/",
                          "meta": {}
                        },
                        "data": {
                          "id": "swrv7",
                          "type": "users"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Incomplete Schema Response",
        "description": "This endpoint deletes a new Schema Response. Schema Responses can only be deleted in the `in_progress` state. Once a Schema Response is transitioned to an `approved` it is immutable and another Schema Response must be created to update the Schema Response for that registration.\n#### Returns\nReturns a JSON object with a `data` key containing an updated representation of the requested Schema Response, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Responses"
        ],
        "operationId": "schema_response_delete",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/actions/": {
      "get": {
        "summary": "Retrieve a list of Schema Response Actions for a Schema Response",
        "description": "This retrieves a paginated list of all Schema Response Actions created for a Schema Response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Response Actions"
        ],
        "operationId": "schema_response_action_read",
        "x-response-schema": "Schema Response Actions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Response Actions",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response Action."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Schema Response Action (`schema-response-actions`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "properties": {
                    "trigger": {
                      "enum": [
                        "submit",
                        "approve",
                        "accept",
                        "admin_reject",
                        "moderator_reject"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the trigger that caused the action."
                    },
                    "from_state": {
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response prior to the creation of the action."
                    },
                    "to_state": {
                      "enum": [
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response after the creation of the action"
                    },
                    "comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A comment made explaining the reasoning of the action."
                    },
                    "date_created": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The date the action was created."
                    },
                    "auto": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether a user created the action."
                    },
                    "visible": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether the action is visible."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action entity.",
                  "properties": {
                    "creator": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the Registration Schema entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "61b9eae1a7d8ac025c4c46d3",
                    "type": "schema-response-actions",
                    "attributes": {
                      "trigger": "submit",
                      "comment": "",
                      "from_state": "in_progress",
                      "to_state": "unapproved",
                      "date_created": "2021-12-15T13:17:21.845573Z",
                      "date_modified": "2021-12-15T13:17:21.845622Z",
                      "auto": false,
                      "visible": true
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/zfsr2/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "zfsr2",
                          "type": "users"
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "61b9cd62eb66180215222669",
                          "type": "schema_responses"
                        }
                      }
                    },
                    "embeds": {
                      "creator": {
                        "data": {
                          "id": "zfsr2",
                          "type": "users",
                          "attributes": {
                            "full_name": "Lukasz Okruszek",
                            "given_name": "Łukasz",
                            "middle_names": "",
                            "family_name": "Okruszek",
                            "suffix": "",
                            "date_registered": "2017-02-02T21:32:45.495000Z",
                            "active": true,
                            "timezone": "Europe/Budapest",
                            "locale": "pl",
                            "social": {
                              "ssrn": "",
                              "orcid": "0000-0002-7136-2864",
                              "github": [],
                              "scholar": "CHyWD84AAAAJ&amp;hl",
                              "twitter": [],
                              "linkedIn": [],
                              "impactStory": "",
                              "baiduScholar": "",
                              "researchGate": "Lukasz-Okruszek",
                              "researcherId": "",
                              "profileWebsites": [],
                              "academiaProfileID": "",
                              "academiaInstitution": ""
                            },
                            "employment": [
                              {
                                "title": "Head",
                                "endYear": "",
                                "ongoing": true,
                                "endMonth": 0,
                                "startYear": "2016",
                                "department": "Social Neuroscience Lab",
                                "startMonth": 9,
                                "institution": "Institute of Psychology, Polish Academy of Sciences"
                              }
                            ],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "quickfiles": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/quickfiles/",
                                  "meta": {}
                                },
                                "upload": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/",
                                  "meta": {}
                                },
                                "download": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/?zip=",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/zfsr2/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/zfsr2/",
                            "profile_image": "https://secure.gravatar.com/avatar/8a25f4601ac997f113b3145aa5cf907e?d=identicon",
                            "self": "https://api.osf.io/v2/users/zfsr2/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/actions/61b9eae1a7d8ac025c4c46d3/"
                    }
                  },
                  {
                    "id": "61b9eaf13cddaa026ef7245d",
                    "type": "schema-response-actions",
                    "attributes": {
                      "trigger": "approve",
                      "comment": "",
                      "from_state": "unapproved",
                      "to_state": "approved",
                      "date_created": "2021-12-15T13:17:37.195568Z",
                      "date_modified": "2021-12-15T13:17:37.195597Z",
                      "auto": false,
                      "visible": true
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/zfsr2/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "zfsr2",
                          "type": "users"
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "61b9cd62eb66180215222669",
                          "type": "schema_responses"
                        }
                      }
                    },
                    "embeds": {
                      "creator": {
                        "data": {
                          "id": "zfsr2",
                          "type": "users",
                          "attributes": {
                            "full_name": "Test User",
                            "given_name": "Test",
                            "middle_names": "",
                            "family_name": "User",
                            "suffix": "",
                            "date_registered": "2017-02-02T21:32:45.495000Z",
                            "active": true,
                            "timezone": "Europe/Budapest",
                            "locale": "pl",
                            "social": {
                              "ssrn": "",
                              "orcid": "0000-0002-7136-286X",
                              "github": [],
                              "scholar": "",
                              "twitter": [],
                              "linkedIn": [],
                              "impactStory": "",
                              "baiduScholar": "",
                              "researchGate": "test-user",
                              "researcherId": "",
                              "profileWebsites": [],
                              "academiaProfileID": "",
                              "academiaInstitution": ""
                            },
                            "employment": [
                              {
                                "title": "Developer",
                                "endYear": "",
                                "ongoing": true,
                                "endMonth": 0,
                                "startYear": "2017",
                                "department": "Denfense",
                                "startMonth": 9,
                                "institution": "Institute of the Stars"
                              }
                            ],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "quickfiles": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/quickfiles/",
                                  "meta": {}
                                },
                                "upload": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/",
                                  "meta": {}
                                },
                                "download": {
                                  "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/?zip=",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/sfsr2/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/zfsr2/",
                            "profile_image": "https://secure.gravatar.com/avatar/8a25f4601ac997f113b3145aa5cf907e?d=identicon",
                            "self": "https://api.osf.io/v2/users/sfsr2/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/actions/61b9eaf13cddaa026ef7245d/"
                    }
                  }
                ],
                "meta": {
                  "total": 2,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/actions/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new Schema Response Action",
        "description": "This creates a new Schema Response Action in order to trigger a state transition for a Schema Response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Schema Response Actions"
        ],
        "operationId": "schema_response_action_read",
        "x-response-schema": "Schema Response Actions",
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/actions/{schema_response_action_id}": {
      "get": {
        "summary": "A Schema Response Action from a Schema Response",
        "description": "Retrieves a Schema Response Action by it's ID.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Schema Response Actions, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Schema Response example `61b9cd62eb66180215222669`."
          },
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_action_id",
            "required": true,
            "description": "The unique identifier of the Schema Response Action example `61b9eae1a7d8ac025c4c46d3`."
          }
        ],
        "tags": [
          "Schema Response Actions"
        ],
        "operationId": "schema_response_action_read",
        "x-response-schema": "Schema Response Actions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Schema Response Actions",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Schema Response Action."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Schema Response Action (`schema-response-actions`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "properties": {
                    "trigger": {
                      "enum": [
                        "submit",
                        "approve",
                        "accept",
                        "admin_reject",
                        "moderator_reject"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the trigger that caused the action."
                    },
                    "from_state": {
                      "enum": [
                        "initial",
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response prior to the creation of the action."
                    },
                    "to_state": {
                      "enum": [
                        "in_progress",
                        "approved",
                        "pending_moderation"
                      ],
                      "type": "string",
                      "readOnly": false,
                      "description": "The name of the state of the Schema Response after the creation of the action"
                    },
                    "comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A comment made explaining the reasoning of the action."
                    },
                    "date_created": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The date the action was created."
                    },
                    "auto": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether a user created the action."
                    },
                    "visible": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool of representing whether the action is visible."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action entity.",
                  "properties": {
                    "creator": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the Registration Schema entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "61b9eae1a7d8ac025c4c46d3",
                  "type": "schema-response-actions",
                  "attributes": {
                    "trigger": "submit",
                    "comment": "",
                    "from_state": "in_progress",
                    "to_state": "unapproved",
                    "date_created": "2021-12-15T13:17:21.845573Z",
                    "date_modified": "2021-12-15T13:17:21.845622Z",
                    "auto": false,
                    "visible": true
                  },
                  "relationships": {
                    "creator": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/zfsr2/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "zfsr2",
                        "type": "users"
                      }
                    },
                    "target": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "61b9cd62eb66180215222669",
                        "type": "schema_responses"
                      }
                    }
                  },
                  "embeds": {
                    "creator": {
                      "data": {
                        "id": "zfsr2",
                        "type": "users",
                        "attributes": {
                          "full_name": "Lukasz Okruszek",
                          "given_name": "Łukasz",
                          "middle_names": "",
                          "family_name": "Okruszek",
                          "suffix": "",
                          "date_registered": "2017-02-02T21:32:45.495000Z",
                          "active": true,
                          "timezone": "Europe/Budapest",
                          "locale": "pl",
                          "social": {
                            "ssrn": "",
                            "orcid": "0000-0002-7136-2864",
                            "github": [],
                            "scholar": "CHyWD84AAAAJ&amp;hl",
                            "twitter": [],
                            "linkedIn": [],
                            "impactStory": "",
                            "baiduScholar": "",
                            "researchGate": "Lukasz-Okruszek",
                            "researcherId": "",
                            "profileWebsites": [],
                            "academiaProfileID": "",
                            "academiaInstitution": ""
                          },
                          "employment": [
                            {
                              "title": "Head",
                              "endYear": "",
                              "ongoing": true,
                              "endMonth": 0,
                              "startYear": "2016",
                              "department": "Social Neuroscience Lab",
                              "startMonth": 9,
                              "institution": "Institute of Psychology, Polish Academy of Sciences"
                            }
                          ],
                          "education": []
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "quickfiles": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/quickfiles/",
                                "meta": {}
                              },
                              "upload": {
                                "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/",
                                "meta": {}
                              },
                              "download": {
                                "href": "https://files.osf.io/v1/resources/ytg45jbs3r/providers/osfstorage/?zip=",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "https://api.osf.io/v2/users/zfsr2/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/zfsr2/preprints/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://osf.io/zfsr2/",
                          "profile_image": "https://secure.gravatar.com/avatar/8a25f4601ac997f113b3145aa5cf907e?d=identicon",
                          "self": "https://api.osf.io/v2/users/zfsr2/"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/actions/61b9eae1a7d8ac025c4c46d3/"
                    }
                  }
                },
                "meta": {
                  "total": 2,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/schema_responses/61b9cd62eb66180215222669/actions/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/schema_blocks/": {
      "get": {
        "summary": "Retrieve a list of Registration Schema Blocks for a Schema Response",
        "description": "This returns a list of all the Registration Schema Blocks are contained in Registration Schema.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          }
        ],
        "tags": [
          "Registration Schema Blocks"
        ],
        "operationId": "schema_response_blocks_read",
        "x-response-schema": "Schema Response",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema Block",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema Block."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema Block (`schema-blocks`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema Block.",
                  "properties": {
                    "registration_response_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string is the the block key for the Registration Schema Block's corresponding block on the Schema Response."
                    },
                    "schema_block_group_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string indicates if a block is part of a block group, block groups may contain the different options dropdown menu or a group of inputs and display elements that are validated together."
                    },
                    "block_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.",
                      "enum": [
                        "page-heading",
                        "section-heading",
                        "subsection-heading",
                        "paragraph",
                        "question-label",
                        "short-text-input",
                        "long-text-input",
                        "file-input",
                        "contributors-input",
                        "single-select-input",
                        "multi-select-input",
                        "select-input-option",
                        "select-other-option"
                      ]
                    },
                    "display_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "example_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "required": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents if this field is required for creation of a Schema Response."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Integer beginning at zero that represents the order of Registration Schema Block in the Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action.",
                  "properties": {
                    "schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the schema the the Registration Schema Block is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the  Registration Schema Block.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema Block."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "schema-blocks",
                    "id": "61b79f9eadbb5701424a2d5e",
                    "attributes": {
                      "registration_response_key": null,
                      "schema_block_group_key": "",
                      "block_type": "page-heading",
                      "display_text": "Background and Study Intent",
                      "help_text": "",
                      "required": false,
                      "index": 0
                    },
                    "relationships": {
                      "schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                            "meta": {}
                          },
                          "data": {
                            "id": "6176c9d45e01f100091d4f94",
                            "type": "registration-schemas"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                    }
                  },
                  {
                    "type": "schema-blocks",
                    "id": "61b79f9eadbb5701424a2d53",
                    "attributes": {
                      "registration_response_key": null,
                      "schema_block_group_key": "",
                      "block_type": "question-label",
                      "display_text": "Question 1",
                      "help_text": "I am a question",
                      "required": false,
                      "index": 1
                    },
                    "relationships": {
                      "schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                            "meta": {}
                          },
                          "data": {
                            "id": "6176c9d45e01f100091d4f94",
                            "type": "registration-schemas"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d53/"
                    }
                  },
                  {
                    "type": "schema-blocks",
                    "id": "61b79f9eadbb5701424a2d53",
                    "attributes": {
                      "registration_response_key": "Q1",
                      "schema_block_group_key": "",
                      "block_type": "long-text-input",
                      "display_text": "",
                      "help_text": "",
                      "required": false,
                      "index": 2
                    },
                    "relationships": {
                      "schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                            "meta": {}
                          },
                          "data": {
                            "id": "6176c9d45e01f100091d4f94",
                            "type": "registration-schemas"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d53/"
                    }
                  }
                ],
                "meta": {
                  "total": 3,
                  "per_page": 10,
                  "version": 2.2
                },
                "links": {
                  "self": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/schema_blocks/",
                  "first": null,
                  "last": null,
                  "next": null,
                  "prev": null
                }
              }
            }
          }
        }
      }
    },
    "/schema_responses/{schema_response_id}/schema_blocks/{schema_response_block_id}": {
      "get": {
        "summary": "Retrieve a Registration Schema Block",
        "description": "This returns a Registration Schema Block by it's ID.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Registration Schemas, if the request is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_id",
            "required": true,
            "description": "The unique identifier of the Registration Schema example `6176c9d45e01f100091d4f94`."
          },
          {
            "in": "path",
            "type": "string",
            "name": "schema_response_block_id",
            "required": true,
            "description": "The unique identifier of the Schema Response Block example `61b79f9eadbb5701424a2d5e`."
          }
        ],
        "tags": [
          "Registration Schema Blocks"
        ],
        "operationId": "schema_response_blocks_read",
        "x-response-schema": "Schema Response",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration Schema Block",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Registration Schema Block."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Registration Schema Block (`schema-blocks`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Registration Schema Block.",
                  "properties": {
                    "registration_response_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string is the the block key for the Registration Schema Block's corresponding block on the Schema Response."
                    },
                    "schema_block_group_key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "This string indicates if a block is part of a block group, block groups may contain the different options dropdown menu or a group of inputs and display elements that are validated together."
                    },
                    "block_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A string that represents the type of input that the schema will take and the UI element that appears to the user on the frontend.",
                      "enum": [
                        "page-heading",
                        "section-heading",
                        "subsection-heading",
                        "paragraph",
                        "question-label",
                        "short-text-input",
                        "long-text-input",
                        "file-input",
                        "contributors-input",
                        "single-select-input",
                        "multi-select-input",
                        "select-input-option",
                        "select-other-option"
                      ]
                    },
                    "display_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "example_text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text that will accompany the UI element displayed on this Registration Schema Block."
                    },
                    "required": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Bool that represents if this field is required for creation of a Schema Response."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Integer beginning at zero that represents the order of Registration Schema Block in the Registration Schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the Schema Response Action.",
                  "properties": {
                    "schema": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the schema the the Registration Schema Block is on."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the  Registration Schema Block.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Registration Schema Block."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "type": "schema-blocks",
                  "id": "61b79f9eadbb5701424a2d5e",
                  "attributes": {
                    "registration_response_key": null,
                    "schema_block_group_key": "",
                    "block_type": "page-heading",
                    "display_text": "Background and Study Intent",
                    "help_text": "",
                    "required": false,
                    "index": 0
                  },
                  "relationships": {
                    "schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/6176c9d45e01f100091d4f94/",
                          "meta": {}
                        },
                        "data": {
                          "id": "6176c9d45e01f100091d4f94",
                          "type": "registration-schemas"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/schema_responses/61b79f9eadbb5701424a2d5e/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/": {
      "get": {
        "summary": "List all nodes",
        "description": "\nA paginated list of nodes, representing projects and components, on the OSF.\n\nThe returned nodes are those which are public or which the user has access to view.\n\nThe returned nodes are sorted by their `date_modified`, with the most recently updated nodes appearing first.\n\nRegistrations cannot be accessed through this endpoint (use the [registrations](#tag/Registrations) endpoints instead).\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/?filter[title]=reproducibility.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.",
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=ezcuj",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/ezcuj/",
                      "html": "https://osf.io/ezcuj/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-12-08T21:45:17.058000",
                      "title": "Reproducibility Project: Psychology",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-04-01T15:49:07.702000",
                      "current_user_can_comment": true,
                      "node_license": null,
                      "public": true,
                      "tags": [
                        "replication",
                        "reproducibility",
                        "open science",
                        "reproduction",
                        "psychological science",
                        "psychology",
                        "metascience",
                        "crowdsource"
                      ]
                    },
                    "type": "nodes",
                    "id": "ezcuj"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/nodes/?page=1954",
                  "prev": null,
                  "next": "https://api.osf.io/v2/nodes/?page=2",
                  "meta": {
                    "total": 19536,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a node",
        "description": "Creates a new node.\n\nOn the OSF, nodes are considered **projects** or **components**. The difference between a project and a component is that a project is a top-level node, and a component is a child of a project.\n\nAdditionally, nodes have a `category` field that includes **project** as an option. The categorization determines what icon is displayed with the node on the OSF, and helps with search organization. Projects (top-level nodes) may have a category other than project, and components (children) may have a category of **project**.\n#### Required\nRequired fields for creating a node include:\n\n&nbsp;&nbsp;&nbsp;&nbsp`title`\n\n&nbsp;&nbsp;&nbsp;&nbsp`category`\n\nNote: Nodes default to **private** unless the `public` field is explicitly set to **true** in the request payload.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Node",
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/nodes/{node_id}/": {
      "get": {
        "summary": "Retrieve a node",
        "description": "Retrieves the details of a given node (project or component).\n#### Permissions\nOnly project contributors may retrieve the details of a private node. Attempting to retreive a private node for which you are not a contributor will result in a **403 Forbidden** response.\n\nAuthentication is not required to view the details of a public node, as public nodes give read-only access to everyone.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_read",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "e81xl",
                  "type": "nodes",
                  "attributes": {
                    "category": "project",
                    "fork": false,
                    "preprint": false,
                    "description": "We are conducting a study to investigate the replicability of cancer biology studies. Selected results from a substantial number of high-profile papers in the field of cancer biology published between 2010-2012 are being replicated by the Science Exchange network.",
                    "current_user_permissions": [
                      "read"
                    ],
                    "date_modified": "2017-01-18T20:46:11.076000",
                    "title": "Reproducibility Project: Cancer Biology",
                    "collection": false,
                    "registration": false,
                    "date_created": "2013-10-08T23:31:56.153000",
                    "current_user_can_comment": true,
                    "node_license": null,
                    "public": true,
                    "tags": [
                      "cancer biology",
                      "reproducibility",
                      "replication",
                      "open science"
                    ]
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/nodes/e81xl/",
                    "html": "https://osf.io/e81xl/"
                  },
                  "relationships": {
                    "files": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/files/",
                          "meta": {}
                        }
                      }
                    },
                    "view_only_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/view_only_links/",
                          "meta": {}
                        }
                      }
                    },
                    "citation": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/citation/",
                          "meta": {}
                        }
                      }
                    },
                    "draft_registrations": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/draft_registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "forks": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/forks/",
                          "meta": {}
                        }
                      }
                    },
                    "root": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/",
                          "meta": {}
                        }
                      }
                    },
                    "identifiers": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/identifiers/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/comments/?filter%5Btarget%5D=e81xl",
                          "meta": {}
                        }
                      }
                    },
                    "registrations": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "node_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/node_links/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_nodes": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/relationships/linked_nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/linked_nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "wikis": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/wikis/",
                          "meta": {}
                        }
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/relationships/institutions/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "children": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/children/",
                          "meta": {}
                        }
                      }
                    },
                    "preprints": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/preprints/",
                          "meta": {}
                        }
                      }
                    },
                    "logs": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/e81xl/logs/",
                          "meta": {}
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a node",
        "description": "Updates a node by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nNodes can be updated with either a **PUT** or **PATCH** request. The `title` and `category` fields are mandatory in a **PUT** request, and optional in a **PATCH**.\n#### Permissions\nOnly write contributors may update a node. Attempting to update a node for which you do not have write access will result in a **403 Forbidden** response.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "nodes",
                  "id": "{node_id}",
                  "attributes": {
                    "description": "An updated abstract.",
                    "tags": [
                      "cancer biology",
                      "reproducibility"
                    ],
                    "public": true
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_partial_update",
        "x-response-schema": "Node",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a node",
        "description": "\nPermanently deletes a node. This action cannot be undone.\n#### Permissions\nOnly project administrators may delete a node. Attempting to delete a node for which you are not an administrator will result in a **403 Forbidden** response.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_delete",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/nodes/{node_id}/addons/": {
      "get": {
        "summary": "List all addons",
        "description": "\nA paginated list of addons connected to the given node or project.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of at most 10 addon objects. Each resource in the array is a separate addon object and contains the full representation of the addon, meaning additional requests to a addon's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_addons_list",
        "x-response-schema": "Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon",
                "properties": {
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon entity.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The URL to the third-party service provider."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name of the third-party service provider."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the service provider."
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "documentation",
                            "storage",
                            "bibliography",
                            "other",
                            "security",
                            "citations"
                          ]
                        },
                        "readOnly": true,
                        "description": "List of categories this addon belongs to."
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon entity (`addons`)."
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the addon entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/addons/<provider_id>/"
                    },
                    "attributes": {
                      "folder_path": null,
                      "configured": false,
                      "external_account_id": null,
                      "folder_id": null,
                      "node_has_auth": false
                    },
                    "type": "node_addons",
                    "id": "<provider_id>"
                  },
                  {
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/addons/<another_provider_id>/"
                    },
                    "attributes": {
                      "folder_path": null,
                      "configured": false,
                      "external_account_id": null,
                      "folder_id": null,
                      "node_has_auth": false
                    },
                    "type": "node_addons",
                    "id": "<another_provider_id>"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/addons/{provider}/folders/": {
      "get": {
        "summary": "List all addon folders",
        "description": "\nA paginated list of folders retrieved from the associated third-party (provider) service.\n#### Permissions\nFolders are visible only to the user that authorized the addon.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of addon folder objects. Each resource in the array is a separate addon folder object and contains the full representation of the addon folder, meaning additional requests to a addon folder's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the provider"
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_addons_folders_list",
        "x-response-schema": "Addon Folder",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon",
                "properties": {
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon entity.",
                    "properties": {
                      "url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The URL to the third-party service provider."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name of the third-party service provider."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the service provider."
                      },
                      "categories": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "documentation",
                            "storage",
                            "bibliography",
                            "other",
                            "security",
                            "citations"
                          ]
                        },
                        "readOnly": true,
                        "description": "List of categories this addon belongs to."
                      }
                    }
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon entity (`addons`)."
                  },
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the addon entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "root": "https://api.osf.io/v2/nodes/<node_id>/addons/<provider_id>/folders/",
                      "children": "https://api.osf.io/v2/nodes/<node_id>/addons/<provider_id>/folders/?path=/&id=/"
                    },
                    "attributes": {
                      "path": "/",
                      "kind": "folder",
                      "provider": "<provider_id>",
                      "name": "/ ()",
                      "folder_id": "/"
                    },
                    "type": "node_addon_folders",
                    "id": "/"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 1000
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/addons/{provider}/": {
      "get": {
        "summary": "Retrieve an addon",
        "description": "Retrieve details of an individual addon connected to this node.\n#### Permissions\nNodeSettings that are attached to public nodes will give read-only access to everyone. Private nodes require explicit read permission. Write and admin access are the same for public and private nodes. Administrators on a parent node have implicit read permissions for all child nodes.\nAny users with write or admin access to the node are able to deauthorize an enabled addon, but only the addon authorizer is able to change the configuration (i.e. selected folder) of an already-configured NodeSettings entity.\n#### Returns\nReturns a JSON object with a `data` key containing the details of the requested addon, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the addon."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_addon_read",
        "x-response-schema": "Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Node Addon",
              "required": [
                "id",
                "type"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the node addon entity (`node_addons`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the node addon entity.",
                  "properties": {
                    "external_account_id": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The ID of the associated node addon account, if any."
                    },
                    "folder_id": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The ID of the linked folder from the addon provider."
                    },
                    "folder_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The folder path of the linked folder from the addon provider. Google Drive specific"
                    },
                    "configured": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node has been configured with an addon folder."
                    },
                    "enabled": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node has a NodeSettings object associated with it."
                    },
                    "node_has_auth": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node is fully authorized to use this node addon."
                    },
                    "url": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "An external link specific to the addon provider."
                    },
                    "label": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A label specific to the addon provider."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "self"
                  ],
                  "description": "URLs to alternative representations of the node addon entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for this node addon."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "http://api.osf.io/v2/nodes/gaz5n/addons/box/"
                  },
                  "attributes": {
                    "folder_path": null,
                    "configured": false,
                    "external_account_id": null,
                    "folder_id": null,
                    "node_has_auth": false
                  },
                  "type": "node_addons",
                  "id": "box"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update an addon",
        "description": "Updates a node addon by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nNode addon can be updated with either a **PUT** or **PATCH** request. The `external_account_id`, `enabled`, and `folder_id` fields are mandatory in a **PUT**, and optional in **PATCH**. Non-string values will be accepted and stringified, however we make no promises about the stringification output.\n\nTo delete or deauthorize a node addon, issue a **PUT** with all fields set to `null` or `False`, or a **PATCH** with enabled set `False`.\n#### Permissions\nNodeSettings that are attached to public nodes will give read-only access to everyone. Private nodes require explicit read permission. Write and admin access are the same for public and private nodes. Administrators on a parent node have implicit read permissions for all child nodes.\nAny users with write or admin access to the node are able to deauthorize an enabled addon, but only the addon authorizer is able to change the configuration (i.e. selected folder) of an already-configured NodeSettings entity.\n\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated node addon, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the addon."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "node_addons",
                  "id": "{provider}",
                  "attributes": {
                    "external_account_id": "{account_id}",
                    "folder_id": "{folder_id}",
                    "folder_path": "{folder_path}",
                    "url": "{url}",
                    "label": "{label}"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_node_addon_update",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/nodes/{node_id}/children/": {
      "get": {
        "summary": "List all child nodes",
        "description": "\nA paginated list of the next level child nodes for the given node. The returned nodes are sorted by their `date_modified`, with the most recently updated child nodes appearing first.\n\nThe list will include child nodes that are public, as well as child nodes that are private, if the authenticated user has permission to view them.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 child nodes. If the given node has zero child nodes, the `data` key will contain an empty array. Each resource in the array is a separate node object and contains the full representation of the child node, meaning additional requests to the child node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/children/?filter[title]=reproducibility.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_children_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/comments/?filter%5Btarget%5D=ezum7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezum7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/ezum7/",
                      "html": "https://osf.io/ezum7/"
                    },
                    "attributes": {
                      "category": "communication",
                      "fork": false,
                      "preprint": true,
                      "description": "Reproducibility is a defining feature of science, but the extent to which it characterizes current research is unknown. We conducted replications of 100 experimental and correlational studies published in three psychology journals using high-powered designs and original materials when available. Replication effects were half the magnitude of original effects, representing a substantial decline. Ninety-seven percent of original studies had statistically significant results. Thirty-six percent of replications had statistically significant results; 47% of original effect sizes were in the 95% confidence interval of the replication effect size; 39% of effects were subjectively rated to have replicated the original result; and if no bias in original results is assumed, combining original and replication results left 68% with statistically significant effects. Correlational tests suggest that replication success was better predicted by the strength of original evidence than by characteristics of the original and replication teams.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-11-02T21:25:12.572000",
                      "title": "Estimating the Reproducibility of Psychological Science",
                      "collection": false,
                      "registration": false,
                      "date_created": "2015-07-20T17:42:16.496000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": [
                        "replication",
                        "reproducibility",
                        "effect size"
                      ]
                    },
                    "type": "nodes",
                    "id": "ezum7"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/nodes/ezcuj/children/?page=5",
                  "prev": null,
                  "next": "https://api.osf.io/v2/nodes/ezcuj/children/?page=2",
                  "meta": {
                    "total": 49,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a child node",
        "description": "Creates a new child node.\n\nNote: Creating a child node via this endpoint will function the same as creating a node via the node list endpoint, but the child node will have the given node set as its parent.\n#### Permissions\nOnly write contributors may create children nodes.\n#### Required\nRequired fields for creating a node include:\n\n&nbsp;&nbsp;&nbsp;&nbsp`title`\n\n&nbsp;&nbsp;&nbsp;&nbsp`category`\n\nNote: nodes default to **private** unless the `public` field is explicitly set to **true** in the request payload.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created node, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_children_create",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/nodes/{node_id}/citation/": {
      "get": {
        "summary": "Retrieve citation details",
        "description": "The citation details for a node, in CSL format.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the node citation.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_citation_list",
        "x-response-schema": "Citation Detail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Citation Detail",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the entity being cited."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation entity.",
                  "properties": {
                    "author": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The DOI for the entity being cited, if one exists."
                    },
                    "publisher": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the entity being cited."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the entity that is being cited."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "bg4di",
                  "type": "node-citation",
                  "attributes": {
                    "publisher": "Open Science Framework",
                    "author": [
                      {
                        "given": "Timothy M",
                        "family": "Errington"
                      },
                      {
                        "given": "Nicole",
                        "family": "Vasilevsky"
                      },
                      {
                        "given": "Melissa A",
                        "family": "Haendel"
                      }
                    ],
                    "type": "webpage",
                    "title": "Identification Analysis of RP:CB"
                  },
                  "links": {
                    "self": "osf.io/bg4di"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/citation/{style_id}/": {
      "get": {
        "summary": "Retrieve a styled citation",
        "description": "The citation for a node in a specific style.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the node citation, in the requested style.",
        "parameters": [
          {
            "description": "The unique identifier of the citation style.",
            "required": true,
            "type": "string",
            "name": "style_id",
            "in": "path"
          },
          {
            "description": "The unique identifier of the node.",
            "required": true,
            "type": "string",
            "name": "node_id",
            "in": "path"
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_citation_read",
        "x-response-schema": "Styled Citation",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Styled Citation",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the citation style, e.g. APA."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation style entity (`styled-citations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation style entity.",
                  "properties": {
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The complete entity citation in the requested style."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {},
                  "attributes": {
                    "citation": "Aarts, A. A., Anderson, C. J., Anderson, J., van Assen, M. A. L. M., Attridge, P. R., Attwood, A. S., … Grange, J. (2016, December 8). Reproducibility Project: Psychology. Retrieved from osf.io/ezcuj"
                  },
                  "type": "styled-citations",
                  "id": "apa"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/comments/": {
      "get": {
        "summary": "List all comments",
        "description": "\nA paginated list of comments related to a given node.\n\nThe returned comments are sorted by their creation date, with the most recent comments appearing first.\n#### Permissions\nComments on public nodes are given read-only access to everyone.\n\nIf the node comment-level is `private`, only contributors have permission to comment.\n\nIf the comment-level is `public`, any logged-in OSF user can comment.\n\nComments on private nodes are only visible to contributors and administrators on the parent node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include comments that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/comments/?filter[target_id]=jg7sezmdnt93\n\nNodes may be filtered by their `deleted`, `target_id`, `date_created`, `date_modified`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public and preprint are boolean fields, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting `true` or `false` in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_comments_list",
        "x-response-schema": "Comment",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Comment",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the comment entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the comment entity (`comments`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the comment entity.",
                    "properties": {
                      "can_edit": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to edit this comment"
                      },
                      "content": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The content of the comment."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                      },
                      "modified": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has been edited."
                      },
                      "deleted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is deleted."
                      },
                      "is_abuse": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is flagged or confirmed spam."
                      },
                      "is_ham": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not an admin checked the legitimacy of this comment."
                      },
                      "has_report": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment the current user reported this as spam."
                      },
                      "has_children": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has replies."
                      },
                      "page": {
                        "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the node the comment is on."
                      },
                      "replies": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the replies to the comment."
                      },
                      "target": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the target of the comment."
                      },
                      "reports": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the reports connected to the comment."
                      },
                      "user": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the user who created the comment."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the comment entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the comment."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "comments",
                    "attributes": {
                      "content": "comment content"
                    },
                    "relationships": {
                      "target": {
                        "data": {
                          "type": "{target_type}",
                          "id": "{target_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=jg7sezmdnt93",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/jg7sezmdnt93/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/jg7sezmdnt93/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:44.123000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": false,
                      "content": "We have published a Bayesian reanalysis of this project at PLOS ONE: http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0149794\n\nI explain some of the context on my blog: http://alexanderetz.com/2016/02/26/the-bayesian-rpp-take-2/\n\nPlease note that the analysis we use in this paper is very different from the analysis used in the blog I posted in the previous comment, so the results are different as well.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2016-02-27T13:50:24.240000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "jg7sezmdnt93"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=23pk9",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/23pk9/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/23pk9/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:37.437000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": null,
                      "content": "In this blog http://wp.me/p4sgtg-o6 I conduct a Bayesian Re-analysis of the Reproducibility Project that gives a graded measure of replication success. In an attempt to avoid dichotomous success/fail replication outcomes, I calculate a continous outcome (Bayes factor) that answers the question, does the replication result fit more with the original reported effect or a null effect? Many replications are strong successes, many are strong failures, and there are many that lie somewhere in between.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2015-08-30T14:50:21.093000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "23pk9"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a comment",
        "description": "Create a comment on a given node overview page or a reply to a comment on that node.\n\nTo create a comment on the node overview page, the target `type` would be \"nodes\" and the target `id` would be the node `id`.\n\nTo reply to a comment on this node, the target `type` would be \"comments\" and the target `id` would be the `id` of the comment to reply to.\n#### Required\nA relationship object with a `data` key, containing the target (`comments` or `nodes`) type and a target `id` is required.\nIn addition, the `content` attribute describing the relationship between the node and the comment is required.\n#### Returns\nReturns a JSON object with a data key containing the representation of the new comment, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "node_id",
            "description": "The unique identifier of the node you want to comment on."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Comment",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the comment entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the comment entity (`comments`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the comment entity.",
                  "properties": {
                    "can_edit": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to edit this comment"
                    },
                    "content": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The content of the comment."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                    },
                    "modified": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has been edited."
                    },
                    "deleted": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is deleted."
                    },
                    "is_abuse": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment is flagged or confirmed spam."
                    },
                    "is_ham": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not an admin checked the legitimacy of this comment."
                    },
                    "has_report": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment the current user reported this as spam."
                    },
                    "has_children": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the comment has replies."
                    },
                    "page": {
                      "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                      "readOnly": true,
                      "type": "string"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the node the comment is on."
                    },
                    "replies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the replies to the comment."
                    },
                    "target": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the target of the comment."
                    },
                    "reports": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the reports connected to the comment."
                    },
                    "user": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the user who created the comment."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the comment entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the comment."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "comments",
                  "attributes": {
                    "content": "comment content"
                  },
                  "relationships": {
                    "target": {
                      "data": {
                        "type": "{target_type}",
                        "id": "{target_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_comment_create",
        "x-response-schema": "Comment",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/nodes/{node_id}/contributors/": {
      "get": {
        "summary": "List all contributors",
        "description": "A paginated list of the node's contributors, sorted by their index.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/y9jdt/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_list",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "guid0"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/y9jdt/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/typ46/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/y9jdt/contributors/typ46/"
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/typ46/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "self": {
                                  "href": "https://api.osf.io/v2/users/typ46/relationships/institutions/",
                                  "meta": {}
                                },
                                "related": {
                                  "href": "https://api.osf.io/v2/users/typ46/institutions/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "self": "https://api.osf.io/v2/users/typ46/",
                            "html": "https://osf.io/typ46/",
                            "profile_image": "https://secure.gravatar.com/avatar/3dd8757ba100b8406413706886243811?d=identicon"
                          },
                          "attributes": {
                            "family_name": "Geiger",
                            "suffix": "",
                            "locale": "en_us",
                            "date_registered": "2014-03-18T19:11:57.252000",
                            "middle_names": "J.",
                            "given_name": "Brian",
                            "full_name": "Brian J. Geiger",
                            "active": true,
                            "timezone": "America/New_York"
                          },
                          "type": "users",
                          "id": "typ46"
                        }
                      }
                    },
                    "attributes": {
                      "index": 0,
                      "unregistered_contributor": null,
                      "bibliographic": true,
                      "permission": "admin"
                    },
                    "type": "contributors",
                    "id": "y9jdt-typ46"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 9,
                    "per_page": 10,
                    "total_bibliographic": 1
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a contributor",
        "description": "Adds a contributor to a node, effectively creating a relationship between the node and a user.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\" contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n#### Permissions\nOnly project administrators can add contributors to a node.\n#### Required\nA relationship object with a `data` key, containing the `users` type and valid user ID is required.\n\nAll attributes describing the relationship between the node and the user are optional.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the new contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Contributor",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the contributor entity (`contributors`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the contributor entity.",
                  "properties": {
                    "bibliographic": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The position of this contributor in the list of project contributors and in project citations."
                    },
                    "permission": {
                      "type": "string",
                      "enum": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "readOnly": false,
                      "description": "The permission level of the contributor. The default value is 'write'."
                    },
                    "unregistered_contributor": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                  "required": [
                    "node",
                    "user"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the contributor entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for the contributor."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "contributors",
                  "attributes": {},
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "guid0"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_create",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/nodes/{node_id}/contributors/{user_id}/": {
      "get": {
        "summary": "Retrieve a contributor",
        "description": "Retrieves the details of a given contributor.\n\nContributors are users who can make changes to the node or, in the case of private nodes, have read access to the node.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_read",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "guid0"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/y9jdt/",
                          "meta": {}
                        }
                      }
                    },
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/typ46/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/nodes/y9jdt/contributors/typ46/"
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/typ46/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "self": {
                                "href": "https://api.osf.io/v2/users/typ46/relationships/institutions/",
                                "meta": {}
                              },
                              "related": {
                                "href": "https://api.osf.io/v2/users/typ46/institutions/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "self": "https://api.osf.io/v2/users/typ46/",
                          "html": "https://osf.io/typ46/",
                          "profile_image": "https://secure.gravatar.com/avatar/3dd8757ba100b8406413706886243811?d=identicon"
                        },
                        "attributes": {
                          "family_name": "Geiger",
                          "suffix": "",
                          "locale": "en_us",
                          "date_registered": "2014-03-18T19:11:57.252000",
                          "middle_names": "J.",
                          "given_name": "Brian",
                          "full_name": "Brian J. Geiger",
                          "active": true,
                          "timezone": "America/New_York"
                        },
                        "type": "users",
                        "id": "typ46"
                      }
                    }
                  },
                  "attributes": {
                    "index": 0,
                    "unregistered_contributor": null,
                    "bibliographic": true,
                    "permission": "admin"
                  },
                  "type": "contributors",
                  "id": "y9jdt-typ46"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a contributor",
        "description": "Updates a contributor by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nContributors can be updated with either a **PUT** or **PATCH** request. Since this endpoint has no mandatory attributes, PUT and PATCH are functionally the same.\n#### Permissions\nOnly project administrators can update the contributors on a node.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nIf the given user is not already in the contributor list, a 404 Not Found error will be returned. A node must always have at least one admin, and any attempt to downgrade the permissions of a sole admin will result in a 400 Bad Request error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Contributor",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the contributor entity (`contributors`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the contributor entity.",
                  "properties": {
                    "bibliographic": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The position of this contributor in the list of project contributors and in project citations."
                    },
                    "permission": {
                      "type": "string",
                      "enum": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "readOnly": false,
                      "description": "The permission level of the contributor. The default value is 'write'."
                    },
                    "unregistered_contributor": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                  "required": [
                    "node",
                    "user"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the contributor entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for the contributor."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "contributors",
                  "attributes": {},
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "guid0"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_partial_update",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a contributor",
        "description": "Removes a contributor from a node. This request only removes the relationship between the node and the user, it does not delete the user itself.\n\nA node must always have at least one admin, and attempting to remove the only admin from a node will result in a **400 Bad Request** response.\n#### Permissions\nA user can remove themselves as a node contributor. Otherwise, only project administrators can remove contributors.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_contributors_delete",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/nodes/{node_id}/draft_registrations/": {
      "get": {
        "summary": "List all draft registrations",
        "description": "A paginated list of all of the draft registrations of a given node.\n\nDraft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it's metadata edited.\n\nYour original project remains editable but will now have the draft registration linked to it.\n#### Permissions\nOnly project administrators may view draft registrations.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 draft registrations. Each resource in the array is a separate draft registration object and contains the full representation of the draft registration, meaning additional requests to a draft registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_list",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Draft Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the draft registration entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the Draft Registration entity.",
                    "properties": {
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the Draft Registration."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the Draft Registration."
                      },
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The category of the Draft Registration."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "The searchable tags of the Draft Registration."
                      },
                      "node_license": {
                        "type": "object",
                        "title": "Node License",
                        "properties": {
                          "copyright_holders": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of names of copyright holders for the license.",
                            "items": {
                              "type": "string",
                              "readOnly": true,
                              "description": "A copyright holders for the license."
                            }
                          },
                          "year": {
                            "type": "integer",
                            "readOnly": false,
                            "description": "The year the copyright was made."
                          }
                        }
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "The current users permission level for the Draft Registration."
                      },
                      "has_project": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This indicates whether a Draft Registration was branched from a project."
                      },
                      "datetime_initiated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                      },
                      "datetime_updated": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                      },
                      "registration_metadata": {
                        "type": "object",
                        "readOnly": false,
                        "description": "This is a legacy format for `registration_responses`."
                      },
                      "registration_responses": {
                        "type": "object",
                        "readOnly": false,
                        "description": "A dictionary of question IDs and responses from the registration schema."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                    "properties": {
                      "branched_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this draft registration was created from."
                      },
                      "initiator": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user who initiated the draft registration."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the detailed registration schema that this draft conforms to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "required": [
                      "html"
                    ],
                    "description": "URLs to alternative representations of the draft registration entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the draft registration's page on the OSF."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "draft_registrations",
                    "relationships": {
                      "registration_schema": {
                        "data": {
                          "id": "61e02b6c90de34000ae3447a",
                          "type": "registration_schemas"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "62716076d90ebe0017f2bf42",
                    "type": "draft_registrations",
                    "attributes": {
                      "registration_metadata": {},
                      "registration_responses": {},
                      "datetime_initiated": "2022-05-03T17:03:50.288542",
                      "datetime_updated": "2022-05-03T17:03:50.560153",
                      "title": "Untitled",
                      "description": "",
                      "category": "",
                      "tags": [],
                      "node_license": null
                    },
                    "relationships": {
                      "initiator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/fgvc6/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "fgvc6",
                          "type": "users"
                        }
                      },
                      "branched_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/nmj5w/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/61e02b6c90de34000ae3447a/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "61e02b6c90de34000ae3447a",
                          "type": "registration-schemas"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/registrations/osf/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "osf",
                          "type": "registration-providers"
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/institutions/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/relationships/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/"
                    }
                  }
                ],
                "links": {
                  "first": "",
                  "last": "",
                  "prev": "",
                  "next": "",
                  "meta": {
                    "total": "",
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a draft registration based on your current project Node.",
        "description": "Initiate a draft registration of the current node.\nDraft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it's metadata edited.\n\nYour original project remains editable but will now have the draft registration linked to it.\n#### Permissions\nOnly project administrators may view create registrations.\n#### Required\nRequired fields for creating a draft registration include:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`schema_id`\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Draft Registration entity.",
                  "properties": {
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the Draft Registration."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the Draft Registration."
                    },
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The category of the Draft Registration."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "The searchable tags of the Draft Registration."
                    },
                    "node_license": {
                      "type": "object",
                      "title": "Node License",
                      "properties": {
                        "copyright_holders": {
                          "type": "array",
                          "readOnly": false,
                          "description": "A list of names of copyright holders for the license.",
                          "items": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A copyright holders for the license."
                          }
                        },
                        "year": {
                          "type": "integer",
                          "readOnly": false,
                          "description": "The year the copyright was made."
                        }
                      }
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "The current users permission level for the Draft Registration."
                    },
                    "has_project": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "This indicates whether a Draft Registration was branched from a project."
                    },
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "object",
                      "readOnly": false,
                      "description": "This is a legacy format for `registration_responses`."
                    },
                    "registration_responses": {
                      "type": "object",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "relationships": {
                    "registration_schema": {
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration_schemas"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_create",
        "x-response-schema": "Draft Registration",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/nodes/{node_id}/draft_registrations/{draft_id}/": {
      "get": {
        "summary": "Retrieve a Draft Registration",
        "description": "Retrieve the details of a given draft registration.\nDraft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it's metadata edited.\n\nYour original project remains editable but will now have the draft registration linked to it.\n#### Permissions\nOnly project administrators may view draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "nodes_draft_registrations_read",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Draft Registration entity.",
                  "properties": {
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the Draft Registration."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the Draft Registration."
                    },
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The category of the Draft Registration."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "The searchable tags of the Draft Registration."
                    },
                    "node_license": {
                      "type": "object",
                      "title": "Node License",
                      "properties": {
                        "copyright_holders": {
                          "type": "array",
                          "readOnly": false,
                          "description": "A list of names of copyright holders for the license.",
                          "items": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A copyright holders for the license."
                          }
                        },
                        "year": {
                          "type": "integer",
                          "readOnly": false,
                          "description": "The year the copyright was made."
                        }
                      }
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "The current users permission level for the Draft Registration."
                    },
                    "has_project": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "This indicates whether a Draft Registration was branched from a project."
                    },
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "object",
                      "readOnly": false,
                      "description": "This is a legacy format for `registration_responses`."
                    },
                    "registration_responses": {
                      "type": "object",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "relationships": {
                    "registration_schema": {
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration_schemas"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "",
                    "type": "draft_registrations",
                    "attributes": {
                      "datetime_initiated": "",
                      "datetime_updated": "",
                      "registration_metadata": {},
                      "registration_supplement": ""
                    },
                    "relationships": {
                      "branched_from": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      },
                      "initiator": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "html": ""
                    }
                  }
                ],
                "links": {
                  "first": "",
                  "last": "",
                  "prev": "",
                  "next": "",
                  "meta": {
                    "total": "",
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a draft registration",
        "description": "Updates a draft registration by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged.\n\nDraft Registrations contain Registration questions that will become part of the Registration. Answer the questions in the draft registration supplement by sending update requests until you are ready to submit the draft.\n\nThe registration supplement of a draft registration cannot be updated after the draft has been created.\n\nWhen updating a draft registration, `registration_metadata` is required. It must be a dictionary with keys as question ids in the registration form, and values as nested dictionaries matching the specific format in the [registration schema](TODO: link me pls).\n\nIf a question is multiple-choice, the question response must exactly match one of the possible choices.\n#### Permissions\nOnly project administrators may update draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Draft Registration entity.",
                  "properties": {
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the Draft Registration."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the Draft Registration."
                    },
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The category of the Draft Registration."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "The searchable tags of the Draft Registration."
                    },
                    "node_license": {
                      "type": "object",
                      "title": "Node License",
                      "properties": {
                        "copyright_holders": {
                          "type": "array",
                          "readOnly": false,
                          "description": "A list of names of copyright holders for the license.",
                          "items": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A copyright holders for the license."
                          }
                        },
                        "year": {
                          "type": "integer",
                          "readOnly": false,
                          "description": "The year the copyright was made."
                        }
                      }
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "The current users permission level for the Draft Registration."
                    },
                    "has_project": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "This indicates whether a Draft Registration was branched from a project."
                    },
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "object",
                      "readOnly": false,
                      "description": "This is a legacy format for `registration_responses`."
                    },
                    "registration_responses": {
                      "type": "object",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "relationships": {
                    "registration_schema": {
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration_schemas"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_partial_update",
        "x-response-schema": "Draft Registration",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft registration",
        "description": "Permanently deletes a draft registration. A draft that has already been registered cannot be deleted.\n#### Permissions\nOnly project administrators may delete draft registrations.\n#### Returns\nIf the request is successful, no content is returned.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_draft_registrations_delete",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/nodes/{node_id}/files/": {
      "get": {
        "summary": "List all storage providers",
        "description": "List of all storage providers that are configured for this node\n\nUsers of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.\n\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nNote: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_providers_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "storage_addons": "https://api.osf.io/v2/addons/?filter%5Bcategories%5D=storage",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/",
                      "new_folder": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/?kind=folder"
                    },
                    "attributes": {
                      "node": "ezcuj",
                      "path": "/",
                      "kind": "folder",
                      "name": "osfstorage",
                      "provider": "osfstorage"
                    },
                    "type": "files",
                    "id": "ezcuj:osfstorage"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/files/providers/{provider}/": {
      "get": {
        "summary": "Retrieve a storage provider",
        "description": "Retrieves the details of a storage provider enabled on this node.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the storage provider."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_providers_read",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "File",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the file entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the file entity (`files`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the file entity.",
                  "properties": {
                    "extra": {
                      "type": "object",
                      "readOnly": true,
                      "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The kind of files object it is (`file` or `folder`)."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Name of the file"
                    },
                    "last_touched": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Unix-style path to the file relative to the provider root."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                    },
                    "current_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Version number of the file."
                    },
                    "delete_allowed": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not deletion of the file is allowed."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The id of the file provider (e.g., `osfstorage`)"
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique identifier for this file entity for this project and storage provider."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user is allowed to post comments."
                    },
                    "guid": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                    },
                    "checkout": {
                      "type": "string",
                      "readOnly": true,
                      "description": "SOON TO BE DEPRECATED, see relationships checkout."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe this file, as entered by project contributors."
                    },
                    "size": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Size of the file in bytes."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "checkout": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user who checked out the file."
                    },
                    "comments": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the comments on the file."
                    },
                    "versions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the versions of the file."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the file entity.",
                  "properties": {
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the page to view a file's information or a folder's contents."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the file."
                    },
                    "move": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file moves."
                    },
                    "new_folder": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                    },
                    "upload": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file uploads."
                    },
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file downloads."
                    },
                    "delete": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file deletions."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "storage_addons": "https://api.osf.io/v2/addons/?filter%5Bcategories%5D=storage",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/",
                      "new_folder": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/?kind=folder"
                    },
                    "attributes": {
                      "node": "ezcuj",
                      "path": "/",
                      "kind": "folder",
                      "name": "osfstorage",
                      "provider": "osfstorage"
                    },
                    "type": "files",
                    "id": "ezcuj:osfstorage"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/files/{provider}/": {
      "get": {
        "summary": "List all node files",
        "description": "List of all the files/folders that are attached to your project for a given storage provider.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include files that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/?filter[kind]=file\n\nNode files may be filtered by `id`, `name`, `node`, `kind`, `path`, `provider`, `size`, and `last_touched`.\n\n### Waterbutler API actions\n\nFiles can be modified through the Waterbutler API routes found in `links` (`new_folder`, `move`, `upload`, `download`, and `delete`).\n\n#### Download (files)\n\nTo download a file, issue a GET request against the download link. The response will have the Content-Disposition header set, which will will trigger a download in a browser.\n\n#### Create Subfolder (folders)\n\nYou can create a subfolder of an existing folder by issuing a PUT request against the new_folder link. The ?kind=folder portion of the query parameter is already included in the new_folder link. The name of the new subfolder should be provided in the name query parameter. The response will contain a WaterButler folder entity. If a folder with that name already exists in the parent directory, the server will return a 409 Conflict error response.\n\n#### Upload New File (folders)\n\nTo upload a file to a folder, issue a PUT request to the folder's upload link with the raw file data in the request body, and the kind and name query parameters set to 'file' and the desired name of the file. The response will contain a WaterButler file entity that describes the new file. If a file with the same name already exists in the folder, the server will return a 409 Conflict error response.\n\n#### Update Existing File (file)\n\nTo update an existing file, issue a PUT request to the file's upload link with the raw file data in the request body and the kind query parameter set to \"file\". The update action will create a new version of the file. The response will contain a WaterButler file entity that describes the updated file.\n\n#### Rename (files, folders)\n\nTo rename a file or folder, issue a POST request to the move link with the action body parameter set to \"rename\" and the rename body parameter set to the desired name. The response will contain either a folder entity or file entity with the new name.\n\n#### Move & Copy (files, folders)\n\nMove and copy actions both use the same request structure, a POST to the move url, but with different values for the action body parameters. The path parameter is also required and should be the OSF path attribute of the folder being written to. The rename and conflict parameters are optional. If you wish to change the name of the file or folder at its destination, set the rename parameter to the new name. The conflict param governs how name clashes are resolved. Possible values are replace and keep. replace is the default and will overwrite the file that already exists in the target folder. keep will attempt to keep both by adding a suffix to the new file's name until it no longer conflicts. The suffix will be ' (x)' where x is a increasing integer starting from 1. This behavior is intended to mimic that of the OS X Finder. The response will contain either a folder entity or file entity with the new name.\nFiles and folders can also be moved between nodes and providers. The resource parameter is the id of the node under which the file/folder should be moved. It must agree with the path parameter, that is the path must identify a valid folder under the node identified by resource. Likewise, the provider parameter may be used to move the file/folder to another storage provider, but both the resource and path parameters must belong to a node and folder already extant on that provider. Both resource and provider default to the current node and providers.\nIf a moved/copied file is overwriting an existing file, a 200 OK response will be returned. Otherwise, a 201 Created will be returned.\n\n#### Delete (file, folders)\n\nTo delete a file or folder send a DELETE request to the delete link. Nothing will be returned in the response body.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the storage provider."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_files_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                            "meta": {}
                          }
                        }
                      },
                      "versions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                    },
                    "attributes": {
                      "extra": {
                        "hashes": {
                          "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                          "md5": "44325d4f13b09f3769ede09d7c20a82c"
                        },
                        "downloads": 447
                      },
                      "kind": "file",
                      "name": "OSC2012.pdf",
                      "last_touched": "2015-09-18T01:11:16.328000",
                      "materialized_path": "/OSC2012.pdf",
                      "date_modified": "2014-10-17T19:24:12.264Z",
                      "current_version": 1,
                      "delete_allowed": true,
                      "date_created": "2014-10-17T19:24:12.264Z",
                      "provider": "osfstorage",
                      "path": "/553e69248c5e4a219919ea54",
                      "current_user_can_comment": true,
                      "guid": "sejcv",
                      "checkout": null,
                      "tags": [],
                      "size": 216945
                    },
                    "type": "files",
                    "id": "553e69248c5e4a219919ea54"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/files/{provider}/{path}/": {
      "get": {
        "summary": "Retrieve a file",
        "description": "Retrieves the details of a file attached to given node (project or component) for the given storage provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the storage provider."
          },
          {
            "in": "path",
            "type": "string",
            "name": "path",
            "required": true,
            "description": "The unique identifier of the file path."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_files_read",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "File",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the file entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the file entity (`files`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the file entity.",
                  "properties": {
                    "extra": {
                      "type": "object",
                      "readOnly": true,
                      "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The kind of files object it is (`file` or `folder`)."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Name of the file"
                    },
                    "last_touched": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Unix-style path to the file relative to the provider root."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                    },
                    "current_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Version number of the file."
                    },
                    "delete_allowed": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not deletion of the file is allowed."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The id of the file provider (e.g., `osfstorage`)"
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique identifier for this file entity for this project and storage provider."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user is allowed to post comments."
                    },
                    "guid": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                    },
                    "checkout": {
                      "type": "string",
                      "readOnly": true,
                      "description": "SOON TO BE DEPRECATED, see relationships checkout."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe this file, as entered by project contributors."
                    },
                    "size": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Size of the file in bytes."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "checkout": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user who checked out the file."
                    },
                    "comments": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the comments on the file."
                    },
                    "versions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the versions of the file."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the file entity.",
                  "properties": {
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the page to view a file's information or a folder's contents."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the file."
                    },
                    "move": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file moves."
                    },
                    "new_folder": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                    },
                    "upload": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file uploads."
                    },
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file downloads."
                    },
                    "delete": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file deletions."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                          "meta": {}
                        }
                      }
                    },
                    "versions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                  },
                  "attributes": {
                    "extra": {
                      "hashes": {
                        "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                        "md5": "44325d4f13b09f3769ede09d7c20a82c"
                      },
                      "downloads": 447
                    },
                    "kind": "file",
                    "name": "OSC2012.pdf",
                    "last_touched": "2015-09-18T01:11:16.328000",
                    "materialized_path": "/OSC2012.pdf",
                    "date_modified": "2014-10-17T19:24:12.264Z",
                    "current_version": 1,
                    "delete_allowed": true,
                    "date_created": "2014-10-17T19:24:12.264Z",
                    "provider": "osfstorage",
                    "path": "/553e69248c5e4a219919ea54",
                    "current_user_can_comment": true,
                    "guid": "sejcv",
                    "checkout": null,
                    "tags": [],
                    "size": 216945
                  },
                  "type": "files",
                  "id": "553e69248c5e4a219919ea54"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/identifiers/": {
      "get": {
        "summary": "Retrieve Identifiers for a Node",
        "description": "Retrieve a list of all identifiers (such as DOIs or ARKs) associated with the specified node.\nIdentifiers are unique strings that reference the node in external systems. These can include persistent identifiers such as DOIs (Digital Object Identifiers) or ARKs (Archival Resource Keys).\n#### Response Structure\nThe response returns a JSON object containing the following top-level keys:\n\n - `data`: An array of identifier resources.\n - `links`: Pagination links (if applicable).\n\nEach item in the `data` array is a distinct identifier object, containing details such as the identifier `category` (e.g., `doi`, `ark`), its `value`, and links to the associated node.\n#### Filtering\nYou may filter the returned identifiers by category using the `filter[category]` query parameter.\n**Example:**\nSupported filter categories include:\n  - `doi` - Digital Object Identifier\n  - `ark` - Archival Resource Key\n\n#### Permissions\n\n - This endpoint is public for nodes that are public.\n - Authentication is required to access identifiers on private nodes, and the authenticated user must have read access.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node for which you want to retrieve associated identifiers."
          }
        ],
        "tags": [
          "Nodes",
          "Identifiers"
        ],
        "operationId": "nodes_identifiers_list",
        "x-response-schema": "Identifier",
        "responses": {
          "200": {
            "description": "Successful retrieval of identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Identifier",
                "description": "Representation of an identifier entity within the OSF API.",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Unique identifier for the identifier entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Resource type, always `identifiers` for identifier entities."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "Attributes of the identifier entity, including category and value.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "enum": [
                          "doi"
                        ],
                        "readOnly": true,
                        "description": "The category of the identifier, such as ARK or DOI."
                      },
                      "value": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The actual value of the identifier."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Relationships to other entities, indicating the node this identifier refers to.",
                    "properties": {
                      "referent": {
                        "type": "object",
                        "description": "Relationship object linking to the node associated with this identifier.",
                        "properties": {
                          "links": {
                            "type": "object",
                            "properties": {
                              "related": {
                                "type": "string",
                                "format": "url",
                                "description": "URL to the related node."
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to representations of the identifier entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "url",
                        "readOnly": true,
                        "description": "URL to the detail page for this identifier."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "57f1641db83f6901ed94b459",
                    "type": "identifiers",
                    "attributes": {
                      "category": "doi",
                      "value": "10.17605/OSF.IO/73PND"
                    },
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b459/"
                    }
                  },
                  {
                    "id": "57f1641db83f6901ed94b45a",
                    "type": "identifiers",
                    "attributes": {
                      "category": "ark",
                      "value": "c7605/osf.io/73pnd"
                    },
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b45a/"
                    }
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Mint a New Identifier for a Node",
        "description": "Mint (create) a new identifier for the specified node. \nCurrently, the OSF supports minting **DOI** identifiers through this endpoint. Once created, identifiers are permanent and cannot be modified or deleted.\n#### Supported Identifier Categories\n\n - `doi`: Digital Object Identifier.\n\n#### Requirements\n\n - You must have **Admin** or **Write** permissions on the node.\n - The node must be **public** and must **not** be a collection or folder.\n - Only nodes representing individual projects or components are eligible for DOI creation.\n\n#### Example Request Payload\n\n```json\n{\n  \"data\": {\n    \"type\": \"identifiers\",\n    \"attributes\": {\n      \"category\": \"doi\"\n    }\n  }\n}\n```\n\n#### Permissions\n - Only authenticated users with the required permissions can mint new identifiers.\n - This endpoint is does not authenticate for nodes that are private or not publicly available.",
        "operationId": "nodes_identifiers_create",
        "tags": [
          "Nodes",
          "Identifiers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the node for which you want to create an identifier."
          }
        ],
        "responses": {
          "201": {
            "description": "Identifier successfully created.",
            "schema": {
              "type": "object",
              "title": "Identifier",
              "description": "Representation of an identifier entity within the OSF API.",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Unique identifier for the identifier entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Resource type, always `identifiers` for identifier entities."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "Attributes of the identifier entity, including category and value.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "enum": [
                        "doi"
                      ],
                      "readOnly": true,
                      "description": "The category of the identifier, such as ARK or DOI."
                    },
                    "value": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The actual value of the identifier."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Relationships to other entities, indicating the node this identifier refers to.",
                  "properties": {
                    "referent": {
                      "type": "object",
                      "description": "Relationship object linking to the node associated with this identifier.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "url",
                              "description": "URL to the related node."
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to representations of the identifier entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "url",
                      "readOnly": true,
                      "description": "URL to the detail page for this identifier."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "57f1641db83f6901ed94b459",
                  "type": "identifiers",
                  "attributes": {
                    "category": "doi",
                    "value": "10.17605/OSF.IO/73PND"
                  },
                  "relationships": {
                    "referent": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/73pnd/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b459/"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possible reasons include:\n - The node already has a DOI identifier.\n - The requested identifier category is not supported (only `doi` is allowed).\n - The node is not eligible for DOI creation (e.g., it's a folder or collection)."
          },
          "403": {
            "description": "Forbidden. You do not have permission to create identifiers on this node. This may occur if:\n - The node is private.\n - You do not have Admin or Write access to the node."
          },
          "404": {
            "description": "Node not found. Verify the node ID is correct and that you have permission to view the node."
          }
        }
      }
    },
    "/nodes/{node_id}/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "List of all institutions affiliated with this node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 affilited institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      },
                      "iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Internationalized Resource Identifier (IRI) of the institution."
                      },
                      "ror_iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Research Organization Registry (ROR) IRI of the institution."
                      },
                      "iris": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "List of IRIs associated with the institution."
                      },
                      "assets": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo."
                          },
                          "logo_rounded": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo with rounded corners."
                          },
                          "banner": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's banner."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Static path to the institution specific logo."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/cos/"
                    },
                    "attributes": {
                      "auth_url": null,
                      "logo_path": "/static/img/institutions/shields/cos-shield.png",
                      "name": "Center For Open Science",
                      "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>."
                    },
                    "type": "institutions",
                    "id": "cos"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/uva/"
                    },
                    "attributes": {
                      "auth_url": "https://accounts.osf.io/Shibboleth.sso/Login?entityID=urn%3Amace%3Aincommon%3Avirginia.edu",
                      "logo_path": "/static/img/institutions/shields/uva-shield.png",
                      "name": "University of Virginia",
                      "description": "In partnership with the <a href=\"http://www.virginia.edu/vpr/\">Vice President for Research</a>, <a href=\"http://dsi.virginia.edu\">Data Science Institute</a>, <a href=\"https://www.hsl.virginia.edu\">Health Sciences Library</a>, and <a href=\"http://data.library.virginia.edu\">University Library</a>. Learn more about <a href=\"http://cadre.virginia.edu\">UVA resources for computational and data-driven research</a>. Projects must abide by the <a href=\"http://www.virginia.edu/informationpolicy/security.html\">University Security and Data Protection Policies</a>."
                    },
                    "type": "institutions",
                    "id": "uva"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/forks/": {
      "post": {
        "summary": "Create a fork of this node",
        "description": "Creates a fork of the given node.\n\nForking a project creates a copy of an existing node and all of its contents. The fork always points back to the original node, forming a network of nodes.\n\nYou might use a fork to copy another's work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.\n\nWhen creating a fork, your fork will only contain public components of the current node and components for which you are a contributor. Private components that you do not have access to will not be forked.\n#### Required\nThere are no required attributes when creating a fork, as all of the forked node's attributes will be copied from the current node.\n\nThe `title` field is optional, with the default title being \"Fork of \" prepended to the current node's title.\n#### Returns\nReturns a JSON object with a `data` key containing the complete srepresentation of the forked node, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Node",
              "required": [
                "type",
                "attributes"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the node entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the node entity (`nodes`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the node entity.",
                  "required": [
                    "title",
                    "category"
                  ],
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the node, as selected by project contributors."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the node."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this node represents a fork of another node."
                    },
                    "forked_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "A list of strings that describe this node, as entered by project contributors."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this node is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of this node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this node."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this node."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this node."
                    },
                    "draft_registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this node."
                    },
                    "forked_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node which this node was forked from, if this node is a fork."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this node."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the license that has been applied to this node."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this node."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of preprints that this node relates to."
                    },
                    "registrations": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of registrations that have been created from this node."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                    },
                    "template_node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this node."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this node."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the node entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this node."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "nodes",
                  "attributes": {
                    "title": "An Excellent Project Title",
                    "category": "software"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_forks_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Node",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "summary": "List all forks of this node",
        "description": "\nA paginated list of the current node's forks. The returned fork nodes are sorted by their `forked_date`, with the most recently forked nodes appearing first.\n\nForking a project creates a copy of an existing node and all of its contents. The fork always points back to the original node, forming a network of nodes.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 forked nodes. If the current node has zero forked nodes, the `data` key will contain an empty array. Each resource in the array is a separate node object and contains the full representation of the forked node, meaning additional requests to the forked node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_forks_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/comments/?filter%5Btarget%5D=95q3e",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/95q3e/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/95q3e/",
                      "html": "https://osf.io/95q3e/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": "",
                      "current_user_permissions": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "date_modified": "2016-07-23T00:21:05.371000",
                      "title": "Fork of Reproducibility Project: Psychology",
                      "forked_date": "2016-11-08T15:59:03.114000",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-04-01T15:49:07.702000",
                      "current_user_can_comment": true,
                      "node_license": null,
                      "public": false,
                      "tags": [
                        "replication",
                        "reproducibility",
                        "open science",
                        "reproduction",
                        "psychological science",
                        "psychology",
                        "metascience",
                        "crowdsource"
                      ]
                    },
                    "type": "nodes",
                    "id": "95q3e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/linked_nodes/": {
      "get": {
        "summary": "List all linked nodes",
        "description": "List of all nodes linked to the given node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/?filter[title]=reproducibility.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`. `title`, `description`, and `category` are string fields and will be filteres using simple substring matching. `public`, `registration` are boolean and can be filtered using truthy values, such as `true`, `false`, `0`, `1`. `tags` is an array of simple strings.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_linked_nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/comments/?filter%5Btarget%5D=bifc7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/bifc7/",
                      "html": "https://osf.io/bifc7/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This is an independent replication as part of the Reproducibility Project: Psychology.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-03-03T05:00:31.512000",
                      "title": "Replication of WA Cunningham, JJ Van Bavel, IR Johnsen (2008, PS 19(2))",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-07-28T13:53:04.508000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "bifc7"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/kxhz5/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/comments/?filter%5Btarget%5D=73pnd",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/73pnd/",
                      "html": "https://osf.io/73pnd/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-10-02T19:50:23.605000",
                      "title": "Replication of Hajcak &amp; Foti (2008, PS, Study 1)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-10-31T18:50:46.111000",
                      "current_user_can_comment": false,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "anxiety",
                        "EMG",
                        "EEG",
                        "motivation",
                        "ERN"
                      ]
                    },
                    "type": "nodes",
                    "id": "73pnd"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/logs/": {
      "get": {
        "summary": "List all logs",
        "description": "A paginated list of all logs associated with a given node.\n\nThe returned logs are sorted by their `date`, with the most recents logs appearing first.\n\nThis list includes the logs of the specified node as well as the logs of that node's children to which the current user has read-only access.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 logs. Each resource in the array is a separate logs object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include logs that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/logs/?filter[action]=made_private.\n\nNodes may be filtered by their `action`, and `date`.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_logs_list",
        "x-response-schema": "Log",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Log",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the log."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the log (`logs`)"
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the log.",
                    "required": [
                      "action",
                      "date"
                    ],
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the log was created, as an iso8601 formatted timestamp."
                      },
                      "action": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See actions section for full list of possible actions."
                      },
                      "params": {
                        "type": "object",
                        "title": "Log Params",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See description for full list of possible actions.",
                        "properties": {
                          "addon": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The addon associated with the connected node."
                          },
                          "anonymous_link": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "The view only link added to the node was anonymous."
                          },
                          "bucket": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The Amazon s3 bucket connected to the connected node."
                          },
                          "citation_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of citation associated with the connected node."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "List of contributors on the connected node involved in the action represented by this node log."
                          },
                          "data_set": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The dataset associated with the connected node."
                          },
                          "destination": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title."
                          },
                          "figshare_title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Title of the fighshare project associated with this node log"
                          },
                          "forward_url": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL that the connected node forwards to."
                          },
                          "github_user": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github user involved with the action represented by this node log."
                          },
                          "github_repo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github repository involved with the action represented by this node log."
                          },
                          "file": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary with information about the file involved with the log."
                          },
                          "filename": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Filename for the file associated with the log."
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Kind of the object associated with the log."
                          },
                          "folder": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Folder associated with the log."
                          },
                          "folder_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of the folder associated with the log."
                          },
                          "license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "License for the associated node."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the DOI and ARK ID for a preprint associated with the log."
                          },
                          "institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the ID and Name of the institution associated with the log."
                          },
                          "old_page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Old name of wiki page for a wiki rename log action."
                          },
                          "page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Current name of wiki page for rename log action."
                          },
                          "page_id": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Primary key of the wiki page associated with the log."
                          },
                          "params_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Node that is refered to in the params of the log."
                          },
                          "params_project": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Project that is refered to in the params of the log."
                          },
                          "path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Path for a file associated with the log."
                          },
                          "pointer": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the node that is linked to the associated node."
                          },
                          "preprint": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint related to the associated node."
                          },
                          "preprint_provider": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint provider for the associated node."
                          },
                          "previous_institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "If a primary institution for the associated node is changed, this will show the previous institution."
                          },
                          "source": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title."
                          },
                          "study": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dataverse study linked to the associated node."
                          },
                          "tag": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tag associated with the associated node."
                          },
                          "tags": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tags associated with the associated node."
                          },
                          "target": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title."
                          },
                          "template_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing information about the node that was used as a template for the associated node."
                          },
                          "title_new": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The new title for the associated node."
                          },
                          "title_original": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The original title for the associated node"
                          },
                          "updated_fields": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing all of the fields updated on the associated node."
                          },
                          "urls": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Links to access information about the file associated with this log."
                          },
                          "version": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Version of the wiki page associated with this log."
                          },
                          "wiki": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the wiki page associated with the log."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the log.",
                    "required": [
                      "node"
                    ],
                    "properties": {
                      "node": {
                        "description": "A relationship to the node associated with this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "original_node": {
                        "description": "A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "user": {
                        "description": "A relationship to the user who performed the log action.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "linked_node": {
                        "description": "A relationship to the node linked to this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "template_node": {
                        "description": "A relationship to the node used as a template for this log.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "links": {
                    "description": "URLs to alternative representations of the log entity.",
                    "readOnly": true,
                    "type": "object",
                    "title": "Links",
                    "required": [
                      "self"
                    ],
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the log."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/jk5cv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/4fc706a80b6e9118ef000122/"
                    },
                    "attributes": {
                      "date": "2012-05-31T05:50:32.083000",
                      "action": "contributor_added",
                      "params": {
                        "params_node": {
                          "id": "ezcuj",
                          "title": "Reproducibility Project: Psychology"
                        },
                        "contributors": [
                          {
                            "family_name": "Nosek",
                            "middle_names": "A.",
                            "given_name": "Brian",
                            "full_name": "Brian A. Nosek",
                            "active": true,
                            "id": "cdi38"
                          }
                        ]
                      }
                    },
                    "type": "logs",
                    "id": "4fc706a80b6e9118ef000122"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/fejxb/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/fejxb/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/2z47w/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/iraqy/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/58862f8f594d9001f547f484/"
                    },
                    "attributes": {
                      "date": "2017-01-23T16:30:07.321000",
                      "action": "pointer_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "fejxb",
                          "title": "Replication of Correll (2008, JPSP, Study 2)"
                        },
                        "pointer": {
                          "url": "/iraqy/",
                          "category": "project",
                          "id": "iraqy",
                          "title": "Independent Direct Replication #2 of Correll (2008, JPSP, Study 2)"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "58862f8f594d9001f547f484"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/rtjws/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/rtjws/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/5873190554be8101d7e30b3e/"
                    },
                    "attributes": {
                      "date": "2017-01-09T05:00:53.761000",
                      "action": "project_registered",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "rtjws",
                          "title": "Analysis Audit"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "5873190554be8101d7e30b3e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "A paginated list of preprints related to a given node. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n\n**Note: This API endpoint is under active development, and is subject to change in the future.**\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the preprint."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the preprint."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "tags": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The tags given to a preprint."
                      },
                      "preprint_doi_created": {
                        "type": "string",
                        "readOnly": false,
                        "description": "When the preprint DOI was created."
                      },
                      "date_withdrawn": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                      },
                      "current_user_permissions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The list of permissions the current user has."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The wheter the preprint is public."
                      },
                      "reviews_state": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The a label to indicate the state of review a preprint is in."
                      },
                      "date_last_transitioned": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The date the reviews state of the preprint changed."
                      },
                      "has_coi": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a conflict of interest statement.",
                        "enum": [
                          true,
                          false,
                          null
                        ]
                      },
                      "conflict_of_interest_statement": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the conflict of interest statement for the preprint."
                      },
                      "has_data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a links to data.",
                        "enum": [
                          "no",
                          "available",
                          "not_applicable",
                          null
                        ]
                      },
                      "why_no_data": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration data was not included."
                      },
                      "data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints supplemental data go here.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "has_prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has any preregistration links.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "why_no_prereg": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration links weren't included."
                      },
                      "prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints preregistrations go here."
                      },
                      "prereg_link_info": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the any explanation of preprint preregistration link infomation."
                      },
                      "version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Preprint version"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                      },
                      "bibliographic_contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to files of the preprint."
                      },
                      "review_actions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the review actions made of that preprint."
                      },
                      "requests": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the requests for sanction changes that was made to the preprint."
                      },
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "subjects": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the academic subjects for the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "iri": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation preprint of the OSF."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bnzx5/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/khbvy/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/57c44b1e594d90004a421ab1/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/khbvy/",
                      "html": "https://osf.io/khbvy/",
                      "doi": "https://dx.doi.org/10.1371/journal.pbio.1002456"
                    },
                    "attributes": {
                      "doi": "10.1371/journal.pbio.1002456",
                      "license_record": null,
                      "date_modified": "2016-08-29T14:53:51.185000",
                      "is_preprint_orphan": false,
                      "date_published": "2016-08-29T14:53:51.185000",
                      "subjects": [
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Public Affairs, Public Policy and Public Administration",
                            "id": "584240da54be81056cecaab8"
                          },
                          {
                            "text": "Science and Technology Policy",
                            "id": "584240d954be81056cecaa10"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Library and Information Science",
                            "id": "584240da54be81056cecab33"
                          },
                          {
                            "text": "Scholarly Publishing",
                            "id": "584240db54be81056cecacd2"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ]
                      ],
                      "date_created": "2016-08-29T14:53:51.185000",
                      "is_published": true
                    },
                    "type": "preprints",
                    "id": "khbvy"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/registrations/": {
      "get": {
        "summary": "List all registrations",
        "description": "List of all registrations of the given node.\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 registrations. Each resource in the array is a separate registrations object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the filter query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]=open.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_registrations_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "files": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/files/",
                          "meta": {}
                        }
                      }
                    },
                    "view_only_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/view_only_links/",
                          "meta": {}
                        }
                      }
                    },
                    "citation": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/citation/",
                          "meta": {}
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2be/",
                          "meta": {}
                        }
                      }
                    },
                    "logs": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/logs/",
                          "meta": {}
                        }
                      }
                    },
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "forks": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/forks/",
                          "meta": {}
                        }
                      }
                    },
                    "root": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/",
                          "meta": {}
                        }
                      }
                    },
                    "identifiers": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/identifiers/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/comments/?filter%5Btarget%5D=esa63",
                          "meta": {}
                        }
                      }
                    },
                    "registered_from": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/dpfyv/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_registrations": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/registrations/esa63/relationships/linked_registrations/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/linked_registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "registered_by": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/ztdnp/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_nodes": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/registrations/esa63/relationships/linked_nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/linked_nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "wikis": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/wikis/",
                          "meta": {}
                        }
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "children": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/children/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/registrations/esa63/",
                    "html": "https://osf.io/esa63/"
                  },
                  "attributes": {
                    "registration_supplement": "Open-Ended Registration",
                    "pending_embargo_approval": false,
                    "registration": true,
                    "embargo_end_date": null,
                    "withdrawn": false,
                    "withdrawal_justification": null,
                    "category": "project",
                    "preprint": false,
                    "current_user_permissions": [
                      "read"
                    ],
                    "title": "How Awareness Impacts Multiple Forms of Social Bias in Behavior (Final Data Collection and Analysis Plan)",
                    "registered_meta": {
                      "summary": {
                        "comments": [],
                        "value": "This pre-registration is an updated data collection and analysis plan. See https://osf.io/ptcqw/ for original data collection rule and https://osf.io/8jyu8/ for original analysis plan. We are collecting more data given that results after original data collection were inconclusive.",
                        "extra": []
                      }
                    },
                    "public": true,
                    "fork": false,
                    "description": "",
                    "tags": [],
                    "collection": false,
                    "current_user_can_comment": true,
                    "pending_registration_approval": false,
                    "date_modified": "2017-02-12T19:22:26.488000",
                    "date_registered": "2017-02-12T19:28:48.864000",
                    "node_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registrations/esa63/node_links/",
                          "meta": {}
                        }
                      }
                    },
                    "date_created": "2017-02-12T18:45:55.063000",
                    "pending_withdrawal": false,
                    "node_license": null
                  },
                  "type": "registrations",
                  "id": "esa63"
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/view_only_links/": {
      "get": {
        "summary": "List all view only links",
        "description": "List of view only links on a node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 view only links. Each resource in the array is a view only link object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Permissions\n\nView only links on a node, public or private, are readable and writeable only by users that are administrators on the node.\n\n#### Filtering\n\nYou can optionally request that the response only include view only links that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/nodes/ezcuj/view_only_links/?filter[anonymous]=true.\n\nView Only Links may be filtered based on their `name`, `anonymous` and `date_created` fields. Possible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_view_only_links_list",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "view-only-links",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the view only link."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the view only link ('view-only-links')."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the view only link entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                      },
                      "anonymous": {
                        "type": "boolean",
                        "default": true,
                        "readOnly": false,
                        "description": "Whether or not the view only link has anonymized contributors"
                      },
                      "name": {
                        "type": "string",
                        "default": "Shared project link",
                        "readOnly": false,
                        "description": "The name of the view only link"
                      },
                      "key": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The view only key"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                    "required": [
                      "nodes",
                      "creator"
                    ],
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": false,
                        "description": "A relationship to the nodes which this view only link gives read-only access to."
                      },
                      "creator": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the user who created this view only link."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d03846a170c50025baae61/"
                    },
                    "attributes": {
                      "date_created": "2017-03-20T20:15:02.488643",
                      "anonymous": false,
                      "key": "c1df490be3294a9bac01ff05c4097ab7",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d03846a170c50025baae61"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d13827a170c50025baae6e/"
                    },
                    "attributes": {
                      "date_created": "2017-03-21T14:26:47.507504",
                      "anonymous": false,
                      "key": "9794ac36085e4d7086ff4dab49daf1cb",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d13827a170c50025baae6e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/view_only_links/{link_id}/": {
      "get": {
        "summary": "Retrieve a view only link",
        "description": "Retrieves the details of a view only link on a node.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Permissions\n\nView only links on a node, public or private, are readable and writeable only by users that are administrators on the node.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_view_only_links_read",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "view-only-links",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the view only link."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the view only link ('view-only-links')."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the view only link entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                    },
                    "anonymous": {
                      "type": "boolean",
                      "default": true,
                      "readOnly": false,
                      "description": "Whether or not the view only link has anonymized contributors"
                    },
                    "name": {
                      "type": "string",
                      "default": "Shared project link",
                      "readOnly": false,
                      "description": "The name of the view only link"
                    },
                    "key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The view only key"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                  "required": [
                    "nodes",
                    "creator"
                  ],
                  "properties": {
                    "nodes": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A relationship to the nodes which this view only link gives read-only access to."
                    },
                    "creator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the user who created this view only link."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/nodes/{node_id}/wikis/": {
      "get": {
        "summary": "List all wikis",
        "description": "List of wiki pages on a node.\n#### Returns\nPaginated list of the node's current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki's detail view are not necessary.\n\nNote that if an anonymous view_only key is being used, the user relationship will not be exposed.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nWiki pages can be filtered based on their `name` and `date_modified` fields.\n+ `filter[name]=<Str>` -- filter wiki pages by name\n+ `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` -- filter wiki pages based on date modified.\n\nPossible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "node_id",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Nodes"
        ],
        "operationId": "nodes_wikis_list",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Wiki",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the wiki."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the wiki (`wikis`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the wiki.",
                    "required": [
                      "kind",
                      "name",
                      "date_modified",
                      "extra",
                      "content_type",
                      "path",
                      "current_user_can_comment",
                      "materialized_path",
                      "size"
                    ],
                    "properties": {
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of object."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name/title of the wiki page."
                      },
                      "extra": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing additional metadata about this wiki, including version information."
                      },
                      "content_type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Content type of the wiki (`text/markdown`)."
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Path to the wiki object."
                      },
                      "current_user_can_comment": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Whether the current user is allowed to post comments on this wiki."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Materialized path to the wiki object."
                      },
                      "size": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Size of the wiki."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                    "required": [
                      "node",
                      "user",
                      "comments"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the associated node."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the user associated with this wiki."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the comments related to this wiki."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the wiki.",
                    "properties": {
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL to download the content of the wiki."
                      },
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/tvyxz/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/5k3hq/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/tvyxz/comments/?filter%5Btarget%5D=zveyb",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/wikis/zveyb/",
                      "download": "https://api.osf.io/v2/wikis/zveyb/content/",
                      "self": "https://api.osf.io/v2/wikis/zveyb/"
                    },
                    "attributes": {
                      "kind": "file",
                      "name": "home",
                      "date_modified": "2017-02-16T15:45:57.671957",
                      "extra": {
                        "version": 47
                      },
                      "content_type": "text/markdown",
                      "path": "/zveyb",
                      "current_user_can_comment": true,
                      "materialized_path": "/zveyb",
                      "size": 552
                    },
                    "type": "wikis",
                    "id": "xu77p"
                  }
                ],
                "links": {
                  "first": "",
                  "last": "https://api.osf.io/v2/wikis/zveyb/?page=2",
                  "prev": "",
                  "next": "https://api.osf.io/v2/wikis/zveyb/?page=2",
                  "meta": {
                    "total": 12,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{node_id}/linked_by_nodes/": {
      "get": {
        "summary": "List Nodes Linking to a Node",
        "description": "Retrieve a list of nodes that link to the specified node.\n#### Permissions\n - Public nodes are visible to everyone.\n - Private nodes require appropriate permissions to access.\n - The authenticated user must have read access to see restricted nodes linking to this node.\n\n#### Returns\n - A paginated list of nodes that link to the specified node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_linked_by_nodes_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node to look up linked nodes for."
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of nodes linking to the specified node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Node",
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the node entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The type identifier of the node entity (`nodes`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": false,
                        "description": "The properties of the node entity.",
                        "required": [
                          "title",
                          "category"
                        ],
                        "properties": {
                          "category": {
                            "type": "string",
                            "readOnly": false,
                            "enum": [
                              "analysis",
                              "communication",
                              "data",
                              "hypothesis",
                              "instrumentation",
                              "methods and measures",
                              "procedure",
                              "project",
                              "software",
                              "other"
                            ],
                            "description": "The category of the node, as selected by project contributors."
                          },
                          "title": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The title of the node."
                          },
                          "collection": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                          },
                          "current_user_can_comment": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                          },
                          "current_user_permissions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The description of the node."
                          },
                          "fork": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this node represents a fork of another node."
                          },
                          "forked_date": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                          },
                          "node_license": {
                            "type": "string",
                            "readOnly": false,
                            "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                          },
                          "preprint": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": false,
                            "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                          },
                          "registration": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": false,
                            "description": "A list of strings that describe this node, as entered by project contributors."
                          },
                          "template_from": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": false,
                        "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                        "properties": {
                          "affiliated_institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions this node is affiliated with."
                          },
                          "children": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of this node's children (components)."
                          },
                          "citation": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the citation details of this node."
                          },
                          "comments": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of comments on this node."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of contributors on this node."
                          },
                          "draft_registrations": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                          },
                          "files": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of storage providers that have been enabled on this node."
                          },
                          "forked_from": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node which this node was forked from, if this node is a fork."
                          },
                          "forks": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are forks of this node."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                          },
                          "license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the license that has been applied to this node."
                          },
                          "logs": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of log actions pertaining to this node."
                          },
                          "linked_nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to the current node."
                          },
                          "node_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                          },
                          "parent": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                          },
                          "preprints": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of preprints that this node relates to."
                          },
                          "registrations": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of registrations that have been created from this node."
                          },
                          "root": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                          },
                          "template_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                          },
                          "view_only_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of view only links that have been created for this node."
                          },
                          "wikis": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of wiki pages for this node."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the node entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the node's page on the OSF."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the canonical API endpoint of this node."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "nodes",
                        "attributes": {
                          "title": "An Excellent Project Title",
                          "category": "software"
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of nodes linking to this node."
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view nodes linking to this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/linked_by_registrations/": {
      "get": {
        "summary": "List Registrations Linking to a Node",
        "description": "Retrieve a list of registrations that have created links to the specified node.\n#### Permissions\n - Public registrations are visible to everyone.\n - Registrations with restricted visibility require appropriate permissions to access.\n - The authenticated user must have read access to see restricted registrations linking to this node.\n\n#### Returns\n - A paginated list of registrations that link to the specified node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_linked_by_registrations_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node to look up linked registrations for."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of the results to return (pagination)."
          },
          {
            "in": "query",
            "name": "filter",
            "type": "string",
            "description": "Filter results by registration attributes (e.g., `filter[title]=example`)."
          },
          {
            "in": "query",
            "name": "sort",
            "type": "string",
            "description": "Sort the returned registrations.\n- `date_created`: Sort by creation date.\n- `title`: Sort alphabetically by title.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of registrations linking to the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Registration",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the registration."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the registration entity (`registrations`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the registration entity.",
                        "properties": {
                          "category": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "analysis",
                              "communication",
                              "data",
                              "hypothesis",
                              "instrumentation",
                              "methods and measures",
                              "procedure",
                              "project",
                              "software",
                              "other"
                            ],
                            "description": "The category of the registered node."
                          },
                          "collection": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                          },
                          "current_user_can_comment": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                          },
                          "current_user_permissions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                          },
                          "date_withdrawn": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the registered node."
                          },
                          "embargo_end_date": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                          },
                          "fork": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration represents a fork of another node."
                          },
                          "node_license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                          },
                          "pending_embargo_approval": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                          },
                          "pending_registration_approval": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the registration is pending approval from project administrators."
                          },
                          "pending_withdrawal": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                          },
                          "preprint": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": false,
                            "description": "Whether or not the registration is publicly visible."
                          },
                          "registration": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                          },
                          "registered_meta": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with supplemental registration questions and responses."
                          },
                          "registration_supplement": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The title of the registration schema this registration conforms to."
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "A list of strings that describe the registered node."
                          },
                          "template_from": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                          },
                          "title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The title of the registered node."
                          },
                          "withdrawn": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration has been withdrawn."
                          },
                          "withdrawal_justification": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                        "properties": {
                          "affiliated_institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions this registration is affiliated with."
                          },
                          "children": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of the registered node's children (components)."
                          },
                          "citation": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the citation details of this registration."
                          },
                          "comments": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of comments on this registration."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of contributors on this registration."
                          },
                          "files": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of storage providers that have been enabled on this registration."
                          },
                          "forks": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are forks of this registration."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                          },
                          "logs": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of log actions pertaining to this registration."
                          },
                          "linked_nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to this registration."
                          },
                          "node_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                          },
                          "parent": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                          },
                          "registered_by": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the user that initiated this registration."
                          },
                          "registered_from": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that this registration was registered from."
                          },
                          "registration_schema": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the metaschema that this registration conforms to."
                          },
                          "root": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                          },
                          "view_only_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of view only links that have been created for this registration."
                          },
                          "wikis": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of wiki pages for this registration."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the registrations entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the registration's page on the OSF."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the canonical API endpoint of this registration."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "registrations",
                        "attributes": {
                          "draft_registration": "{draft_registration_id}",
                          "registration_choice": "embargo",
                          "lift_embargo": "2017-05-10T20:44:03.185000"
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of registrations linking to this node."
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view registrations linking to this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/relationships/institutions/": {
      "get": {
        "summary": "Retrieve relationships between a Node and its affiliated Institutions",
        "description": "Retrieve a list of resource identifier objects that represent the institutions affiliated with the given node.\n#### Permissions\n - Public nodes will display their affiliated institutions.\n - Private nodes require read permissions.\n\n#### Returns - A JSON object with a `data` key containing an array of resource identifier objects (`type` and `id`) for each affiliated institution.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_institutions_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved affiliated institutions for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "institutions"
                      },
                      "id": {
                        "type": "string",
                        "example": "cos"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/relationships/institutions/"
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/institutions/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "cos"
                  },
                  {
                    "type": "institutions",
                    "id": "uva"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/{node_id}/relationships/institutions/",
                  "related": "https://api.osf.io/v2/nodes/{node_id}/institutions/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view institutions for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Replace relationships between a Node and its affiliated Institutions",
        "description": "Replace all existing affiliated institutions for a node with a new set of institutions.\n#### Permissions\n - The authenticated user must have admin permissions on the node.\n\n#### Request Body\n - A `data` array containing the new list of institution resource identifier objects (`type` and `id`).\n\n#### Returns\n - The updated list of affiliated institutions for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_institutions_update",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "institutions"
                        ],
                        "description": "Must be `institutions`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the institution."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "cos"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced affiliated institutions for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "institutions"
                      },
                      "id": {
                        "type": "string",
                        "example": "cos"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify institutions for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "post": {
        "summary": "Add relationships between a Node and Institutions",
        "description": "Add new affiliated institutions to the node, while keeping the existing ones intact.\n#### Permissions\n - The authenticated user must have admin permissions on the node.\n\n#### Request Body\n - A `data` array containing additional institution resource identifier objects to be added.\n\n#### Returns\n - The updated list of affiliated institutions for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_institutions_add",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "institutions"
                        ],
                        "description": "Must be `institutions`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the institution."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "uva"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added affiliated institutions to the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "institutions"
                      },
                      "id": {
                        "type": "string",
                        "example": "uva"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "cos"
                  },
                  {
                    "type": "institutions",
                    "id": "uva"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify institutions for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "delete": {
        "summary": "Remove relationships between a Node and Institutions",
        "description": "Remove specified affiliated institutions from the node.\n#### Permissions - The authenticated user must have admin permissions on the node.\n#### Request Body - A `data` array containing the institution resource identifier objects to be removed.\n#### Returns - An empty response indicating successful deletion.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_institutions_delete",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "institutions"
                        ],
                        "description": "Must be `institutions`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the institution."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "cos"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed affiliated institutions from the node. No content returned."
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify institutions for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/relationships/linked_nodes/": {
      "get": {
        "summary": "Retrieve relationships between a Node and its linked Nodes",
        "description": "Retrieve a list of resource identifier objects that represent the nodes linked to the given node.\n#### Permissions\n - Public nodes will display their public linked nodes.\n - Private nodes require read permissions.\n\n#### Returns - A JSON object with a `data` key containing an array of resource identifier objects (`type` and `id`) for each linked node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_nodes_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved linked nodes for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "nodes"
                      },
                      "id": {
                        "type": "string",
                        "example": "abc123"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_nodes/"
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/linked_nodes/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "abc123"
                  },
                  {
                    "type": "nodes",
                    "id": "def456"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_nodes/",
                  "related": "https://api.osf.io/v2/nodes/{node_id}/linked_nodes/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view linked nodes for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Replace relationships between a Node and its linked Nodes",
        "description": "Replace all existing linked nodes for a node with a new set of linked nodes.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing the new list of node resource identifier objects (`type` and `id`).\n#### Returns - The updated list of linked nodes for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_nodes_update",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "nodes"
                        ],
                        "description": "Must be `nodes`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the node."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "abc123"
                  },
                  {
                    "type": "nodes",
                    "id": "def456"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced linked nodes for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "nodes"
                      },
                      "id": {
                        "type": "string",
                        "example": "node_id"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_nodes/"
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/linked_nodes/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "abc123"
                  },
                  {
                    "type": "nodes",
                    "id": "def456"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_nodes/",
                  "related": "https://api.osf.io/v2/nodes/{node_id}/linked_nodes/"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify linked nodes for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "post": {
        "summary": "Add relationships between a Node and linked Nodes",
        "description": "Add new linked nodes to the node, while keeping the existing ones intact.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing additional node resource identifier objects to be added.\n#### Returns - The updated list of linked nodes for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_nodes_add",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "nodes"
                        ],
                        "description": "Must be `nodes`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the node."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "ghi789"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added linked nodes to the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "nodes"
                      },
                      "id": {
                        "type": "string",
                        "example": "node_id"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "abc123"
                  },
                  {
                    "type": "nodes",
                    "id": "def456"
                  },
                  {
                    "type": "nodes",
                    "id": "ghi789"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify linked nodes for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "delete": {
        "summary": "Remove relationships between a Node and linked Nodes",
        "description": "Remove specified linked nodes from the node.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing the node resource identifier objects to be removed.\n#### Returns - An empty response indicating successful deletion.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_nodes_delete",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "nodes"
                        ],
                        "description": "Must be `nodes`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the node."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "abc123"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed linked nodes from the node. No content returned."
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify linked nodes for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/relationships/linked_registrations/": {
      "get": {
        "summary": "Retrieve relationships between a Node and its linked Registrations",
        "description": "Retrieve a list of resource identifier objects that represent the registrations linked to the given node.\n#### Permissions\n - Public nodes will show public linked registrations.\n - Private nodes require read permissions.\n\n#### Returns - A JSON object with a `data` key containing an array of resource identifier objects (`type` and `id`) for each linked registration.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_registrations_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved linked registrations for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "id": {
                        "type": "string",
                        "example": "registration_id"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_registrations/"
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/linked_registrations/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "abc123"
                  },
                  {
                    "type": "registrations",
                    "id": "def456"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_registrations/",
                  "related": "https://api.osf.io/v2/nodes/{node_id}/linked_registrations/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view linked registrations for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Replace relationships between a Node and linked Registrations",
        "description": "Replace all existing linked registrations for a node with a new set of linked registrations.\n#### Permissions\n - The authenticated user must have write permissions on the node.\n\n#### Request Body - A `data` array containing the new list of registration resource identifier objects (`type` and `id`).\n#### Returns - The updated list of linked registrations for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_registrations_update",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "registrations"
                        ],
                        "description": "Must be `registrations`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the registration."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "abc123"
                  },
                  {
                    "type": "registrations",
                    "id": "def456"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced linked registrations for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "id": {
                        "type": "string",
                        "example": "registration_id"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_registrations/"
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/linked_registrations/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "abc123"
                  },
                  {
                    "type": "registrations",
                    "id": "def456"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/{node_id}/relationships/linked_registrations/",
                  "related": "https://api.osf.io/v2/nodes/{node_id}/linked_registrations/"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify linked registrations for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "post": {
        "summary": "Add relationships between a Node and linked Registrations",
        "description": "Add new linked registrations to the node, while keeping the existing ones intact.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing additional registration resource identifier objects to be added.\n#### Returns - The updated list of linked registrations for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_registrations_add",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "registrations"
                        ],
                        "description": "Must be `registrations`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the registration."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "ghi789"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added linked registrations to the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "id": {
                        "type": "string",
                        "example": "registration_id"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "abc123"
                  },
                  {
                    "type": "registrations",
                    "id": "def456"
                  },
                  {
                    "type": "registrations",
                    "id": "ghi789"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify linked registrations for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "delete": {
        "summary": "Remove relationships between a Node and linked Registrations",
        "description": "Remove specified linked registrations from the node.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing the registration resource identifier objects to be removed.\n#### Returns - An empty response indicating successful deletion.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_linked_registrations_delete",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "registrations"
                        ],
                        "description": "Must be `registrations`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the registration."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "abc123"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed linked registrations from the node. No content returned."
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify linked registrations for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/relationships/subjects/": {
      "get": {
        "summary": "Retrieve the relationships between a Node and its Subjects",
        "description": "Retrieve a list of relationship identifiers (resource linkage) representing the subjects associated with a specific node.\n#### Permissions\n - Public nodes will display public subjects.\n - Private nodes require read permissions.\n\n#### Returns - A JSON object with a `data` key containing an array of resource identifier objects (`type` and `id`) for each subject linked to the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_subjects_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the subject relationships for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "subjects"
                      },
                      "id": {
                        "type": "string",
                        "example": "subject_id"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/relationships/subjects/"
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/subjects/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "abc123"
                  },
                  {
                    "type": "subjects",
                    "id": "def456"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/{node_id}/relationships/subjects/",
                  "related": "https://api.osf.io/v2/nodes/{node_id}/subjects/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view subjects on this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Update the relationships between a Node and its Subjects",
        "description": "Replace all existing subject relationships on a node with a new list of subjects.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing the new list of subject resource identifier objects (`type` and `id`).\n#### Returns - The updated list of subject relationships for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_subjects_update",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "subjects"
                        ],
                        "description": "Must be `subjects`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the subject."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "abc123"
                  },
                  {
                    "type": "subjects",
                    "id": "def456"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the subject relationships for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "subjects"
                      },
                      "id": {
                        "type": "string",
                        "example": "subject_id"
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/relationships/subjects/"
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/subjects/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "abc123"
                  },
                  {
                    "type": "subjects",
                    "id": "def456"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/{node_id}/relationships/subjects/",
                  "related": "https://api.osf.io/v2/nodes/{node_id}/subjects/"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify subjects on this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "post": {
        "summary": "Add relationships between a Node and Subjects",
        "description": "Add new subject relationships to a node, keeping the existing subjects intact.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing additional subject resource identifier objects to be added.\n#### Returns - The updated list of subject relationships for the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_subjects_add",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "subjects"
                        ],
                        "description": "Must be `subjects`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the subject."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "ghi789"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added subjects to the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "subjects"
                      },
                      "id": {
                        "type": "string",
                        "example": "subject_id"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "abc123"
                  },
                  {
                    "type": "subjects",
                    "id": "def456"
                  },
                  {
                    "type": "subjects",
                    "id": "ghi789"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify subjects on this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "delete": {
        "summary": "Remove relationships between a Node and Subjects",
        "description": "Remove specified subject relationships from a node.\n#### Permissions - The authenticated user must have write permissions on the node.\n#### Request Body - A `data` array containing the subject resource identifier objects to be removed.\n#### Returns - An empty response indicating successful deletion.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_relationships_subjects_delete",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "subjects"
                        ],
                        "description": "Must be `subjects`."
                      },
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the subject."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "abc123"
                  }
                ]
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the subject relationship(s) from the node. No content returned."
          },
          "400": {
            "description": "Bad Request. The submitted data is invalid."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify subjects on this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/requests/": {
      "get": {
        "summary": "List Requests for a Node",
        "description": "Retrieve a list of requests associated with a specific node.   Requests include actions such as registration approval, withdrawal, or other moderation-related requests initiated on the node.\n#### Permissions\n - The authenticated user must have read access to the node to view its requests.\n - Moderators or admins of the provider may have additional access to request details depending on their role.\n\n#### Returns\n - A JSON object with a `data` key containing a list of request resources.\n - Each request provides metadata about its current state, type, creator, and review process.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_requests_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "query",
            "name": "filter[type]",
            "type": "string",
            "description": "Filter requests by type (e.g., `withdrawal`, `registration`)."
          },
          {
            "in": "query",
            "name": "filter[state]",
            "type": "string",
            "description": "Filter requests by current state (e.g., `pending`, `accepted`, `rejected`)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of requests for the node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the request."
                      },
                      "type": {
                        "type": "string",
                        "example": "requests"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "request_type": {
                            "type": "string",
                            "description": "The type of the request, such as `withdrawal` or `registration`.",
                            "example": "withdrawal"
                          },
                          "state": {
                            "type": "string",
                            "description": "The current state of the request.",
                            "example": "pending"
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp when the request was created.",
                            "example": "2024-03-10T15:30:00Z"
                          },
                          "modified": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp when the request was last modified.",
                            "example": "2024-03-12T10:00:00Z"
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "creator": {
                            "type": "object",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "example": "https://api.osf.io/v2/users/{user_id}/"
                                  }
                                }
                              },
                              "data": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "user_id"
                                  }
                                }
                              }
                            }
                          },
                          "target": {
                            "type": "object",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "example": "https://api.osf.io/v2/nodes/{node_id}/"
                                  }
                                }
                              },
                              "data": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "nodes"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "node_id"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "example": "https://api.osf.io/v2/requests/{request_id}/"
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "abc123",
                    "type": "requests",
                    "attributes": {
                      "request_type": "withdrawal",
                      "state": "pending",
                      "created": "2024-03-10T15:30:00Z",
                      "modified": "2024-03-12T10:00:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": "https://api.osf.io/v2/users/user1/"
                        },
                        "data": {
                          "type": "users",
                          "id": "user1"
                        }
                      },
                      "target": {
                        "links": {
                          "related": "https://api.osf.io/v2/nodes/{node_id}/"
                        },
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/requests/abc123/"
                    }
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access requests for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/settings/": {
      "get": {
        "summary": "Retrieve Node Settings",
        "description": "Retrieve the settings for a specific node.   This includes details such as whether wiki functionality is enabled, if comments are enabled, and other configurable settings.\n#### Permissions\n - Public nodes expose a subset of settings.\n - Private nodes require read permissions to view full settings.\n\n#### Returns\n - A JSON object with a `data` key containing the node's settings.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_settings_read",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved node settings.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the node settings object (same as node_id)."
                    },
                    "type": {
                      "type": "string",
                      "example": "node-settings"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "wiki_enabled": {
                          "type": "boolean",
                          "description": "Whether the node has the wiki feature enabled.",
                          "example": true
                        },
                        "comments_enabled": {
                          "type": "boolean",
                          "description": "Whether comments are enabled on the node.",
                          "example": true
                        },
                        "public": {
                          "type": "boolean",
                          "description": "Whether the node is public or private.",
                          "example": false
                        },
                        "preprint": {
                          "type": "boolean",
                          "description": "Whether this node is designated as a preprint.",
                          "example": false
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "https://api.osf.io/v2/nodes/{node_id}/settings/"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "{node_id}",
                  "type": "node-settings",
                  "attributes": {
                    "wiki_enabled": true,
                    "comments_enabled": true,
                    "public": false,
                    "preprint": false
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/nodes/{node_id}/settings/"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access node settings."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Update Node Settings",
        "description": "Update settings for a specific node.   You can modify properties like `wiki_enabled`, `comments_enabled`, or make the node public/private.\n#### Permissions - Only users with write access to the node can modify its settings.\n#### Request Body\n - The `attributes` object may include the following fields:\n   - `wiki_enabled`: Enable or disable the node's wiki.\n   - `comments_enabled`: Enable or disable comments on the node.\n   - `public`: Make the node public or private.\n\n#### Returns\n - A JSON object with the updated node settings under the `data` key.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_settings_update",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the node settings object (same as node_id)."
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "node-settings"
                      ]
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "wiki_enabled": {
                          "type": "boolean",
                          "description": "Enable or disable the node's wiki."
                        },
                        "comments_enabled": {
                          "type": "boolean",
                          "description": "Enable or disable comments on the node."
                        },
                        "public": {
                          "type": "boolean",
                          "description": "Make the node public or private."
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "{node_id}",
                  "type": "node-settings",
                  "attributes": {
                    "wiki_enabled": false,
                    "comments_enabled": false,
                    "public": true
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Node settings successfully updated.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "example": "node-settings"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "wiki_enabled": {
                          "type": "boolean"
                        },
                        "comments_enabled": {
                          "type": "boolean"
                        },
                        "public": {
                          "type": "boolean"
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "https://api.osf.io/v2/nodes/{node_id}/settings/"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "{node_id}",
                  "type": "node-settings",
                  "attributes": {
                    "wiki_enabled": false,
                    "comments_enabled": false,
                    "public": true
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/nodes/{node_id}/settings/"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input was provided."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify node settings."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/storage/": {
      "get": {
        "summary": "List Storage Providers for a Node",
        "description": "Retrieve the list of storage providers associated with a specific node.   Each node in the OSF automatically has an OSF Storage provider, and may have additional third-party storage providers (such as Dropbox or Google Drive) if configured.\n#### Permissions\n - Public nodes expose storage provider information publicly.\n - Private nodes require read permissions to access storage providers.\n\n#### Returns\n - A JSON object with a `data` array containing storage provider resources assigned to the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_storage_providers_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to retrieve."
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "description": "Comma-separated list of related resources to embed in the response."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of storage providers for the specified node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of storage providers assigned to the node.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the storage provider.",
                        "example": "osfstorage"
                      },
                      "type": {
                        "type": "string",
                        "description": "The resource type.",
                        "example": "providers"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the storage provider.",
                            "example": "OSF Storage"
                          },
                          "default": {
                            "type": "boolean",
                            "description": "Whether this provider is the default storage location for the node.",
                            "example": true
                          },
                          "capability": {
                            "type": "array",
                            "description": "List of capabilities supported by the provider (e.g., upload, delete).",
                            "items": {
                              "type": "string",
                              "example": "upload"
                            }
                          },
                          "regions": {
                            "type": "array",
                            "description": "Available regions (if applicable).",
                            "items": {
                              "type": "string",
                              "example": "us-east-1"
                            }
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "description": "Related resources.",
                        "properties": {
                          "files": {
                            "description": "Files stored within this provider.",
                            "type": "object",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "example": "https://api.osf.io/v2/nodes/{node_id}/files/{provider}/"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "Canonical link to this storage provider.",
                            "example": "https://api.osf.io/v2/nodes/{node_id}/files/providers/osfstorage/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links for the result set.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/storage/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/storage/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/storage/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of storage providers available for this node.",
                      "example": 1
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page.",
                      "example": 10
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "osfstorage",
                    "type": "providers",
                    "attributes": {
                      "name": "OSF Storage",
                      "default": true,
                      "capability": [
                        "upload",
                        "delete"
                      ],
                      "regions": [
                        "us-east-1"
                      ]
                    },
                    "relationships": {
                      "files": {
                        "links": {
                          "related": "https://api.osf.io/v2/nodes/abc12/files/osfstorage/"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/abc12/files/providers/osfstorage/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/abc12/storage/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/nodes/abc12/storage/?page=1",
                  "last": "https://api.osf.io/v2/nodes/abc12/storage/?page=1"
                },
                "meta": {
                  "total": 1,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view storage providers for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/nodes/{node_id}/subjects/": {
      "get": {
        "summary": "List Subjects for a Node",
        "description": "Retrieve the list of taxonomy subjects assigned to a specific node.   Subjects represent thematic classifications for the content of a node.   A node can have multiple subjects, typically applied in the context of preprints or projects associated with specific disciplines.\n#### Permissions\n - Public nodes expose subjects publicly.\n - Private nodes require read permissions to access subjects.\n\n#### Returns\n - A JSON object with a `data` array containing subject resources assigned to the node.",
        "tags": [
          "Nodes"
        ],
        "operationId": "node_subjects_list",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to retrieve."
          },
          {
            "in": "query",
            "name": "filter",
            "type": "string",
            "description": "Filter subjects by specific fields.  \nExample: `filter[text]=biology`\n"
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "description": "Comma-separated list of related resources to embed in the response."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of subjects for the specified node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of subjects assigned to the node.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the subject.",
                        "example": "12345"
                      },
                      "type": {
                        "type": "string",
                        "description": "The resource type.",
                        "example": "subjects"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "The human-readable text of the subject.",
                            "example": "Biology"
                          },
                          "parent_ids": {
                            "type": "array",
                            "description": "List of parent subject IDs (for hierarchical subjects).",
                            "items": {
                              "type": "string",
                              "example": "6789"
                            }
                          },
                          "has_children": {
                            "type": "boolean",
                            "description": "Whether the subject has child subjects.",
                            "example": false
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "parent": {
                            "description": "Parent subject of this subject.",
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "6789"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "subjects"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "Canonical link to this subject.",
                            "example": "https://api.osf.io/v2/taxonomies/12345/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links for the result set.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/subjects/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/subjects/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/nodes/{node_id}/subjects/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of subjects assigned to the node.",
                      "example": 3
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page.",
                      "example": 10
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "12345",
                    "type": "subjects",
                    "attributes": {
                      "text": "Biology",
                      "parent_ids": [
                        "0001"
                      ],
                      "has_children": false
                    },
                    "relationships": {
                      "parent": {
                        "data": {
                          "id": "0001",
                          "type": "subjects"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/12345/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/nodes/abc12/subjects/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/nodes/abc12/subjects/?page=1",
                  "last": "https://api.osf.io/v2/nodes/abc12/subjects/?page=1"
                },
                "meta": {
                  "total": 1,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view subjects for this node."
          },
          "404": {
            "description": "Not Found. No node matches the given ID."
          }
        }
      }
    },
    "/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "\nA paginated list of preprints from all preprint providers. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/?filter[provider]=socarxiv.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the preprint."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the preprint."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "tags": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The tags given to a preprint."
                      },
                      "preprint_doi_created": {
                        "type": "string",
                        "readOnly": false,
                        "description": "When the preprint DOI was created."
                      },
                      "date_withdrawn": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                      },
                      "current_user_permissions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The list of permissions the current user has."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The wheter the preprint is public."
                      },
                      "reviews_state": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The a label to indicate the state of review a preprint is in."
                      },
                      "date_last_transitioned": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The date the reviews state of the preprint changed."
                      },
                      "has_coi": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a conflict of interest statement.",
                        "enum": [
                          true,
                          false,
                          null
                        ]
                      },
                      "conflict_of_interest_statement": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the conflict of interest statement for the preprint."
                      },
                      "has_data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a links to data.",
                        "enum": [
                          "no",
                          "available",
                          "not_applicable",
                          null
                        ]
                      },
                      "why_no_data": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration data was not included."
                      },
                      "data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints supplemental data go here.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "has_prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has any preregistration links.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "why_no_prereg": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration links weren't included."
                      },
                      "prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints preregistrations go here."
                      },
                      "prereg_link_info": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the any explanation of preprint preregistration link infomation."
                      },
                      "version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Preprint version"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                      },
                      "bibliographic_contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to files of the preprint."
                      },
                      "review_actions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the review actions made of that preprint."
                      },
                      "requests": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the requests for sanction changes that was made to the preprint."
                      },
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "subjects": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the academic subjects for the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "iri": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation preprint of the OSF."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5xuck/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/khbvy/institutions/",
                            "meta": {}
                          }
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/preprints/refm5/institutions/",
                          "meta": {}
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/5894204f594d900200ed23f2/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/socarxiv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/hqb2p/",
                      "html": "https://osf.io/preprints/socarxiv/hqb2p/",
                      "preprint_doi": "https://dx.doi.org/10.5072/FK2OSF.IO/HQB2P"
                    },
                    "attributes": {
                      "date_created": "2016-08-29T14:53:51.185000",
                      "date_modified": "2016-08-29T14:53:51.185000",
                      "date_published": "2016-08-29T14:53:51.185000",
                      "original_publication_date": "2016-08-29T14:53:51.185000",
                      "custom_publication_citation": "Custom citation",
                      "doi": "10.1371/journal.pbio.1002456",
                      "title": "Test Title",
                      "description": "Test Description",
                      "is_published": true,
                      "is_preprint_orphan": true,
                      "license_record": null,
                      "tags": [],
                      "preprint_doi_created": "2024-07-24T13:19:10.777018Z",
                      "date_withdrawn": null,
                      "current_user_permissions": [],
                      "public": true,
                      "reviews_state": "accepted",
                      "date_last_transitioned": "2024-07-24T13:19:10.768264Z",
                      "has_coi": null,
                      "conflict_of_interest_statement": null,
                      "has_data_links": null,
                      "why_no_data": null,
                      "data_links": null,
                      "has_prereg_links": null,
                      "why_no_prereg": null,
                      "prereg_links": null,
                      "prereg_link_info": null
                    },
                    "type": "preprints",
                    "id": "hqb2p"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/preprints/?page=172",
                  "prev": null,
                  "next": "https://api.osf.io/v2/preprints/?page=2",
                  "meta": {
                    "total": 1720,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a preprint",
        "description": "Creates a new preprint.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Preprint",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the preprint entity (`preprints`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the preprint entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_published": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the preprint."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the preprint."
                    },
                    "is_preprint_orphan": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                    },
                    "license_record": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                    },
                    "tags": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The tags given to a preprint."
                    },
                    "preprint_doi_created": {
                      "type": "string",
                      "readOnly": false,
                      "description": "When the preprint DOI was created."
                    },
                    "date_withdrawn": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                    },
                    "current_user_permissions": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The list of permissions the current user has."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "The wheter the preprint is public."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The a label to indicate the state of review a preprint is in."
                    },
                    "date_last_transitioned": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The date the reviews state of the preprint changed."
                    },
                    "has_coi": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A value indicating whether the preprint has a conflict of interest statement.",
                      "enum": [
                        true,
                        false,
                        null
                      ]
                    },
                    "conflict_of_interest_statement": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The text of the conflict of interest statement for the preprint."
                    },
                    "has_data_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A value indicating whether the preprint has a links to data.",
                      "enum": [
                        "no",
                        "available",
                        "not_applicable",
                        null
                      ]
                    },
                    "why_no_data": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A value for a field explaining why preregistration data was not included."
                    },
                    "data_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Any links to a preprints supplemental data go here.",
                      "enum": [
                        "available",
                        "no",
                        "not_applicable"
                      ]
                    },
                    "has_prereg_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A value indicating whether the preprint has any preregistration links.",
                      "enum": [
                        "available",
                        "no",
                        "not_applicable"
                      ]
                    },
                    "why_no_prereg": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A value for a field explaining why preregistration links weren't included."
                    },
                    "prereg_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Any links to a preprints preregistrations go here."
                    },
                    "prereg_link_info": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The text of the any explanation of preprint preregistration link infomation."
                    },
                    "version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Preprint version"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                  "required": [
                    "node",
                    "primary_file",
                    "provider"
                  ],
                  "properties": {
                    "contributors": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                    },
                    "bibliographic_contributors": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the citation of the preprint."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the identifiers associated with the preprint."
                    },
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the license that has been applied to the preprint."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to files of the preprint."
                    },
                    "review_actions": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the review actions made of that preprint."
                    },
                    "requests": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the requests for sanction changes that was made to the preprint."
                    },
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    },
                    "subjects": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the academic subjects for the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the preprint entity.",
                  "properties": {
                    "iri": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation preprint of the OSF."
                    },
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                    },
                    "preprint_doi": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation of the OSF assigned DOI for the preprint."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "attributes": {},
                  "relationships": {
                    "node": {
                      "data": {
                        "type": "nodes",
                        "id": "{node_id}"
                      }
                    },
                    "primary_file": {
                      "data": {
                        "type": "primary_files",
                        "id": "{primary_file_id}"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "{provider_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Preprint",
        "responses": {
          "201": {
            "description": "Success"
          }
        }
      }
    },
    "/preprints/{preprint_id}/versions/": {
      "get": {
        "summary": "List preprint versions",
        "description": "\nA paginated list of all preprint versions for requested preprint. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of preprint versions. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "versioned_preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the preprint."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the preprint."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "tags": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The tags given to a preprint."
                      },
                      "preprint_doi_created": {
                        "type": "string",
                        "readOnly": false,
                        "description": "When the preprint DOI was created."
                      },
                      "date_withdrawn": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                      },
                      "current_user_permissions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The list of permissions the current user has."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The wheter the preprint is public."
                      },
                      "reviews_state": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The a label to indicate the state of review a preprint is in."
                      },
                      "date_last_transitioned": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The date the reviews state of the preprint changed."
                      },
                      "has_coi": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a conflict of interest statement.",
                        "enum": [
                          true,
                          false,
                          null
                        ]
                      },
                      "conflict_of_interest_statement": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the conflict of interest statement for the preprint."
                      },
                      "has_data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a links to data.",
                        "enum": [
                          "no",
                          "available",
                          "not_applicable",
                          null
                        ]
                      },
                      "why_no_data": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration data was not included."
                      },
                      "data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints supplemental data go here.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "has_prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has any preregistration links.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "why_no_prereg": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration links weren't included."
                      },
                      "prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints preregistrations go here."
                      },
                      "prereg_link_info": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the any explanation of preprint preregistration link infomation."
                      },
                      "version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Preprint version"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                      },
                      "bibliographic_contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to files of the preprint."
                      },
                      "review_actions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the review actions made of that preprint."
                      },
                      "requests": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the requests for sanction changes that was made to the preprint."
                      },
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "subjects": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the academic subjects for the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "iri": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation preprint of the OSF."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "hqb2p_v1",
                    "type": "preprints",
                    "attributes": {
                      "date_created": "2017-02-03T06:16:57.129000Z",
                      "date_modified": "2018-07-02T10:51:03.451486Z",
                      "date_published": "2017-02-03T06:18:59.788000Z",
                      "original_publication_date": null,
                      "custom_publication_citation": null,
                      "doi": null,
                      "title": "Sow the wind",
                      "reap the whirlwind? Mobilization cascades in direct democratic initiatives": null,
                      "description": "Caveat emptor: I have retired this manuscript. I will not improve on it any more, and it will not be published in a peer-reviewed journal.\n\nThis paper explores the possibility of mobilization cascades in direct democratic popular initiatives. A mobilization cascade is a salience-based mobilizing effect whereby one popular initiative has a positive mobilizing effect on a subsequent popular initiative that deals with with a similar policy issue. The existence of a mobilization cascade would imply that voters develop salience for and positive attitudes towards policy issues merely through direct-democratic exposure to those policy issues in the recent past. In order to explore the mobilization cascade, I analyze three popular initiative pairs from Switzerland from the years 2012, 2013 and 2014. In each year, two initiatives dealt with similar policy issues, and the second initiative in each pair was making more far-reaching demands. The results suggest that a mobilization cascade might exist, but that it is probably a weak effect.",
                      "is_published": true,
                      "is_preprint_orphan": false,
                      "license_record": {
                        "copyright_holders": [],
                        "year": 2017
                      },
                      "tags": [
                        "ballot measures",
                        "direct democracy",
                        "mobilization",
                        "public opinion",
                        "switzerland"
                      ],
                      "preprint_doi_created": "2018-07-02T10:51:03.442Z",
                      "date_withdrawn": null,
                      "current_user_permissions": [],
                      "public": true,
                      "reviews_state": "accepted",
                      "date_last_transitioned": "2017-02-03T06:18:59.788Z",
                      "version": 1,
                      "is_latest_version": true,
                      "has_coi": null,
                      "conflict_of_interest_statement": null,
                      "has_data_links": null,
                      "why_no_data": null,
                      "data_links": null,
                      "has_prereg_links": null,
                      "why_no_prereg": null,
                      "prereg_links": null,
                      "prereg_link_info": null
                    },
                    "relationships": {
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/citation/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "hqb2p_v1",
                          "type": "citation"
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5xuck/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/node/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5xuck",
                          "type": "nodes"
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "563c1cf88c5e4a3877f9e96a",
                          "type": "licenses"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/preprints/socarxiv/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "socarxiv",
                          "type": "preprint-providers"
                        }
                      },
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/files/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/5894204f594d900200ed23f2/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5894204f594d900200ed23f2",
                          "type": "files"
                        }
                      },
                      "review_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/review_actions/",
                            "meta": {}
                          }
                        }
                      },
                      "requests": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/requests/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/institutions/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/hqb2p_v1/",
                      "html": "https://osf.io/preprints/socarxiv/hqb2p_v1/",
                      "preprint_versions": "https://api.osf.io/v2/preprints/hqb2p_v1/versions/",
                      "preprint_doi": "https://doi.org/10.31235/osf.io/hqb2p",
                      "iri": "https://osf.io/hqb2p"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": 2.2
                },
                "links": {
                  "self": "https://api.osf.io/v2/preprints/hqb2p_v1/versions/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a preprint version",
        "description": "Creates a new preprint version from requested preprint.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Preprint",
        "responses": {
          "201": {
            "description": "Success",
            "examples": {
              "application/json": {
                "data": {
                  "id": "hqb2p_v1",
                  "type": "preprints",
                  "attributes": {
                    "date_created": "2017-02-03T06:16:57.129000Z",
                    "date_modified": "2018-07-02T10:51:03.451486Z",
                    "date_published": "2017-02-03T06:18:59.788000Z",
                    "original_publication_date": null,
                    "custom_publication_citation": null,
                    "doi": null,
                    "title": "Sow the wind, reap the whirlwind? Mobilization cascades in direct democratic initiatives",
                    "description": "Caveat emptor: I have retired this manuscript. I will not improve on it any more, and it will not be published in a peer-reviewed journal.\n\nThis paper explores the possibility of mobilization cascades in direct democratic popular initiatives. A mobilization cascade is a salience-based mobilizing effect whereby one popular initiative has a positive mobilizing effect on a subsequent popular initiative that deals with with a similar policy issue. The existence of a mobilization cascade would imply that voters develop salience for and positive attitudes towards policy issues merely through direct-democratic exposure to those policy issues in the recent past. In order to explore the mobilization cascade, I analyze three popular initiative pairs from Switzerland from the years 2012, 2013 and 2014. In each year, two initiatives dealt with similar policy issues, and the second initiative in each pair was making more far-reaching demands. The results suggest that a mobilization cascade might exist, but that it is probably a weak effect.",
                    "is_published": true,
                    "is_preprint_orphan": false,
                    "license_record": {
                      "copyright_holders": [],
                      "year": "2017"
                    },
                    "tags": [
                      "ballot measures",
                      "direct democracy",
                      "mobilization",
                      "public opinion",
                      "switzerland"
                    ],
                    "preprint_doi_created": "2018-07-02T10:51:03.442224Z",
                    "date_withdrawn": null,
                    "current_user_permissions": [],
                    "public": true,
                    "reviews_state": "accepted",
                    "date_last_transitioned": "2017-02-03T06:18:59.788000Z",
                    "version": 1,
                    "is_latest_version": true,
                    "has_coi": null,
                    "conflict_of_interest_statement": null,
                    "has_data_links": null,
                    "why_no_data": null,
                    "data_links": null,
                    "has_prereg_links": null,
                    "why_no_prereg": null,
                    "prereg_links": null,
                    "prereg_link_info": null
                  },
                  "relationships": {
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "bibliographic_contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/bibliographic_contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "citation": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/citation/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "hqb2p_v1",
                        "type": "citation"
                      }
                    },
                    "identifiers": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/identifiers/",
                          "meta": {}
                        }
                      }
                    },
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/5xuck/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/node/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "5xuck",
                        "type": "nodes"
                      }
                    },
                    "license": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "563c1cf88c5e4a3877f9e96a",
                        "type": "licenses"
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/providers/preprints/socarxiv/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "socarxiv",
                        "type": "preprint-providers"
                      }
                    },
                    "files": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/files/",
                          "meta": {}
                        }
                      }
                    },
                    "primary_file": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/5894204f594d900200ed23f2/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "5894204f594d900200ed23f2",
                        "type": "files"
                      }
                    },
                    "review_actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/review_actions/",
                          "meta": {}
                        }
                      }
                    },
                    "requests": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/requests/",
                          "meta": {}
                        }
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/institutions/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/subjects/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/subjects/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/preprints/hqb2p_v1/",
                    "html": "https://osf.io/preprints/socarxiv/hqb2p_v1/",
                    "preprint_versions": "https://api.osf.io/v2/preprints/hqb2p_v1/versions/",
                    "preprint_doi": "https://doi.org/10.31235/osf.io/hqb2p",
                    "iri": "https://osf.io/hqb2p"
                  }
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/": {
      "get": {
        "summary": "Retrieve a preprint",
        "description": "Retrieves the details of a preprint.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_read",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Preprint",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the preprint entity (`preprints`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the preprint entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_published": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the preprint."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the preprint."
                    },
                    "is_preprint_orphan": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                    },
                    "license_record": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                    },
                    "tags": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The tags given to a preprint."
                    },
                    "preprint_doi_created": {
                      "type": "string",
                      "readOnly": false,
                      "description": "When the preprint DOI was created."
                    },
                    "date_withdrawn": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                    },
                    "current_user_permissions": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The list of permissions the current user has."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "The wheter the preprint is public."
                    },
                    "reviews_state": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The a label to indicate the state of review a preprint is in."
                    },
                    "date_last_transitioned": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The date the reviews state of the preprint changed."
                    },
                    "has_coi": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A value indicating whether the preprint has a conflict of interest statement.",
                      "enum": [
                        true,
                        false,
                        null
                      ]
                    },
                    "conflict_of_interest_statement": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The text of the conflict of interest statement for the preprint."
                    },
                    "has_data_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A value indicating whether the preprint has a links to data.",
                      "enum": [
                        "no",
                        "available",
                        "not_applicable",
                        null
                      ]
                    },
                    "why_no_data": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A value for a field explaining why preregistration data was not included."
                    },
                    "data_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Any links to a preprints supplemental data go here.",
                      "enum": [
                        "available",
                        "no",
                        "not_applicable"
                      ]
                    },
                    "has_prereg_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A value indicating whether the preprint has any preregistration links.",
                      "enum": [
                        "available",
                        "no",
                        "not_applicable"
                      ]
                    },
                    "why_no_prereg": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "A value for a field explaining why preregistration links weren't included."
                    },
                    "prereg_links": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Any links to a preprints preregistrations go here."
                    },
                    "prereg_link_info": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The text of the any explanation of preprint preregistration link infomation."
                    },
                    "version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Preprint version"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                  "required": [
                    "node",
                    "primary_file",
                    "provider"
                  ],
                  "properties": {
                    "contributors": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                    },
                    "bibliographic_contributors": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the citation of the preprint."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the identifiers associated with the preprint."
                    },
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "license": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the license that has been applied to the preprint."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to files of the preprint."
                    },
                    "review_actions": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the review actions made of that preprint."
                    },
                    "requests": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the requests for sanction changes that was made to the preprint."
                    },
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    },
                    "subjects": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the academic subjects for the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the preprint entity.",
                  "properties": {
                    "iri": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation preprint of the OSF."
                    },
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                    },
                    "preprint_doi": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL representation of the OSF assigned DOI for the preprint."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "attributes": {},
                  "relationships": {
                    "node": {
                      "data": {
                        "type": "nodes",
                        "id": "{node_id}"
                      }
                    },
                    "primary_file": {
                      "data": {
                        "type": "primary_files",
                        "id": "{primary_file_id}"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "{provider_id}"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "hqb2p_v1",
                  "type": "preprints",
                  "attributes": {
                    "date_created": "2017-02-03T06:16:57.129000Z",
                    "date_modified": "2018-07-02T10:51:03.451486Z",
                    "date_published": "2017-02-03T06:18:59.788000Z",
                    "original_publication_date": null,
                    "custom_publication_citation": null,
                    "doi": null,
                    "title": "Sow the wind, reap the whirlwind? Mobilization cascades in direct democratic initiatives",
                    "description": "Caveat emptor: I have retired this manuscript. I will not improve on it any more, and it will not be published in a peer-reviewed journal.\n\nThis paper explores the possibility of mobilization cascades in direct democratic popular initiatives. A mobilization cascade is a salience-based mobilizing effect whereby one popular initiative has a positive mobilizing effect on a subsequent popular initiative that deals with with a similar policy issue. The existence of a mobilization cascade would imply that voters develop salience for and positive attitudes towards policy issues merely through direct-democratic exposure to those policy issues in the recent past. In order to explore the mobilization cascade, I analyze three popular initiative pairs from Switzerland from the years 2012, 2013 and 2014. In each year, two initiatives dealt with similar policy issues, and the second initiative in each pair was making more far-reaching demands. The results suggest that a mobilization cascade might exist, but that it is probably a weak effect.",
                    "is_published": true,
                    "is_preprint_orphan": false,
                    "license_record": {
                      "copyright_holders": [],
                      "year": "2017"
                    },
                    "tags": [
                      "ballot measures",
                      "direct democracy",
                      "mobilization",
                      "public opinion",
                      "switzerland"
                    ],
                    "preprint_doi_created": "2018-07-02T10:51:03.442224Z",
                    "date_withdrawn": null,
                    "current_user_permissions": [],
                    "public": true,
                    "reviews_state": "accepted",
                    "date_last_transitioned": "2017-02-03T06:18:59.788000Z",
                    "version": 1,
                    "is_latest_version": true,
                    "has_coi": null,
                    "conflict_of_interest_statement": null,
                    "has_data_links": null,
                    "why_no_data": null,
                    "data_links": null,
                    "has_prereg_links": null,
                    "why_no_prereg": null,
                    "prereg_links": null,
                    "prereg_link_info": null
                  },
                  "relationships": {
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "bibliographic_contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/bibliographic_contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "citation": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/citation/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "hqb2p_v1",
                        "type": "citation"
                      }
                    },
                    "identifiers": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/identifiers/",
                          "meta": {}
                        }
                      }
                    },
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/5xuck/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/node/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "5xuck",
                        "type": "nodes"
                      }
                    },
                    "license": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "563c1cf88c5e4a3877f9e96a",
                        "type": "licenses"
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/providers/preprints/socarxiv/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "socarxiv",
                        "type": "preprint-providers"
                      }
                    },
                    "files": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/files/",
                          "meta": {}
                        }
                      }
                    },
                    "primary_file": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/5894204f594d900200ed23f2/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "5894204f594d900200ed23f2",
                        "type": "files"
                      }
                    },
                    "review_actions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/review_actions/",
                          "meta": {}
                        }
                      }
                    },
                    "requests": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/requests/",
                          "meta": {}
                        }
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/institutions/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/subjects/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/preprints/hqb2p_v1/relationships/subjects/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/preprints/hqb2p_v1/",
                    "html": "https://osf.io/preprints/socarxiv/hqb2p_v1/",
                    "preprint_versions": "https://api.osf.io/v2/preprints/hqb2p_v1/versions/",
                    "preprint_doi": "https://doi.org/10.31235/osf.io/hqb2p",
                    "iri": "https://osf.io/hqb2p"
                  }
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a preprint",
        "description": "Updates the specified preprint by setting the values of the parameters passed. Any parameters not provided will be left unchanged.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated preprint, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint."
          },
          {
            "in": "body",
            "required": true,
            "name": "data",
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "id": "{preprint_id}",
                  "attributes": {
                    "doi": "{doi}"
                  },
                  "relationships": {
                    "primary_file": {
                      "data": {
                        "type": "primary_files",
                        "id": "{file_id}"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_partial_update",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/preprints/{preprint_id}/citation/": {
      "get": {
        "summary": "Retrieve citation details",
        "description": "The citation details for a preprint, in CSL format.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the preprint citation.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "preprint_id",
            "description": "The unique identifier of the preprint whose citation you wish to retrieve."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_citation_list",
        "x-response-schema": "Citation Detail",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "Citation Detail",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the entity being cited."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation entity.",
                  "properties": {
                    "author": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The DOI for the entity being cited, if one exists."
                    },
                    "publisher": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the entity being cited."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the entity that is being cited."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "osf.io/khbvy"
                  },
                  "attributes": {
                    "publisher": "Open Science Framework",
                    "author": [
                      {
                        "given": "Mallory",
                        "family": "Kidwell"
                      },
                      {
                        "given": "Ljiljana B",
                        "family": "Lazarevic"
                      },
                      {
                        "given": "Erica",
                        "family": "Baranski"
                      },
                      {
                        "given": "Tom E",
                        "family": "Hardwicke"
                      },
                      {
                        "given": "Sarah",
                        "family": "Piechowski"
                      },
                      {
                        "given": "Lina-Sophia",
                        "family": "Falkenberg"
                      },
                      {
                        "given": "Curtis A",
                        "family": "Kennett"
                      },
                      {
                        "given": "Agnieszka",
                        "family": "Slowik"
                      },
                      {
                        "given": "Carina",
                        "family": "Sonnleitner"
                      },
                      {
                        "given": "Chelsey L",
                        "family": "Hess-Holden"
                      },
                      {
                        "given": "Timothy M",
                        "family": "Errington"
                      },
                      {
                        "given": "Susann",
                        "family": "Fiedler"
                      },
                      {
                        "given": "Brian A",
                        "family": "Nosek"
                      }
                    ],
                    "type": "webpage",
                    "title": "Badges to Acknowledge Open Practices: A Simple, Low-Cost, Effective Method for Increasing Transparency"
                  },
                  "type": "preprint-citation",
                  "id": "khbvy"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/citation/{style_id}/": {
      "get": {
        "summary": "Retrieve a styled citation",
        "description": "The citation for a preprint in a specific style.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the preprint citation, in the requested style.",
        "parameters": [
          {
            "description": "The unique identifier of the citation style.",
            "required": true,
            "type": "string",
            "name": "style_id",
            "in": "path"
          },
          {
            "description": "The unique identifier of the preprint.",
            "required": true,
            "type": "string",
            "name": "preprint_id",
            "in": "path"
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_citation_read",
        "x-response-schema": "Styled Citation",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "title": "Styled Citation",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the citation style, e.g. APA."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation style entity (`styled-citations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation style entity.",
                  "properties": {
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The complete entity citation in the requested style."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {},
                  "attributes": {
                    "citation": "Kidwell, M., Lazarevic, L. B., Baranski, E., Hardwicke, T. E., Piechowski, S., Falkenberg, L.-S., … Nosek, B. A. (2016, August 29). Badges to Acknowledge Open Practices: A Simple, Low-Cost, Effective Method for Increasing Transparency. http://doi.org/10.1371/journal.pbio.1002456"
                  },
                  "type": "styled-citations",
                  "id": "apa"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/contributors/": {
      "get": {
        "summary": "List all Contributors for a Preprint",
        "description": "A paginated list of the Preprint's Contributors, sorted by their index.\n\nContributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of Contributors, the user relationship will not be exposed and the Contributor ID will be an empty string.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "preprint_id",
            "required": true,
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_contributors_list",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {preprint_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the Preprint. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of Preprint's contributors and in a Preprint's citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "bg8v7-fgvc6",
                    "type": "contributors",
                    "attributes": {
                      "index": 0,
                      "bibliographic": true,
                      "permission": "admin",
                      "unregistered_contributor": null
                    },
                    "relationships": {
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/fgvc6/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "fgvc6",
                          "type": "users"
                        }
                      },
                      "preprint": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/bg8v7/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "bg8v7",
                          "type": "preprints"
                        }
                      }
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "id": "fgvc6",
                          "type": "users",
                          "attributes": {
                            "full_name": "Freddie Mercury0",
                            "given_name": "Freddie",
                            "middle_names": "",
                            "family_name": "Mercury0",
                            "suffix": "",
                            "date_registered": "2022-01-13T13:47:07.685511",
                            "active": true,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": [],
                            "can_view_reviews": [],
                            "accepted_terms_of_service": true
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/preprints/",
                                  "meta": {}
                                }
                              }
                            },
                            "emails": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/settings/emails/",
                                  "meta": {}
                                }
                              }
                            },
                            "default_region": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/regions/us/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/settings/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "fgvc6",
                                "type": "user-settings"
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/fgvc6/",
                            "profile_image": "https://secure.gravatar.com/avatar/a61b3827662ddbc604c78e1c8f6a3636?d=identicon",
                            "self": "https://api.osf.io/v2/users/fgvc6/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/bg8v7/contributors/fgvc6/"
                    }
                  },
                  {
                    "id": "bg8v7-faqpw",
                    "type": "contributors",
                    "attributes": {
                      "index": 1,
                      "bibliographic": true,
                      "permission": "write",
                      "unregistered_contributor": null
                    },
                    "relationships": {
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/faqpw/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "faqpw",
                          "type": "users"
                        }
                      },
                      "preprint": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/bg8v7/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "bg8v7",
                          "type": "preprints"
                        }
                      }
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "id": "faqpw",
                          "type": "users",
                          "attributes": {
                            "full_name": "Freddie Mercury1",
                            "given_name": "Freddie",
                            "middle_names": "",
                            "family_name": "Mercury1",
                            "suffix": "",
                            "date_registered": "2022-05-04T19:39:33.138339",
                            "active": true,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/faqpw/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/faqpw/",
                            "profile_image": "https://secure.gravatar.com/avatar/c9ac5d6cc7964ba7eb2bb96f877bc983?d=identicon",
                            "self": "https://api.osf.io/v2/users/faqpw/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/bg8v7/contributors/faqpw/"
                    }
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10,
                    "total_bibliographic": 2
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Contributor",
        "description": "Adds a contributor to a Preprint, effectively creating a relationship between the Preprint and a user.\n\nContributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\" contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n#### Permissions\nOnly project administrators can add contributors to a Preprint.\n#### Required\nA relationship object with a `data` key, containing the `users` type and valid user ID is required.\n\nAll attributes describing the relationship between the Preprint and the user are optional.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the new contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "preprint_id",
            "required": true,
            "description": "The unique identifier of the Preprint."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Contributor",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the contributor entity. Contributor identifiers have the form {preprint_id}-{user_id}."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the contributor entity (`contributors`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the contributor entity.",
                  "properties": {
                    "bibliographic": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the contributor will be included in citations for the Preprint. The default value is true."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The position of this contributor in the list of Preprint's contributors and in a Preprint's citations."
                    },
                    "permission": {
                      "type": "string",
                      "enum": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "readOnly": false,
                      "description": "The permission level of the contributor. The default value is 'write'."
                    },
                    "unregistered_contributor": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                  "required": [
                    "node",
                    "user"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the contributor entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for the contributor."
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_contributors_create",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success",
            "examples": {
              "application/json": {
                "data": {
                  "id": "bg8v7-faqpw",
                  "type": "contributors",
                  "attributes": {
                    "index": 1,
                    "bibliographic": true,
                    "permission": "write",
                    "unregistered_contributor": null
                  },
                  "relationships": {
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/faqpw/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "faqpw",
                        "type": "users"
                      }
                    },
                    "preprint": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/bg8v7/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "bg8v7",
                        "type": "preprints"
                      }
                    }
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "id": "faqpw",
                        "type": "users",
                        "attributes": {
                          "full_name": "Freddie Mercury1",
                          "given_name": "Freddie",
                          "middle_names": "",
                          "family_name": "Mercury1",
                          "suffix": "",
                          "date_registered": "2022-05-04T19:39:33.138339",
                          "active": true,
                          "timezone": "Etc/UTC",
                          "locale": "en_US",
                          "social": {},
                          "employment": [],
                          "education": []
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "https://api.osf.io/v2/users/faqpw/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/preprints/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://osf.io/faqpw/",
                          "profile_image": "https://secure.gravatar.com/avatar/c9ac5d6cc7964ba7eb2bb96f877bc983?d=identicon",
                          "self": "https://api.osf.io/v2/users/faqpw/"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/preprints/bg8v7/contributors/faqpw/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/contributors/{user_id}/": {
      "get": {
        "summary": "Retrieve a contributor",
        "description": "Retrieves the details of a contributor on this Preprint.\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "preprint_id",
            "required": true,
            "description": "The unique identifier of the Preprint."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_contributor_read",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "bg8v7-faqpw",
                  "type": "contributors",
                  "attributes": {
                    "index": 1,
                    "bibliographic": true,
                    "permission": "write",
                    "unregistered_contributor": null
                  },
                  "relationships": {
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/faqpw/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "faqpw",
                        "type": "users"
                      }
                    },
                    "preprint": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprints/bg8v7/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "bg8v7",
                        "type": "preprints"
                      }
                    }
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "id": "faqpw",
                        "type": "users",
                        "attributes": {
                          "full_name": "Freddie Mercury1",
                          "given_name": "Freddie",
                          "middle_names": "",
                          "family_name": "Mercury1",
                          "suffix": "",
                          "date_registered": "2022-05-04T19:39:33.138339",
                          "active": true,
                          "timezone": "Etc/UTC",
                          "locale": "en_US",
                          "social": {},
                          "employment": [],
                          "education": []
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "https://api.osf.io/v2/users/faqpw/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/faqpw/preprints/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://osf.io/faqpw/",
                          "profile_image": "https://secure.gravatar.com/avatar/c9ac5d6cc7964ba7eb2bb96f877bc983?d=identicon",
                          "self": "https://api.osf.io/v2/users/faqpw/"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/preprints/bg8v7/contributors/faqpw/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/bibliographic_contributors/": {
      "get": {
        "summary": "List all Bibliographic Contributors",
        "description": "A paginated list of the Preprint's Bibliographic Contributors, sorted by their index.\nContributors are users who can make changes to the Preprint. Contributors with WRITE permissions may edit preprint details, and ADMIN Contributors may add or remove other Contributors.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 contributors. Each resource in the array contains the full representation of the contributor, meaning additional requests to a contributor's detail view are not necessary. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "preprint_id",
            "required": true,
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_bibliographic_contributors_list",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {preprint_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the Preprint. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of Preprint's contributors and in a Preprint's citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "bg8v7-fgvc6",
                    "type": "contributors",
                    "attributes": {
                      "index": 0,
                      "bibliographic": true,
                      "permission": "admin",
                      "unregistered_contributor": null
                    },
                    "relationships": {
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/fgvc6/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "fgvc6",
                          "type": "users"
                        }
                      },
                      "preprint": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/bg8v7/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "bg8v7",
                          "type": "preprints"
                        }
                      }
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "id": "fgvc6",
                          "type": "users",
                          "attributes": {
                            "full_name": "Freddie Mercury0",
                            "given_name": "Freddie",
                            "middle_names": "",
                            "family_name": "Mercury0",
                            "suffix": "",
                            "date_registered": "2022-01-13T13:47:07.685511",
                            "active": true,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": [],
                            "can_view_reviews": [],
                            "accepted_terms_of_service": true
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/preprints/",
                                  "meta": {}
                                }
                              }
                            },
                            "emails": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/settings/emails/",
                                  "meta": {}
                                }
                              }
                            },
                            "default_region": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/regions/us/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/fgvc6/settings/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "fgvc6",
                                "type": "user-settings"
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/fgvc6/",
                            "profile_image": "https://secure.gravatar.com/avatar/a61b3827662ddbc604c78e1c8f6a3636?d=identicon",
                            "self": "https://api.osf.io/v2/users/fgvc6/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/bg8v7/contributors/fgvc6/"
                    }
                  },
                  {
                    "id": "bg8v7-faqpw",
                    "type": "contributors",
                    "attributes": {
                      "index": 1,
                      "bibliographic": true,
                      "permission": "write",
                      "unregistered_contributor": null
                    },
                    "relationships": {
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/faqpw/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "faqpw",
                          "type": "users"
                        }
                      },
                      "preprint": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/bg8v7/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "bg8v7",
                          "type": "preprints"
                        }
                      }
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "id": "faqpw",
                          "type": "users",
                          "attributes": {
                            "full_name": "Freddie Mercury1",
                            "given_name": "Freddie",
                            "middle_names": "",
                            "family_name": "Mercury1",
                            "suffix": "",
                            "date_registered": "2022-05-04T19:39:33.138339",
                            "active": true,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/faqpw/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/faqpw/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/faqpw/",
                            "profile_image": "https://secure.gravatar.com/avatar/c9ac5d6cc7964ba7eb2bb96f877bc983?d=identicon",
                            "self": "https://api.osf.io/v2/users/faqpw/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/bg8v7/contributors/faqpw/"
                    }
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10,
                    "total_bibliographic": 2
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/institutions/": {
      "get": {
        "summary": "List all Institutional Affilations for a Preprint",
        "description": "A paginated list of the Preprint's Institutions, sorted by their index.\nInstitutions are organizations affiliated with the Preprint. Contributors may be associated with one or more institutions.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of institutions. Each resource in the array contains the full representation of the institution, meaning additional requests to an institution's detail view are not necessary. Additionally, the full representation of the institution is automatically embedded within the `data` key of the response.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include institutions that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/institutions/?filter[name]=example.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "preprint_id",
            "required": true,
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the preprint."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the preprint."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "tags": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The tags given to a preprint."
                      },
                      "preprint_doi_created": {
                        "type": "string",
                        "readOnly": false,
                        "description": "When the preprint DOI was created."
                      },
                      "date_withdrawn": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                      },
                      "current_user_permissions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The list of permissions the current user has."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The wheter the preprint is public."
                      },
                      "reviews_state": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The a label to indicate the state of review a preprint is in."
                      },
                      "date_last_transitioned": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The date the reviews state of the preprint changed."
                      },
                      "has_coi": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a conflict of interest statement.",
                        "enum": [
                          true,
                          false,
                          null
                        ]
                      },
                      "conflict_of_interest_statement": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the conflict of interest statement for the preprint."
                      },
                      "has_data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a links to data.",
                        "enum": [
                          "no",
                          "available",
                          "not_applicable",
                          null
                        ]
                      },
                      "why_no_data": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration data was not included."
                      },
                      "data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints supplemental data go here.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "has_prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has any preregistration links.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "why_no_prereg": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration links weren't included."
                      },
                      "prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints preregistrations go here."
                      },
                      "prereg_link_info": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the any explanation of preprint preregistration link infomation."
                      },
                      "version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Preprint version"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                      },
                      "bibliographic_contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to files of the preprint."
                      },
                      "review_actions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the review actions made of that preprint."
                      },
                      "requests": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the requests for sanction changes that was made to the preprint."
                      },
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "subjects": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the academic subjects for the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "iri": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation preprint of the OSF."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "department_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/metrics/departments/",
                            "meta": {}
                          }
                        }
                      },
                      "users_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/metrics/users/",
                            "meta": {}
                          }
                        }
                      },
                      "summary_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/metrics/sumary/",
                            "meta": {}
                          },
                          "data": {
                            "id": "cos",
                            "type": "institution-summary-metrics"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/cos/"
                    },
                    "attributes": {
                      "name": "Center For Open Science",
                      "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>.",
                      "iri": "http://www.test.edu",
                      "ror_iri": "https://ror.org/000000000",
                      "iris": [
                        "https://ror.org/000000000",
                        "http://www.test.edu/",
                        "https://osf.io/institutions/test/"
                      ],
                      "assets": {
                        "logo": "https://storage.test.com/test-shield.png",
                        "logo_rounded": "https://storage.test.com/test-shield-rounded-corners.png",
                        "banner": "https://storage.test.com/test-banner.png"
                      }
                    }
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "prev": null,
                  "next": "https://api.osf.io/v2/institutions/cos/nodes/?page=2",
                  "meta": {
                    "total": 15,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/relationships/institutions/": {
      "get": {
        "summary": "List all Institutions for a Preprint",
        "description": "A paginated list of the Preprint's Institutions, sorted by their index.\nInstitutions are organizations affiliated with the Preprint. Contributors may be associated with one or more institutions.\nNote that if an anonymous view_only key is being used to view the list of Institutions, the institution relationship will not be exposed and the Institution ID will be an empty string.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of institutions. Each resource in the array contains the full representation of the institution, meaning additional requests to an institution's detail view are not necessary. Additionally, the full representation of the institution is automatically embedded within the `data` key of the response.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include institutions that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprints/y9jdt/institutions/?filter[name]=example.\n",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "preprint_id",
            "required": true,
            "description": "The unique identifier of the preprint."
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_institutions_relation_get",
        "x-response-schema": "Institution",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "668d6b40ef52ae0008dabe64"
                  },
                  {
                    "type": "institutions",
                    "id": "668d6b41ef52ae0008dabe65"
                  },
                  {
                    "type": "institutions",
                    "id": "668d6b41ef52ae0008dabe66"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/preprints/985s7/",
                  "html": "https://api.osf.io/v2/preprints/985s7/institutions/"
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a Preprints Institutional Affilation",
        "description": "Updates an institution affilation to a Preprint, effectively creating or removing a relationship between the Preprint and that user's affilation to the Preprint.\n#### Required\nA relationship object with a `data` key, containing the `institutions` type and valid institution ID is required.\nAll attributes describing the relationship between the Preprint and the institution are optional.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the new institution, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "preprint_id",
            "required": true,
            "description": "The unique identifier of the Preprint."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "institution",
                    "id": "668d6b40ef52ae0008dabe64"
                  },
                  {
                    "type": "institution",
                    "id": "668d6b40ef52ae0008dabe65"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Preprints"
        ],
        "operationId": "preprints_institutions_create",
        "x-response-schema": "Institution",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "type": "object",
              "title": "Institution",
              "required": [
                "type",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Institution."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the Institution (`institution`)."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "668d6b40ef52ae0008dabe64"
                  },
                  {
                    "type": "institutions",
                    "id": "668d6b41ef52ae0008dabe65"
                  },
                  {
                    "type": "institutions",
                    "id": "668d6b41ef52ae0008dabe66"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/preprints/985s7/",
                  "html": "https://api.osf.io/v2/preprints/985s7/institutions/"
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/preprints/{preprint_id}/files/": {
      "get": {
        "summary": "List storage providers for a preprint",
        "description": "Retrieve a list of storage providers for the specified preprint. Only \"osfstorage\" is supported for preprints.\n#### Permissions\n - Public storage providers are accessible to unauthenticated users.\n - Viewing non-public preprints requires appropriate permissions.",
        "tags": [
          "Preprints",
          "Files"
        ],
        "operationId": "preprint_storage_providers_list",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of storage providers.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The name of the storage provider.",
                        "example": "osfstorage"
                      },
                      "type": {
                        "type": "string",
                        "example": "storage-providers"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the storage provider.",
                            "example": "osfstorage"
                          },
                          "default": {
                            "type": "boolean",
                            "description": "Whether this provider is the default.",
                            "example": true
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "upload": {
                            "type": "string",
                            "description": "Upload URL for this storage provider."
                          },
                          "files": {
                            "type": "string",
                            "description": "Link to files within this storage provider."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "id": "osfstorage",
                    "type": "storage-providers",
                    "attributes": {
                      "name": "osfstorage",
                      "default": true
                    },
                    "links": {
                      "upload": "https://files.osf.io/v1/resources/abc12/providers/osfstorage/",
                      "files": "https://api.osf.io/v2/preprints/abc12/files/osfstorage/"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view storage providers for this preprint."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      }
    },
    "/preprints/{preprint_id}/files/osfstorage/": {
      "get": {
        "summary": "List files for a preprint in osfstorage",
        "description": "Retrieve a list of files stored in the `osfstorage` provider for the specified preprint. Only \"osfstorage\" is available for preprints.\n#### Permissions\n - Public files are accessible to unauthenticated users.\n - Viewing non-public files requires appropriate permissions.",
        "tags": [
          "Preprints",
          "Files"
        ],
        "operationId": "preprint_files_list",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of files in osfstorage.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The ID of the file.",
                        "example": "5b8df35e8c7d2e001d6fa3f9"
                      },
                      "type": {
                        "type": "string",
                        "example": "files"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the file.",
                            "example": "paper.pdf"
                          },
                          "kind": {
                            "type": "string",
                            "description": "Type of the file object ('file' or 'folder').",
                            "example": "file"
                          },
                          "size": {
                            "type": "integer",
                            "description": "Size of the file in bytes.",
                            "example": 102400
                          },
                          "modified": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Last modified date of the file.",
                            "example": "2023-09-01T12:00:00Z"
                          },
                          "contentType": {
                            "type": "string",
                            "description": "MIME type of the file.",
                            "example": "application/pdf"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "download": {
                            "type": "string",
                            "description": "URL to download the file."
                          },
                          "upload": {
                            "type": "string",
                            "description": "URL to upload new versions of the file."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "id": "5b8df35e8c7d2e001d6fa3f9",
                    "type": "files",
                    "attributes": {
                      "name": "paper.pdf",
                      "kind": "file",
                      "size": 102400,
                      "modified": "2023-09-01T12:00:00Z",
                      "contentType": "application/pdf"
                    },
                    "links": {
                      "download": "https://files.osf.io/v1/resources/abc12/providers/osfstorage/5b8df35e8c7d2e001d6fa3f9",
                      "upload": "https://files.osf.io/v1/resources/abc12/providers/osfstorage/5b8df35e8c7d2e001d6fa3f9"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view these files."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      }
    },
    "/preprints/{preprint_id}/identifiers/": {
      "get": {
        "summary": "List identifiers for a preprint",
        "description": "Retrieves a list of identifiers associated with the specified preprint. Identifiers include DOIs, ARKs, and other unique resource locators.\n#### Permissions\n - Public identifiers are accessible to unauthenticated users.\n - Private preprints require read access to view their identifiers.",
        "tags": [
          "Preprints",
          "Identifiers"
        ],
        "operationId": "preprint_identifiers_list",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of preprint identifiers.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The identifier value itself.",
                        "example": "doi:10.1234/osf.io/abcde"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of this resource object.",
                        "example": "identifiers"
                      },
                      "attributes": {
                        "type": "object",
                        "required": [
                          "category",
                          "value"
                        ],
                        "properties": {
                          "category": {
                            "type": "string",
                            "description": "The category of the identifier (e.g., DOI, ARK).",
                            "example": "doi"
                          },
                          "value": {
                            "type": "string",
                            "description": "The identifier value.",
                            "example": "10.1234/osf.io/abcde"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Links for pagination and resource access.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if available)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if available)."
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "id": "doi:10.1234/osf.io/abcde",
                    "type": "identifiers",
                    "attributes": {
                      "category": "doi",
                      "value": "10.1234/osf.io/abcde"
                    }
                  },
                  {
                    "id": "ark:/12345/osf.io/xyz12",
                    "type": "identifiers",
                    "attributes": {
                      "category": "ark",
                      "value": "ark:/12345/osf.io/xyz12"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/preprints/abc12/identifiers/",
                  "next": null,
                  "prev": null
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view identifiers for this preprint."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      }
    },
    "/preprints/{preprint_id}/relationships/node/": {
      "get": {
        "summary": "Retrieve the relationship to the supplemental node of the preprint",
        "description": "Retrieve a relationship object that points to the supplemental node associated with this preprint.\n#### Permissions\n - Public preprints will return their supplemental node if it exists.\n - Private preprints require the user to have read access.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprint_node_relationship_read",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the node relationship.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "Relationship to the supplemental node. Will be `null` if no node is linked.",
                  "type": "object",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The ID of the related node."
                    },
                    "type": {
                      "type": "string",
                      "example": "nodes"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to this relationship."
                    },
                    "related": {
                      "type": "string",
                      "description": "Link to the related node resource."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "abc12",
                  "type": "nodes"
                },
                "links": {
                  "self": "https://api.osf.io/v2/preprints/abc12/relationships/node/",
                  "related": "https://api.osf.io/v2/preprints/abc12/node/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view the supplemental node."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Update the relationship to the supplemental node of the preprint",
        "description": "Update the supplemental node relationship for the specified preprint.\n#### Permissions - Must have `write` permissions on both the preprint and the target node.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprint_node_relationship_update",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The relationship data for the supplemental node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "nodes"
                    },
                    "id": {
                      "type": "string",
                      "example": "abc12"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the supplemental node relationship.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type"
                  ],
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string",
                      "example": "nodes"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string"
                    },
                    "related": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The node ID may be invalid or missing."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to update this relationship."
          },
          "404": {
            "description": "Not Found. No preprint or node matches the given ID."
          }
        }
      },
      "delete": {
        "summary": "Remove the supplemental node relationship from the preprint",
        "description": "Remove the link between the preprint and its supplemental node.\n#### Permissions - Must have `write` permissions on the preprint.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprint_node_relationship_delete",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint."
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the supplemental node relationship."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify this relationship."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      }
    },
    "/preprints/{preprint_id}/requests/": {
      "post": {
        "summary": "Create a Preprint Request",
        "description": "Create a new request on the specified preprint.   Typically used for withdrawal requests.\n#### Permissions - Must be an admin contributor on the preprint to create a request.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprint_requests_create",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint to create a request for."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The request object to be created.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "preprint-requests"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "request_type",
                        "comment"
                      ],
                      "properties": {
                        "request_type": {
                          "type": "string",
                          "example": "withdrawal",
                          "description": "The type of request. Currently only `withdrawal` is supported."
                        },
                        "comment": {
                          "type": "string",
                          "description": "Comment explaining the reason for the request."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the preprint request.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier for this request."
                    },
                    "type": {
                      "type": "string",
                      "example": "preprint-requests"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "request_type",
                        "machine_state",
                        "comment",
                        "created",
                        "updated"
                      ],
                      "properties": {
                        "request_type": {
                          "type": "string"
                        },
                        "machine_state": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "creator": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "id",
                                "type"
                              ],
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "description": "The user who created the request."
                        },
                        "target": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "id",
                                "type"
                              ],
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "description": "The preprint targeted by this request."
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid input or missing fields."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to create a request."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      }
    },
    "/preprints/{preprint_id}/review_actions/": {
      "get": {
        "summary": "List Review Actions for a Preprint",
        "description": "Retrieve the list of review actions for the specified preprint.\nReview actions track state transitions and comments made during the review process.\n#### Permissions - Requires `view_actions` permission on the preprint's provider for full visibility. - Some actions (like moderator comments) may be hidden if the provider has restrictions.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprint_review_actions_list",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint whose review actions are being requested."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of review actions.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of this review action."
                      },
                      "type": {
                        "type": "string",
                        "example": "review-actions"
                      },
                      "attributes": {
                        "type": "object",
                        "required": [
                          "trigger",
                          "from_state",
                          "to_state",
                          "date_created",
                          "date_modified"
                        ],
                        "properties": {
                          "trigger": {
                            "type": "string",
                            "description": "The action that was triggered, e.g., \"accept\", \"reject\", \"withdraw\"."
                          },
                          "from_state": {
                            "type": "string",
                            "description": "The workflow state before this action."
                          },
                          "to_state": {
                            "type": "string",
                            "description": "The workflow state after this action."
                          },
                          "comment": {
                            "type": "string",
                            "description": "The comment added by the user performing the action."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date the action was created."
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date the action was last modified."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "creator": {
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID of the user who created the action."
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  }
                                }
                              }
                            }
                          },
                          "provider": {
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID of the preprint provider."
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "preprint_providers"
                                  }
                                }
                              }
                            }
                          },
                          "target": {
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "description": "The ID of the target preprint."
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "preprints"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "API link to the review action resource."
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Pagination or additional metadata."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "rwa1",
                    "type": "review-actions",
                    "attributes": {
                      "trigger": "accept",
                      "from_state": "pending",
                      "to_state": "accepted",
                      "comment": "Looks good.",
                      "date_created": "2023-05-10T14:00:00Z",
                      "date_modified": "2023-05-10T14:00:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "id": "abc123",
                          "type": "users"
                        }
                      },
                      "provider": {
                        "data": {
                          "id": "osf",
                          "type": "preprint_providers"
                        }
                      },
                      "target": {
                        "data": {
                          "id": "abc12",
                          "type": "preprints"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/abc12/review_actions/rwa1/"
                    }
                  },
                  {
                    "id": "rwa2",
                    "type": "review-actions",
                    "attributes": {
                      "trigger": "reject",
                      "from_state": "pending",
                      "to_state": "rejected",
                      "comment": "Needs more revisions.",
                      "date_created": "2023-06-15T10:30:00Z",
                      "date_modified": "2023-06-15T10:30:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "id": "mod456",
                          "type": "users"
                        }
                      },
                      "provider": {
                        "data": {
                          "id": "osf",
                          "type": "preprint_providers"
                        }
                      },
                      "target": {
                        "data": {
                          "id": "abc12",
                          "type": "preprints"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/abc12/review_actions/rwa2/"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view these review actions."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      }
    },
    "/preprints/{preprint_id}/subjects/": {
      "get": {
        "summary": "List Preprint Subjects",
        "description": "Retrieve the list of subjects (taxonomy terms) associated with a specific preprint.\n#### Permissions - Preprint subjects are publicly accessible for published preprints. - For unpublished preprints, you must have permission to view the preprint.",
        "tags": [
          "Preprints"
        ],
        "operationId": "preprint_subjects_list",
        "parameters": [
          {
            "name": "preprint_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the preprint whose subjects are being requested."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of preprint subjects.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the subject."
                      },
                      "type": {
                        "type": "string",
                        "example": "subjects"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "The name of the subject."
                          },
                          "parent": {
                            "type": "string",
                            "description": "The parent subject ID, if applicable."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "children": {
                            "type": "object",
                            "description": "Relationship to any child subjects.",
                            "properties": {
                              "data": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "type"
                                  ],
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The unique identifier of the child subject."
                                    },
                                    "type": {
                                      "type": "string",
                                      "example": "subjects"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "Link to the subject resource."
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Pagination or additional metadata."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "123",
                    "type": "subjects",
                    "attributes": {
                      "text": "Cognitive Psychology",
                      "parent": "45"
                    },
                    "relationships": {
                      "children": {
                        "data": [
                          {
                            "id": "124",
                            "type": "subjects"
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/abc12/subjects/123/"
                    }
                  },
                  {
                    "id": "124",
                    "type": "subjects",
                    "attributes": {
                      "text": "Developmental Psychology",
                      "parent": "123"
                    },
                    "relationships": {
                      "children": {
                        "data": []
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/abc12/subjects/124/"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view these subjects."
          },
          "404": {
            "description": "Not Found. No preprint matches the given ID."
          }
        }
      }
    },
    "/preprint_providers/": {
      "get": {
        "summary": "List all preprint providers",
        "description": "\nA paginated list of all preprint providers. The returned preprint providers are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include preprint providers that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprint_providers/?filter[id]=osf.\n\nPreprint Providers may be filtered by their `id`, `name`,  and `description`",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_list",
        "x-response-schema": "Preprint Provider",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Preprint Providers",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint provider entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the preprint provider entity.",
                  "properties": {
                    "social_instagram": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                    },
                    "advisory_board": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The HTML representation of the preprint provider's advisory board."
                    },
                    "email_support": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint providers's support email address."
                    },
                    "banner_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                    },
                    "logo_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                    },
                    "subjects_acceptable": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the preprint provider."
                    },
                    "social_facebook": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                    },
                    "email_contact": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                    },
                    "example": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The GUID for an example preprint from this preprint provider."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the preprint provider."
                    },
                    "domain": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                    },
                    "domain_redirect_enabled": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not redirects are enabled for the provider's domain."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                  "properties": {
                    "licenses_acceptable": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to licenses the preprint provider allows."
                    },
                    "taxonomies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the taxonomies the preprint provider allows."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the preprint entity.",
                  "properties": {
                    "external_url": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the external website for the preprint provider."
                    },
                    "preprints": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint provider."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "licenses_acceptable": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/licenses/",
                            "meta": {}
                          }
                        }
                      },
                      "taxonomies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/taxonomies/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprint_providers/osf/",
                      "preprints": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                      "external_url": "https://osf.io/preprints/"
                    },
                    "attributes": {
                      "social_instagram": "",
                      "advisory_board": "",
                      "email_support": "",
                      "banner_path": "/static/img/preprint_providers/cos-logo.png",
                      "logo_path": "/static/img/preprint_providers/cos-logo.png",
                      "subjects_acceptable": [],
                      "description": "A scholarly commons to connect the entire research cycle",
                      "social_facebook": "",
                      "header_text": "",
                      "social_twitter": "",
                      "email_contact": "",
                      "example": "khbvy",
                      "name": "Open Science Framework",
                      "domain": "osf.io"
                    },
                    "type": "preprint_providers",
                    "id": "osf"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{provider_id}/": {
      "get": {
        "summary": "Retrieve a preprint provider",
        "description": "Retrieves the details of a preprint provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested preprint provider, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Acceptable Subjects Structure\nEach preprint provider specifies acceptable subjects.\n`subjects_acceptable` is an array found in `attributes`.\nSubjects consist of general parent subjects (e.g., Engineering), more specific child subjects (e.g., Aerospace Engineering), and even more specific grandchild subjects (e.g., Aerodynamics and Fluid Mechanics). Subjects can only be nested 3 deep.\n\n\n    \"subjects_acceptable\": [\n        [\n            [\n                # Parent Subject:\n                # Architecture\n                \"584240d954be81056ceca9e5\",\n\n                # Child Subject:\n                # Architectural Engineering\n                \"584240da54be81056cecac87\"\n            ],\n            # Include all Architectural Engineering's children:\n            true\n        ],\n        [\n            [\n                # Parent Subject:\n                # Engineering\n                \"584240da54be81056cecaca9\",\n\n                # Child Subject:\n                # Aerospace Engineering\n                \"584240db54be81056cecacd6\",\n\n                # Grandchild Subject:\n                # Aerodynamics and Fluid Mechanics\n                \"584240da54be81056cecaa74\"\n            ],\n            # All nestings 3 deep must be false\n            false\n        ]\n    ]\n\nThe above structure would allow Architecture, Architectural Engineering, all of Architectural Engineering's children, Engineering, Aerospace Engineering, and Aerodynamics and Fluid Mechanics.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_detail",
        "x-response-schema": "Preprint Provider",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Preprint Providers",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint provider entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the preprint provider entity.",
                  "properties": {
                    "social_instagram": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                    },
                    "advisory_board": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The HTML representation of the preprint provider's advisory board."
                    },
                    "email_support": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint providers's support email address."
                    },
                    "banner_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                    },
                    "logo_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                    },
                    "subjects_acceptable": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the preprint provider."
                    },
                    "social_facebook": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                    },
                    "email_contact": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                    },
                    "example": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The GUID for an example preprint from this preprint provider."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the preprint provider."
                    },
                    "domain": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                    },
                    "domain_redirect_enabled": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not redirects are enabled for the provider's domain."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                  "properties": {
                    "licenses_acceptable": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to licenses the preprint provider allows."
                    },
                    "taxonomies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the taxonomies the preprint provider allows."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the preprint entity.",
                  "properties": {
                    "external_url": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the external website for the preprint provider."
                    },
                    "preprints": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint provider."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "licenses_acceptable": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprint_providers/osf/licenses/",
                          "meta": {}
                        }
                      }
                    },
                    "taxonomies": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprint_providers/osf/taxonomies/",
                          "meta": {}
                        }
                      }
                    },
                    "preprints": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/preprint_providers/osf/",
                    "preprints": "https://api.osf.io/v2/preprint_providers/osf/preprints/",
                    "external_url": "https://osf.io/preprints/"
                  },
                  "attributes": {
                    "social_instagram": "",
                    "advisory_board": "",
                    "email_support": "",
                    "banner_path": "/static/img/preprint_providers/cos-logo.png",
                    "logo_path": "/static/img/preprint_providers/cos-logo.png",
                    "subjects_acceptable": [],
                    "description": "A scholarly commons to connect the entire research cycle",
                    "social_facebook": "",
                    "header_text": "",
                    "social_twitter": "",
                    "email_contact": "",
                    "example": "khbvy",
                    "name": "Open Science Framework",
                    "domain": "osf.io"
                  },
                  "type": "preprint_providers",
                  "id": "osf"
                },
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 5,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{provider_id}/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "\nA paginated list of preprints from the specified preprint provider. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a separate preprint object.\n\nThe `links` key contains a dictionary with keys that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Filtering\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/preprint_providers/osf/preprints/?filter[is_published]=true.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_providers_preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the preprint."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the preprint."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "tags": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The tags given to a preprint."
                      },
                      "preprint_doi_created": {
                        "type": "string",
                        "readOnly": false,
                        "description": "When the preprint DOI was created."
                      },
                      "date_withdrawn": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                      },
                      "current_user_permissions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The list of permissions the current user has."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The wheter the preprint is public."
                      },
                      "reviews_state": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The a label to indicate the state of review a preprint is in."
                      },
                      "date_last_transitioned": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The date the reviews state of the preprint changed."
                      },
                      "has_coi": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a conflict of interest statement.",
                        "enum": [
                          true,
                          false,
                          null
                        ]
                      },
                      "conflict_of_interest_statement": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the conflict of interest statement for the preprint."
                      },
                      "has_data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a links to data.",
                        "enum": [
                          "no",
                          "available",
                          "not_applicable",
                          null
                        ]
                      },
                      "why_no_data": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration data was not included."
                      },
                      "data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints supplemental data go here.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "has_prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has any preregistration links.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "why_no_prereg": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration links weren't included."
                      },
                      "prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints preregistrations go here."
                      },
                      "prereg_link_info": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the any explanation of preprint preregistration link infomation."
                      },
                      "version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Preprint version"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                      },
                      "bibliographic_contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to files of the preprint."
                      },
                      "review_actions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the review actions made of that preprint."
                      },
                      "requests": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the requests for sanction changes that was made to the preprint."
                      },
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "subjects": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the academic subjects for the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "iri": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation preprint of the OSF."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5xuck/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/hqb2p/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/5894204f594d900200ed23f2/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/socarxiv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/hqb2p/",
                      "html": "https://osf.io/preprints/socarxiv/hqb2p/"
                    },
                    "attributes": {
                      "doi": null,
                      "license_record": {
                        "copyright_holders": [],
                        "year": "2017"
                      },
                      "date_modified": "2017-02-03T06:19:00.158000",
                      "is_preprint_orphan": false,
                      "date_published": "2017-02-03T06:18:59.788000",
                      "subjects": [
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Political Science",
                            "id": "584240da54be81056cecac1a"
                          }
                        ]
                      ],
                      "date_created": "2017-02-03T06:16:57.129000",
                      "is_published": true
                    },
                    "type": "preprints",
                    "id": "hqb2p"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/preprints/?page=172",
                  "prev": null,
                  "next": "https://api.osf.io/v2/preprints/?page=2",
                  "meta": {
                    "total": 1720,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{provider_id}/taxonomies/": {
      "get": {
        "summary": "List Taxonomies for a Preprint Provider",
        "description": "Retrieve a list of all taxonomies (subjects) associated with a specific preprint provider.\nThese taxonomies can be used to categorize and filter preprints submitted to this provider.\n#### Permissions - No authentication required for public providers. - Only authorized users can access restricted providers.\n#### Returns - A JSON object with a `data` key containing an array of taxonomy resources. - Each taxonomy represents a subject that can be assigned to preprints.",
        "tags": [
          "Preprint Providers",
          "Taxonomies"
        ],
        "operationId": "preprint_provider_taxonomies_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of taxonomies for the preprint provider.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Preprint Providers",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the preprint provider entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the preprint provider entity.",
                        "properties": {
                          "social_instagram": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                          },
                          "advisory_board": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The HTML representation of the preprint provider's advisory board."
                          },
                          "email_support": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint providers's support email address."
                          },
                          "banner_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                          },
                          "subjects_acceptable": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the preprint provider."
                          },
                          "social_facebook": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                          },
                          "email_contact": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                          },
                          "example": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The GUID for an example preprint from this preprint provider."
                          },
                          "name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The name of the preprint provider."
                          },
                          "domain": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                          },
                          "domain_redirect_enabled": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not redirects are enabled for the provider's domain."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                        "properties": {
                          "licenses_acceptable": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to licenses the preprint provider allows."
                          },
                          "taxonomies": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the taxonomies the preprint provider allows."
                          },
                          "preprints": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "Links to alternative representations of the preprint entity.",
                        "properties": {
                          "external_url": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the external website for the preprint provider."
                          },
                          "preprints": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the preprint provider."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if applicable)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if applicable)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response (e.g., total number of results)."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "engineering",
                    "type": "taxonomy",
                    "attributes": {
                      "text": "Engineering",
                      "parent": null,
                      "has_children": true
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/taxonomies/engineering/"
                    }
                  },
                  {
                    "id": "biology",
                    "type": "taxonomy",
                    "attributes": {
                      "text": "Biology",
                      "parent": null,
                      "has_children": true
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/taxonomies/biology/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/taxonomies/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access taxonomies for this provider."
          },
          "404": {
            "description": "Not Found. No preprint provider matches the given ID."
          }
        }
      }
    },
    "/preprint_providers/{provider_id}/taxonomies/highlighted/": {
      "get": {
        "summary": "List Highlighted Taxonomies for a Preprint Provider",
        "description": "Retrieve a list of highlighted taxonomies (subjects) for a specific preprint provider.\nHighlighted taxonomies are the primary subjects that the preprint provider chooses to showcase for organizing and filtering preprints.\n#### Permissions - No authentication required for public providers. - Only authorized users can access restricted providers.\n#### Returns - A JSON object with a `data` key containing an array of taxonomy resources. - Each taxonomy represents a subject that can be assigned to preprints.",
        "tags": [
          "Preprint Providers",
          "Taxonomies"
        ],
        "operationId": "preprint_provider_taxonomies_highlighted_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of highlighted taxonomies.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Preprint Providers",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the preprint provider entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the preprint provider entity.",
                        "properties": {
                          "social_instagram": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                          },
                          "advisory_board": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The HTML representation of the preprint provider's advisory board."
                          },
                          "email_support": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint providers's support email address."
                          },
                          "banner_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                          },
                          "subjects_acceptable": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the preprint provider."
                          },
                          "social_facebook": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                          },
                          "email_contact": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                          },
                          "example": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The GUID for an example preprint from this preprint provider."
                          },
                          "name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The name of the preprint provider."
                          },
                          "domain": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                          },
                          "domain_redirect_enabled": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not redirects are enabled for the provider's domain."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                        "properties": {
                          "licenses_acceptable": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to licenses the preprint provider allows."
                          },
                          "taxonomies": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the taxonomies the preprint provider allows."
                          },
                          "preprints": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "Links to alternative representations of the preprint entity.",
                        "properties": {
                          "external_url": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the external website for the preprint provider."
                          },
                          "preprints": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the preprint provider."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if applicable)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if applicable)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response (e.g., total number of results)."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "sociology",
                    "type": "taxonomy",
                    "attributes": {
                      "text": "Sociology",
                      "parent": null,
                      "has_children": true
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/taxonomies/sociology/"
                    }
                  },
                  {
                    "id": "psychology",
                    "type": "taxonomy",
                    "attributes": {
                      "text": "Psychology",
                      "parent": null,
                      "has_children": true
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/taxonomies/psychology/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/taxonomies/highlighted/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access taxonomies for this provider."
          },
          "404": {
            "description": "Not Found. No preprint provider matches the given ID."
          }
        }
      }
    },
    "/providers/preprints/{provider_id}/citation_styles/": {
      "get": {
        "summary": "List Citation Styles for a Preprint Provider",
        "description": "Retrieve a list of citation styles supported by a specific preprint provider.\nThese citation styles can be used to generate formatted citations for preprints associated with this provider.\n#### Permissions - No authentication required for public providers. - Only authorized users can access restricted providers.\n#### Returns - A JSON object with a `data` key containing an array of citation style resources. - Each citation style includes its ID, title, and whether it is the default style.",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "providers_preprint_citation_styles_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "query",
            "name": "filter[default]",
            "type": "boolean",
            "required": false,
            "description": "Filter citation styles by whether they are marked as default."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "Page number of results to return (for pagination)."
          },
          {
            "in": "query",
            "name": "per_page",
            "type": "integer",
            "required": false,
            "description": "Number of results per page. Defaults to 10."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of citation styles.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Preprint Providers",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the preprint provider entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the preprint provider entity.",
                        "properties": {
                          "social_instagram": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                          },
                          "advisory_board": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The HTML representation of the preprint provider's advisory board."
                          },
                          "email_support": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint providers's support email address."
                          },
                          "banner_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                          },
                          "subjects_acceptable": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the preprint provider."
                          },
                          "social_facebook": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                          },
                          "email_contact": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                          },
                          "example": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The GUID for an example preprint from this preprint provider."
                          },
                          "name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The name of the preprint provider."
                          },
                          "domain": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                          },
                          "domain_redirect_enabled": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not redirects are enabled for the provider's domain."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                        "properties": {
                          "licenses_acceptable": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to licenses the preprint provider allows."
                          },
                          "taxonomies": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the taxonomies the preprint provider allows."
                          },
                          "preprints": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "Links to alternative representations of the preprint entity.",
                        "properties": {
                          "external_url": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the external website for the preprint provider."
                          },
                          "preprints": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the preprint provider."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if applicable)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if applicable)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response (e.g., total number of results)."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "apa",
                    "type": "citation-style",
                    "attributes": {
                      "title": "APA 7th Edition",
                      "short_name": "APA",
                      "default": true
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/citations/styles/apa/"
                    }
                  },
                  {
                    "id": "mla",
                    "type": "citation-style",
                    "attributes": {
                      "title": "MLA 8th Edition",
                      "short_name": "MLA",
                      "default": false
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/citations/styles/mla/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/providers/preprints/{provider_id}/citation_styles/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access citation styles for this provider."
          },
          "404": {
            "description": "Not Found. No preprint provider matches the given ID."
          }
        }
      }
    },
    "/preprint_providers/{provider_id}/licenses/": {
      "get": {
        "summary": "List all licenses",
        "description": "\nA paginated list of the licenses allowed by a preprint provider.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprint providers. Each resource in the array is a separate preprint provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_licenses_list",
        "x-response-schema": "Licenses",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "License",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the license."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the license (`license`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the license.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Name of the license."
                    },
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Full text of the license."
                    },
                    "required_fields": {
                      "type": "array",
                      "readOnly": true,
                      "description": "Fields required for this license (provided to help front-end validators). Maps to properties on the NodeLicense model.",
                      "items": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Individual fields required by this license."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the license.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the license."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e965/"
                    },
                    "attributes": {
                      "text": "Copyright {{year}} {{copyrightHolders}}",
                      "required_fields": [
                        "year",
                        "copyrightHolders"
                      ],
                      "name": "No license"
                    },
                    "type": "licenses",
                    "id": "563c1cf88c5e4a3877f9e965"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 3,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/preprint_providers/{provider_id}/moderators/": {
      "get": {
        "summary": "List Moderators for a Preprint Provider",
        "description": "Retrieve a list of all moderators assigned to a specific preprint provider.\n## Permissions\n - The authenticated user must be an administrator of the preprint provider.\n\n## Returns\n - A JSON object with a `data` key containing an array of moderator records.\n - Each moderator includes their permission group and basic user information.",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_moderator_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "Page number of results to view."
          },
          {
            "in": "query",
            "name": "filter[permission_group]",
            "type": "string",
            "required": false,
            "description": "Filter moderators by permission group (`moderator` or `admin`)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the moderators list.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Preprint Providers",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the preprint provider entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the preprint provider entity.",
                        "properties": {
                          "social_instagram": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                          },
                          "advisory_board": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The HTML representation of the preprint provider's advisory board."
                          },
                          "email_support": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint providers's support email address."
                          },
                          "banner_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                          },
                          "subjects_acceptable": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the preprint provider."
                          },
                          "social_facebook": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                          },
                          "email_contact": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                          },
                          "example": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The GUID for an example preprint from this preprint provider."
                          },
                          "name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The name of the preprint provider."
                          },
                          "domain": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                          },
                          "domain_redirect_enabled": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not redirects are enabled for the provider's domain."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                        "properties": {
                          "licenses_acceptable": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to licenses the preprint provider allows."
                          },
                          "taxonomies": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the taxonomies the preprint provider allows."
                          },
                          "preprints": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "Links to alternative representations of the preprint entity.",
                        "properties": {
                          "external_url": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the external website for the preprint provider."
                          },
                          "preprints": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the preprint provider."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results, if available."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results, if available."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response, including pagination info."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "moderator_1",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "Ada Lovelace",
                      "email": "ada.lovelace@example.com",
                      "permission_group": "admin",
                      "date_added": "2024-01-15T12:34:56Z"
                    },
                    "relationships": {
                      "preprint_provider": {
                        "data": {
                          "type": "preprint_providers",
                          "id": "{provider_id}"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/moderators/moderator_1/"
                    }
                  },
                  {
                    "id": "moderator_2",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "Alan Turing",
                      "email": "alan.turing@example.com",
                      "permission_group": "moderator",
                      "date_added": "2024-01-20T10:00:00Z"
                    },
                    "relationships": {
                      "preprint_provider": {
                        "data": {
                          "type": "preprint_providers",
                          "id": "{provider_id}"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/moderators/moderator_2/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/moderators/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "per_page": 10,
                  "page": 1,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access this list."
          },
          "404": {
            "description": "Not Found. No preprint provider matches the given ID."
          }
        }
      },
      "post": {
        "summary": "Add a Moderator to a Preprint Provider",
        "description": "Add a new moderator to the specified preprint provider.\n## Permissions\n - The authenticated user must be an administrator of the preprint provider.\n\n## Request Body Provide the `permission_group` and the `user_id` for the moderator in the `relationships` object.\n#### Returns\n - A JSON object with the newly created moderator details under the `data` key if successful.\n - If unsuccessful, returns an `errors` object detailing the validation issues.",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_moderator_create",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "moderators"
                      ],
                      "description": "Must be `moderators`."
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "permission_group"
                      ],
                      "properties": {
                        "permission_group": {
                          "type": "string",
                          "enum": [
                            "moderator",
                            "admin"
                          ],
                          "description": "The permission group for the moderator:\n- `moderator`: Can review and moderate preprint submissions.\n- `admin`: Can manage submissions and other moderators.\n"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "required": [
                        "user"
                      ],
                      "properties": {
                        "user": {
                          "type": "object",
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "type",
                                "id"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "users"
                                  ]
                                },
                                "id": {
                                  "type": "string",
                                  "description": "The user ID of the person you wish to add as a moderator."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "moderators",
                  "attributes": {
                    "permission_group": "moderator"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_123"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Moderator successfully added.",
            "schema": {
              "type": "object",
              "title": "Preprint Providers",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the preprint provider entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the preprint provider entity.",
                  "properties": {
                    "social_instagram": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                    },
                    "advisory_board": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The HTML representation of the preprint provider's advisory board."
                    },
                    "email_support": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint providers's support email address."
                    },
                    "banner_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                    },
                    "logo_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                    },
                    "subjects_acceptable": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the preprint provider."
                    },
                    "social_facebook": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                    },
                    "email_contact": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                    },
                    "example": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The GUID for an example preprint from this preprint provider."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the preprint provider."
                    },
                    "domain": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                    },
                    "domain_redirect_enabled": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not redirects are enabled for the provider's domain."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                  "properties": {
                    "licenses_acceptable": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to licenses the preprint provider allows."
                    },
                    "taxonomies": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the taxonomies the preprint provider allows."
                    },
                    "preprints": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the preprint entity.",
                  "properties": {
                    "external_url": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the external website for the preprint provider."
                    },
                    "preprints": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the preprint list page for the preprint provider."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the preprint provider."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "moderator_3",
                  "type": "moderators",
                  "attributes": {
                    "full_name": "Grace Hopper",
                    "email": "grace.hopper@example.com",
                    "permission_group": "moderator",
                    "date_added": "2024-02-01T14:20:00Z"
                  },
                  "relationships": {
                    "preprint_provider": {
                      "data": {
                        "type": "preprint_providers",
                        "id": "{provider_id}"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/moderators/moderator_3/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input provided."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to add a moderator."
          },
          "404": {
            "description": "Not Found. No preprint provider matches the given ID."
          }
        }
      }
    },
    "/preprint_providers/{provider_id}/moderators/{moderator_id}/": {
      "get": {
        "summary": "Retrieve a Moderator for a Preprint Provider",
        "description": "Retrieve the details of a specific moderator for a preprint provider, including their permission group and user information.\n#### Permissions - The authenticated user must be an administrator of the preprint provider.\n#### Returns - A JSON object with a `data` key containing the moderator's details. - Each moderator includes their permission group and basic user information.",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_moderator_detail",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "path",
            "name": "moderator_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the moderator."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the moderator.",
            "schema": {
              "type": "object",
              "description": "A moderator for a preprint provider.",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the moderator.",
                  "example": "moderator_1"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "moderators"
                  ],
                  "description": "Must be 'moderators'.",
                  "example": "moderators"
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "full_name",
                    "email",
                    "permission_group",
                    "date_added"
                  ],
                  "properties": {
                    "full_name": {
                      "type": "string",
                      "description": "Full name of the moderator.",
                      "example": "Ada Lovelace"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of the moderator.",
                      "example": "ada.lovelace@example.com"
                    },
                    "permission_group": {
                      "type": "string",
                      "enum": [
                        "moderator",
                        "admin"
                      ],
                      "description": "The permission group for the moderator.\n- `moderator`: Can review and moderate preprint submissions.\n- `admin`: Can manage submissions and other moderators.\n",
                      "example": "admin"
                    },
                    "date_added": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date the moderator was added to the provider.",
                      "example": "2024-01-15T12:34:56Z"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "preprint_provider": {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "type",
                            "id"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "preprint_providers"
                              ],
                              "description": "Must be 'preprint_providers'.",
                              "example": "preprint_providers"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the preprint provider.",
                              "example": "provider_1"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to this moderator resource.",
                      "example": "https://api.test.osf.io/v2/preprint_providers/provider_1/moderators/moderator_1/"
                    }
                  }
                }
              },
              "example": {
                "id": "moderator_1",
                "type": "moderators",
                "attributes": {
                  "full_name": "Ada Lovelace",
                  "email": "ada.lovelace@example.com",
                  "permission_group": "admin",
                  "date_added": "2024-01-15T12:34:56Z"
                },
                "relationships": {
                  "preprint_provider": {
                    "data": {
                      "type": "preprint_providers",
                      "id": "provider_1"
                    }
                  }
                },
                "links": {
                  "self": "https://api.test.osf.io/v2/preprint_providers/provider_1/moderators/moderator_1/"
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "moderator_1",
                  "type": "moderators",
                  "attributes": {
                    "full_name": "Ada Lovelace",
                    "email": "ada.lovelace@example.com",
                    "permission_group": "admin",
                    "date_added": "2024-01-15T12:34:56Z"
                  },
                  "relationships": {
                    "preprint_provider": {
                      "data": {
                        "type": "preprint_providers",
                        "id": "{provider_id}"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/moderators/moderator_1/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access this moderator."
          },
          "404": {
            "description": "Not Found. No moderator matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Update a Moderator's Permission Group for a Preprint Provider",
        "description": "Update the permission group for a specific moderator on a preprint provider.\n## Permissions - The authenticated user must be an administrator of the preprint provider.\n## Request Body\nProvide the `permission_group` attribute in the `attributes` object to update the moderator. Available values for `permission_group` are:\n  - `moderator`: Can review and moderate preprint submissions.\n  - `admin`: Can manage submissions and other moderators.\n\n## Returns\n - A JSON object with the updated moderator details under the `data` key if the update is successful.\n - If unsuccessful, returns an `errors` object detailing the validation issues.",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_moderator_update",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "path",
            "name": "moderator_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the moderator."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "moderators"
                      ],
                      "description": "Must be `moderators`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the moderator."
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "permission_group"
                      ],
                      "properties": {
                        "permission_group": {
                          "type": "string",
                          "enum": [
                            "moderator",
                            "admin"
                          ],
                          "description": "The permission group for the moderator:\n- `moderator`: Can review and moderate preprint submissions.\n- `admin`: Can manage submissions and other moderators.\n"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "moderators",
                  "id": "{moderator_id}",
                  "attributes": {
                    "permission_group": "admin"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Moderator successfully updated.",
            "schema": {
              "type": "object",
              "description": "A moderator for a preprint provider.",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the moderator.",
                  "example": "moderator_1"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "moderators"
                  ],
                  "description": "Must be 'moderators'.",
                  "example": "moderators"
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "full_name",
                    "email",
                    "permission_group",
                    "date_added"
                  ],
                  "properties": {
                    "full_name": {
                      "type": "string",
                      "description": "Full name of the moderator.",
                      "example": "Ada Lovelace"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of the moderator.",
                      "example": "ada.lovelace@example.com"
                    },
                    "permission_group": {
                      "type": "string",
                      "enum": [
                        "moderator",
                        "admin"
                      ],
                      "description": "The permission group for the moderator.\n- `moderator`: Can review and moderate preprint submissions.\n- `admin`: Can manage submissions and other moderators.\n",
                      "example": "admin"
                    },
                    "date_added": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date the moderator was added to the provider.",
                      "example": "2024-01-15T12:34:56Z"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "preprint_provider": {
                      "type": "object",
                      "required": [
                        "data"
                      ],
                      "properties": {
                        "data": {
                          "type": "object",
                          "required": [
                            "type",
                            "id"
                          ],
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "preprint_providers"
                              ],
                              "description": "Must be 'preprint_providers'.",
                              "example": "preprint_providers"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the preprint provider.",
                              "example": "provider_1"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to this moderator resource.",
                      "example": "https://api.test.osf.io/v2/preprint_providers/provider_1/moderators/moderator_1/"
                    }
                  }
                }
              },
              "example": {
                "id": "moderator_1",
                "type": "moderators",
                "attributes": {
                  "full_name": "Ada Lovelace",
                  "email": "ada.lovelace@example.com",
                  "permission_group": "admin",
                  "date_added": "2024-01-15T12:34:56Z"
                },
                "relationships": {
                  "preprint_provider": {
                    "data": {
                      "type": "preprint_providers",
                      "id": "provider_1"
                    }
                  }
                },
                "links": {
                  "self": "https://api.test.osf.io/v2/preprint_providers/provider_1/moderators/moderator_1/"
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "moderator_1",
                  "type": "moderators",
                  "attributes": {
                    "full_name": "Ada Lovelace",
                    "email": "ada.lovelace@example.com",
                    "permission_group": "admin",
                    "date_added": "2024-01-15T12:34:56Z"
                  },
                  "relationships": {
                    "preprint_provider": {
                      "data": {
                        "type": "preprint_providers",
                        "id": "{provider_id}"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.test.osf.io/v2/preprint_providers/{provider_id}/moderators/moderator_1/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input provided."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to update this moderator."
          },
          "404": {
            "description": "Not Found. No moderator matches the given ID."
          }
        }
      },
      "delete": {
        "summary": "Remove a Moderator from a Preprint Provider",
        "description": "Remove a moderator from a preprint provider.\n## Permissions\n - The authenticated user must be an administrator of the preprint provider.\n\n## Returns\n - Returns a `204 No Content` response if the deletion is successful.\n - If unsuccessful, returns an `errors` object detailing the issue.",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "preprint_provider_moderator_delete",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "path",
            "name": "moderator_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the moderator."
          }
        ],
        "responses": {
          "204": {
            "description": "Moderator successfully removed. No content returned."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to remove this moderator."
          },
          "404": {
            "description": "Not Found. No moderator matches the given ID."
          }
        }
      }
    },
    "/providers/preprints/{provider_id}/withdraw_requests/": {
      "get": {
        "summary": "List Withdraw Requests for a Preprint Provider",
        "description": "Retrieve a list of withdraw requests for a specific preprint provider.\nWithdraw requests are initiated by contributors to request the withdrawal of a preprint from public view. These requests require moderation and can be either approved or rejected by provider moderators.\n#### Permissions - Admins and moderators for the provider can view all withdraw requests. - Unauthorized users will receive a `403 Forbidden` response.\n#### Returns - A JSON object with a `data` key containing an array of withdraw request resources. - Each withdraw request includes the current state, the associated preprint, and relevant timestamps.",
        "tags": [
          "Preprint Providers"
        ],
        "operationId": "provider_preprints_withdraw_requests_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of withdraw requests.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Preprint Providers",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the preprint provider entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the preprint provider entity (`preprint_providers`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the preprint provider entity.",
                        "properties": {
                          "social_instagram": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Instagram account ID. This field is deprecated as of verson 2.4."
                          },
                          "advisory_board": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The HTML representation of the preprint provider's advisory board."
                          },
                          "email_support": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint providers's support email address."
                          },
                          "banner_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's banner image. This field is deprecated as of verson 2.4."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A static path to the preprint provider's logo image. This field is deprecated as of verson 2.4."
                          },
                          "subjects_acceptable": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A nested array structure defining allowed subjects for this preprint provider, in the BePress taxonomy."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the preprint provider."
                          },
                          "social_facebook": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's Facebook account ID. This field is deprecated as of verson 2.4."
                          },
                          "email_contact": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's contact email address. This field is deprecated as of verson 2.4."
                          },
                          "example": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The GUID for an example preprint from this preprint provider."
                          },
                          "name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The name of the preprint provider."
                          },
                          "domain": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The preprint provider's domain, if the provider is using a domain to for their preprint service."
                          },
                          "domain_redirect_enabled": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not redirects are enabled for the provider's domain."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "Links to other entities or entity collections that have a relationship to the preprint provider.",
                        "properties": {
                          "licenses_acceptable": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to licenses the preprint provider allows."
                          },
                          "taxonomies": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the taxonomies the preprint provider allows."
                          },
                          "preprints": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "Links to alternative representations of the preprint entity.",
                        "properties": {
                          "external_url": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the external website for the preprint provider."
                          },
                          "preprints": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the preprint list page for the preprint provider."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the preprint provider."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if applicable)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if applicable)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response (e.g., total number of results)."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "wrq_1234",
                    "type": "withdraw-request",
                    "attributes": {
                      "state": "pending",
                      "justification": "Authors discovered a critical error.",
                      "date_submitted": "2024-10-15T14:12:00Z",
                      "date_reviewed": null
                    },
                    "relationships": {
                      "preprint": {
                        "data": {
                          "type": "preprints",
                          "id": "preprint_5678"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "preprint_providers",
                          "id": "{provider_id}"
                        }
                      },
                      "reviews_state": {
                        "data": {
                          "type": "reviews_state",
                          "id": "pending"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/withdraw_requests/wrq_1234/"
                    }
                  },
                  {
                    "id": "wrq_5678",
                    "type": "withdraw-request",
                    "attributes": {
                      "state": "accepted",
                      "justification": "Plagiarism identified.",
                      "date_submitted": "2024-09-20T08:05:00Z",
                      "date_reviewed": "2024-09-25T16:45:00Z"
                    },
                    "relationships": {
                      "preprint": {
                        "data": {
                          "type": "preprints",
                          "id": "preprint_9101"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "preprint_providers",
                          "id": "{provider_id}"
                        }
                      },
                      "reviews_state": {
                        "data": {
                          "type": "reviews_state",
                          "id": "accepted"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/withdraw_requests/wrq_5678/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/providers/preprints/{provider_id}/withdraw_requests/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access withdraw requests for this provider."
          },
          "404": {
            "description": "Not Found. No preprint provider matches the given ID."
          }
        }
      }
    },
    "/registrations/": {
      "get": {
        "summary": "List all registrations",
        "description": "A paginated list of registrations on the OSF to which the user has access.\n\nThe returned registrations are those which are public or which the user has access to view.\n\nNon-registered nodes cannot be accessed through this endpoint (use the [nodes](#Nodes_nodes_list) endpoints instead).\n\n#### Registrations\nA registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.\n\nRegistrations can be made public immediately or embargoed for up to 4 years.\n\n#### Withdrawals\nRegistrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/?filter[title]=open.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "ipkea",
                    "type": "registrations",
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "project",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "The Effect of Badges on Availability of Data and Materials",
                      "registered_meta": {
                        "looked": {
                          "value": "No"
                        },
                        "datacompletion": {
                          "value": "No"
                        },
                        "comments": {
                          "value": ""
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "This investigation seeks to evaluate the impact of badges on the availability and accessibility of open data and materials.",
                      "tags": [
                        "badges",
                        "methodology",
                        "signals",
                        "open science",
                        "open data",
                        "open materials"
                      ],
                      "collection": false,
                      "current_user_can_comment": false,
                      "pending_registration_approval": false,
                      "date_modified": "2016-02-04T20:58:11.042000",
                      "date_registered": "2015-06-01T14:47:40.064000",
                      "date_created": "2015-05-21T19:38:55.398000",
                      "date_withdrawn": null,
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/comments/?filter%5Btarget%5D=ipkea",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/rfgdw/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/z2u9w/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/ipkea/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/ipkea/",
                      "html": "https://osf.io/ipkea/"
                    }
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/registrations/?page=856",
                  "prev": null,
                  "next": "https://api.osf.io/v2/registrations/?page=2",
                  "meta": {
                    "total": 8559,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/": {
      "get": {
        "summary": "Retrieve a registration",
        "description": "Retrieve the details of a given registration.\n#### Permissions\nOnly project contributors may retrieve the details of a registration that is embargoed, or has not yet been made public. Attempting to retrieve a private registration for which you are not a contributor will result in a **403 Forbidden** response.\n\nAuthentication is not required to view the details of a public registration, as public registrations give read-only access to everyone.\n#### Registrations\nA registration on the OSF creates a frozen, time-stamped version of a project that cannot be edited or deleted. The *original project* can still be edited, while the registered version cannot.\n\nRegistrations can be made public immediately or embargoed for up to 4 years.\n\n#### Withdrawals\nRegistrations cannot be deleted, but they can be withdrawn. Withdrawing a registration removes the content of the registration but leaves behind basic metadata. A withdrawn registration will display a limited subset of information, namely, title, description, date_created, date_registered, date_withdrawn, registration, withdrawn, withdrawal_justification, and registration supplement. All other fields will be displayed as null. Additionally, the only relationship that remains accesible for a withdrawn registration is the contributors. All other relationships will return a **403 Forbidden** response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_read",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the registration."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the registration entity (`registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the registration entity.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the registered node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                    },
                    "date_withdrawn": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the registered node."
                    },
                    "embargo_end_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a fork of another node."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                    },
                    "pending_embargo_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                    },
                    "pending_registration_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval from project administrators."
                    },
                    "pending_withdrawal": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the registration is publicly visible."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                    },
                    "registered_meta": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary with supplemental registration questions and responses."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registration schema this registration conforms to."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe the registered node."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registered node."
                    },
                    "withdrawn": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration has been withdrawn."
                    },
                    "withdrawal_justification": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this registration is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of the registered node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this registration."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this registration."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this registration."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this registration."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this registration."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this registration."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                    },
                    "registered_by": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user that initiated this registration."
                    },
                    "registered_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this registration was registered from."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the metaschema that this registration conforms to."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this registration."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this registration."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the registrations entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the registration's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this registration."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "registrations",
                  "attributes": {
                    "draft_registration": "{draft_registration_id}",
                    "registration_choice": "embargo",
                    "lift_embargo": "2017-05-10T20:44:03.185000"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a registration",
        "description": "Updates a registration's privacy from **private** to **public**.\n\nRegistrations can be updated with either a **PUT** or **PATCH** request. The `public` field is the only field that can be modified on a registration\n\nRegistrations can only be turned from private to public, not vice versa.\n#### Permissions\nOnly project administrators may update a registration.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the registration."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the registration entity (`registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the registration entity.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the registered node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                    },
                    "date_withdrawn": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the registered node."
                    },
                    "embargo_end_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a fork of another node."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                    },
                    "pending_embargo_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                    },
                    "pending_registration_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval from project administrators."
                    },
                    "pending_withdrawal": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the registration is publicly visible."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                    },
                    "registered_meta": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary with supplemental registration questions and responses."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registration schema this registration conforms to."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe the registered node."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registered node."
                    },
                    "withdrawn": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration has been withdrawn."
                    },
                    "withdrawal_justification": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this registration is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of the registered node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this registration."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this registration."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this registration."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this registration."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this registration."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this registration."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                    },
                    "registered_by": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user that initiated this registration."
                    },
                    "registered_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this registration was registered from."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the metaschema that this registration conforms to."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this registration."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this registration."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the registrations entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the registration's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this registration."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "registrations",
                  "attributes": {
                    "draft_registration": "{draft_registration_id}",
                    "registration_choice": "embargo",
                    "lift_embargo": "2017-05-10T20:44:03.185000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_partial_update",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Created"
          }
        }
      }
    },
    "/registrations/{registration_id}/citations/": {
      "get": {
        "summary": "List all citation styles",
        "description": "\nA paginated list of the registration's alternative citation styles\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 citation styles. Each resource in the array is a separate citation styles object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include citation styles that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/citations/?filter[title]=open.\n\nCitation styles may be filtered by their `id`, `title`, `short-title`, and `summary`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_citations_list",
        "x-response-schema": "Citation Style",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Citation Style",
                "required": [
                  "id",
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the citation style, e.g. APA."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the citation style entity (`citation-styles`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "required": [
                      "date_parsed",
                      "title"
                    ],
                    "description": "The properties of the citation style entity.",
                    "properties": {
                      "date_parsed": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the citation style was first parsed, as an iso8601 formatted timestamp."
                      },
                      "short_title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The short name for the citation style."
                      },
                      "summary": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The summary of the citation style."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The official name of the citation style."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the citation style entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {},
                    "attributes": {
                      "date_parsed": "2015-02-16T04:16:25.732000",
                      "summary": null,
                      "short_title": "AMR",
                      "title": "Academy of Management Review"
                    },
                    "type": "citation-styles",
                    "id": "academy-of-management-review"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/citations/{citation_id}/": {
      "get": {
        "summary": "Retrieve a citation",
        "description": "Retrieves the citation style details for a registration, in CSL format.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the citation style.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "citation_id",
            "required": true,
            "description": "The unique identifier of the citation."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_citation_read",
        "x-response-schema": "Citation Detail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Citation Detail",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the entity being cited."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation entity.",
                  "properties": {
                    "author": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The DOI for the entity being cited, if one exists."
                    },
                    "publisher": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the entity being cited."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the entity that is being cited."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "bg4di",
                  "type": "node-citation",
                  "attributes": {
                    "publisher": "Open Science Framework",
                    "author": [
                      {
                        "given": "Timothy M",
                        "family": "Errington"
                      },
                      {
                        "given": "Nicole",
                        "family": "Vasilevsky"
                      },
                      {
                        "given": "Melissa A",
                        "family": "Haendel"
                      }
                    ],
                    "type": "webpage",
                    "title": "Identification Analysis of RP:CB"
                  },
                  "links": {
                    "self": "osf.io/bg4di"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/children/": {
      "get": {
        "summary": "List all child registrations",
        "description": "\nA paginated list of children of a registration.\n\nThe list consists of the next level child registrations for the given registration. The returned registrations are sorted by their `date_modified`, with the most recently updated child registrations appearing first.\n\nThe list will include child registrations that are public, as well as child registrations that are private, if the authenticated user has permission to view them.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 child registrations. If the given registration has zero child registrations, the `data` key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the child registration.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/children/?filter[title]=reproducibility.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.\n\nMost fields are string fields and will be filtered using simple substring matching. Public is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting true or false in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_children_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/comments/?filter%5Btarget%5D=4cmnz",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5wprs/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/4cmnz/",
                      "html": "https://osf.io/4cmnz/"
                    },
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "project",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "Full Project Description",
                      "registered_meta": {
                        "looked": {
                          "comments": [],
                          "value": "No",
                          "extra": []
                        },
                        "datacompletion": {
                          "comments": [],
                          "value": "Yes, data collection is underway or complete",
                          "extra": []
                        },
                        "comments": {
                          "comments": [],
                          "value": "Data collection for measurement time T1 is underway, but no data has been collected for T2 (when menstrual cycle information will be assessed). Therefore, data cannot be analysed at the time of preregistration.",
                          "extra": []
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "",
                      "tags": [],
                      "collection": false,
                      "current_user_can_comment": false,
                      "pending_registration_approval": false,
                      "date_modified": "2016-05-23T14:22:03.885000",
                      "date_registered": "2016-05-23T14:24:25.478000",
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "date_created": "2016-05-23T12:11:14.853000",
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "type": "registrations",
                    "id": "4cmnz"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/comments/": {
      "get": {
        "summary": "List all comments",
        "description": "\nA paginated list of the registration's comments.\n\nThe returned comments are sorted by their creation date, with the most recent comments appearing first.\n#### Permissions\nComments of public registrations are given read-only access to everyone.\n\nIf the comment-level is `private`, only registration contributors have permission to comment.\n\nIf the comment-level is `public`, any logged-in OSF user can comment.\n\nComments of private registrations are only visible to contributors and administrators on the registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include comments that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wuerf/comments/?filter[target]=wuerf\n\nComments may be filtered by their `deleted`, `target`, `date_created`, `date_modified`.\n\nMost fields are string fields and will be filtered using simple substring matching. Deleted is a boolean field, and can be filtered using truthy values, such as **true**, **false**, **0** or **1**. Note that quoting `true` or `false` in the query will cause the match to fail.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_comments_list",
        "x-response-schema": "Comment",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Comment",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the comment entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the comment entity (`comments`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the comment entity.",
                    "properties": {
                      "can_edit": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to edit this comment"
                      },
                      "content": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The content of the comment."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the comment was last modified, as an iso8601 formatted timestamp."
                      },
                      "modified": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has been edited."
                      },
                      "deleted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is deleted."
                      },
                      "is_abuse": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment is flagged or confirmed spam."
                      },
                      "is_ham": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not an admin checked the legitimacy of this comment."
                      },
                      "has_report": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment the current user reported this as spam."
                      },
                      "has_children": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the comment has replies."
                      },
                      "page": {
                        "description": "The page type the comment is on, e.g. `node`, `registration`, `wiki`, `files`.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the comment entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the node the comment is on."
                      },
                      "replies": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the replies to the comment."
                      },
                      "target": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the target of the comment."
                      },
                      "reports": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the reports connected to the comment."
                      },
                      "user": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the user who created the comment."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the comment entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the comment."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "comments",
                    "attributes": {
                      "content": "comment content"
                    },
                    "relationships": {
                      "target": {
                        "data": {
                          "type": "{target_type}",
                          "id": "{target_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=jg7sezmdnt93",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/jg7sezmdnt93/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/jg7sezmdnt93/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:44.123000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": false,
                      "content": "We have published a Bayesian reanalysis of this project at PLOS ONE: http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0149794\n\nI explain some of the context on my blog: http://alexanderetz.com/2016/02/26/the-bayesian-rpp-take-2/\n\nPlease note that the analysis we use in this paper is very different from the analysis used in the blog I posted in the previous comment, so the results are different as well.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2016-02-27T13:50:24.240000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "jg7sezmdnt93"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "replies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=23pk9",
                            "meta": {}
                          }
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {
                              "type": "nodes"
                            }
                          }
                        }
                      },
                      "reports": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/comments/23pk9/reports/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/6yc8z/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/comments/23pk9/"
                    },
                    "attributes": {
                      "can_edit": false,
                      "date_modified": "2016-04-01T04:45:37.437000",
                      "deleted": false,
                      "is_ham": false,
                      "has_children": false,
                      "modified": null,
                      "content": "In this blog http://wp.me/p4sgtg-o6 I conduct a Bayesian Re-analysis of the Reproducibility Project that gives a graded measure of replication success. In an attempt to avoid dichotomous success/fail replication outcomes, I calculate a continous outcome (Bayes factor) that answers the question, does the replication result fit more with the original reported effect or a null effect? Many replications are strong successes, many are strong failures, and there are many that lie somewhere in between.",
                      "has_report": false,
                      "is_abuse": false,
                      "date_created": "2015-08-30T14:50:21.093000",
                      "page": "node"
                    },
                    "type": "comments",
                    "id": "23pk9"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/contributors/": {
      "get": {
        "summary": "List all contributors",
        "description": "A paginated list of all contributors on this registration.\nThe returned contributors are sorted by their index.\n\nContributors are users who can make changes to the registration or, in the case of private registration, have read access to the registration.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed in the contributors list on the OSF, while non-bibliographic contributors are not.\n\nNote that if an anonymous view_only key is being used to view the list of contributors, the user relationship will not be exposed and the contributor ID will be an empty string.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 contributors. Each resource in the array contains the full representation of the contributor. Additionally, the full representation of the user this contributor represents is automatically embedded within the `data` key of the response.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include contributors that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/contributors/?filter[bibliographic]=true.\n\nContributors may be filtered by their `bibliographic` and `permission` attributes.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_contributors_list",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "guid0"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/wucr8/contributors/7xea5/"
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/7xea5/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "self": {
                                  "href": "https://api.osf.io/v2/users/7xea5/relationships/institutions/",
                                  "meta": {}
                                },
                                "related": {
                                  "href": "https://api.osf.io/v2/users/7xea5/institutions/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/7xea5/",
                            "profile_image": "https://secure.gravatar.com/avatar/0ddf92ef0f0a7011c21cd07d7940bc32?d=identicon"
                          },
                          "attributes": {
                            "family_name": "Anderl",
                            "suffix": "",
                            "locale": "de",
                            "date_registered": "2014-10-22T13:48:22.652000",
                            "middle_names": "",
                            "given_name": "Christine",
                            "full_name": "Christine Anderl",
                            "active": true,
                            "timezone": "America/Los_Angeles"
                          },
                          "type": "users",
                          "id": "7xea5"
                        }
                      }
                    },
                    "attributes": {
                      "index": 0,
                      "unregistered_contributor": null,
                      "bibliographic": true,
                      "permission": "admin"
                    },
                    "type": "contributors",
                    "id": "wucr8-7xea5"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/contributors/{user_id}/": {
      "get": {
        "summary": "Retrieve a contributor",
        "description": "Retrieves the details of a contributor on this registration.\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested contributor, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_contributors_read",
        "x-response-schema": "Contributor",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Contributor",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the contributor entity (`contributors`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the contributor entity.",
                    "properties": {
                      "bibliographic": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                      },
                      "index": {
                        "type": "integer",
                        "readOnly": false,
                        "description": "The position of this contributor in the list of project contributors and in project citations."
                      },
                      "permission": {
                        "type": "string",
                        "enum": [
                          "read",
                          "write",
                          "admin"
                        ],
                        "readOnly": false,
                        "description": "The permission level of the contributor. The default value is 'write'."
                      },
                      "unregistered_contributor": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                    "required": [
                      "node",
                      "user"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the contributor entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the the canonical API endpoint for the contributor."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "contributors",
                    "attributes": {},
                    "relationships": {
                      "user": {
                        "data": {
                          "type": "users",
                          "id": "guid0"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/wucr8/",
                          "meta": {}
                        }
                      }
                    },
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/7xea5/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/registrations/wucr8/contributors/7xea5/"
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/7xea5/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "self": {
                                "href": "https://api.osf.io/v2/users/7xea5/relationships/institutions/",
                                "meta": {}
                              },
                              "related": {
                                "href": "https://api.osf.io/v2/users/7xea5/institutions/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://osf.io/7xea5/",
                          "profile_image": "https://secure.gravatar.com/avatar/0ddf92ef0f0a7011c21cd07d7940bc32?d=identicon"
                        },
                        "attributes": {
                          "family_name": "Anderl",
                          "suffix": "",
                          "locale": "de",
                          "date_registered": "2014-10-22T13:48:22.652000",
                          "middle_names": "",
                          "given_name": "Christine",
                          "full_name": "Christine Anderl",
                          "active": true,
                          "timezone": "America/Los_Angeles"
                        },
                        "type": "users",
                        "id": "7xea5"
                      }
                    }
                  },
                  "attributes": {
                    "index": 0,
                    "unregistered_contributor": null,
                    "bibliographic": true,
                    "permission": "admin"
                  },
                  "type": "contributors",
                  "id": "wucr8-7xea5"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/files/": {
      "get": {
        "summary": "List all storage providers",
        "description": "A paginated list of storage providers enabled on the registration\n\nUsers of the OSF may access their data on a [number of cloud-storage services](https://api.osf.io/v2/#storage-providers) that have integrations with the OSF. We call these **providers**. By default, every node has access to the OSF-provided storage but may use as many of the supported providers as desired.\n\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 files. Each resource in the array is a separate file object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nNote: In the OSF filesystem model, providers are treated as folders, but with special properties that distinguish them from regular folders. Every provider folder is considered a root folder, and may not be deleted through the regular file API.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_providers_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/files/osfstorage/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "storage_addons": "https://api.osf.io/v2/addons/?filter%5Bcategories%5D=storage",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/",
                      "new_folder": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/?kind=folder"
                    },
                    "attributes": {
                      "node": "ezcuj",
                      "path": "/",
                      "kind": "folder",
                      "name": "osfstorage",
                      "provider": "osfstorage"
                    },
                    "type": "files",
                    "id": "ezcuj:osfstorage"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/files/{provider}/": {
      "get": {
        "summary": "List all files",
        "description": "List of all the registration's files/folders for a given storage provider.\n\n#### Returns\n\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of files. Each resource in the array is a separate file object and contains the full representation of the file.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Filtering\n\nYou can optionally request that the response only include files that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/files/osfstorage/?filter[kind]=file\n\nFiles may be filtered by `id`, `name`, `node`, `kind`, `path`, `provider`, `size`, and `last_touched`.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the storage provider."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_files_list",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "File",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the file entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the file entity (`files`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the file entity.",
                    "properties": {
                      "extra": {
                        "type": "object",
                        "readOnly": true,
                        "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The kind of files object it is (`file` or `folder`)."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Name of the file"
                      },
                      "last_touched": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Unix-style path to the file relative to the provider root."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                      },
                      "current_version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Version number of the file."
                      },
                      "delete_allowed": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not deletion of the file is allowed."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The id of the file provider (e.g., `osfstorage`)"
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier for this file entity for this project and storage provider."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user is allowed to post comments."
                      },
                      "guid": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                      },
                      "checkout": {
                        "type": "string",
                        "readOnly": true,
                        "description": "SOON TO BE DEPRECATED, see relationships checkout."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe this file, as entered by project contributors."
                      },
                      "size": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Size of the file in bytes."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                    "properties": {
                      "node": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node the file is on."
                      },
                      "checkout": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user who checked out the file."
                      },
                      "comments": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the comments on the file."
                      },
                      "versions": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the versions of the file."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to alternative representations of the file entity.",
                    "properties": {
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the page to view a file's information or a folder's contents."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the file."
                      },
                      "move": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file moves."
                      },
                      "new_folder": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                      },
                      "upload": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file uploads."
                      },
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file downloads."
                      },
                      "delete": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The Waterbutler API route for file deletions."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                            "meta": {}
                          }
                        }
                      },
                      "versions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                      "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                      "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                    },
                    "attributes": {
                      "extra": {
                        "hashes": {
                          "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                          "md5": "44325d4f13b09f3769ede09d7c20a82c"
                        },
                        "downloads": 447
                      },
                      "kind": "file",
                      "name": "OSC2012.pdf",
                      "last_touched": "2015-09-18T01:11:16.328000",
                      "materialized_path": "/OSC2012.pdf",
                      "date_modified": "2014-10-17T19:24:12.264Z",
                      "current_version": 1,
                      "delete_allowed": true,
                      "date_created": "2014-10-17T19:24:12.264Z",
                      "provider": "osfstorage",
                      "path": "/553e69248c5e4a219919ea54",
                      "current_user_can_comment": true,
                      "guid": "sejcv",
                      "checkout": null,
                      "tags": [],
                      "size": 216945
                    },
                    "type": "files",
                    "id": "553e69248c5e4a219919ea54"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/files/{provider}/{path}/": {
      "get": {
        "summary": "Retrieve a file",
        "description": "Retrieves the details of a registration file for the given storage provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested registration file object, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "provider",
            "required": true,
            "description": "The unique identifier of the storage provider."
          },
          {
            "in": "path",
            "type": "string",
            "name": "path",
            "required": true,
            "description": "The unique identifier of the file path."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_files_read",
        "x-response-schema": "File",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "File",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the file entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the file entity (`files`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the file entity.",
                  "properties": {
                    "extra": {
                      "type": "object",
                      "readOnly": true,
                      "description": "Extra information, contains `hashes` (`sha256`, `md5`) and `downloads` count."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The kind of files object it is (`file` or `folder`)."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "Name of the file"
                    },
                    "last_touched": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file external metadata was last retrieved as an iso8601 formatted timestamp (does not apply to OSF Storage files)."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Unix-style path to the file relative to the provider root."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was last modified, as an iso8601 formatted timestamp."
                    },
                    "current_version": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Version number of the file."
                    },
                    "delete_allowed": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not deletion of the file is allowed."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the file was created, as an iso8601 formatted timestamp."
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The id of the file provider (e.g., `osfstorage`)"
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique identifier for this file entity for this project and storage provider."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user is allowed to post comments."
                    },
                    "guid": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Global unique identifier (GUID) for this file (if one has been assigned)."
                    },
                    "checkout": {
                      "type": "string",
                      "readOnly": true,
                      "description": "SOON TO BE DEPRECATED, see relationships checkout."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe this file, as entered by project contributors."
                    },
                    "size": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "Size of the file in bytes."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "node": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the node the file is on."
                    },
                    "checkout": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user who checked out the file."
                    },
                    "comments": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the comments on the file."
                    },
                    "versions": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the versions of the file."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to alternative representations of the file entity.",
                  "properties": {
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the page to view a file's information or a folder's contents."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the file."
                    },
                    "move": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file moves."
                    },
                    "new_folder": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for creating a new subfolder (does not exist for files)."
                    },
                    "upload": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file uploads."
                    },
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file downloads."
                    },
                    "delete": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The Waterbutler API route for file deletions."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/ezcuj/comments/?filter%5Btarget%5D=sejcv",
                          "meta": {}
                        }
                      }
                    },
                    "versions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/versions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "self": "https://api.osf.io/v2/files/553e69248c5e4a219919ea54/",
                    "move": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "upload": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "download": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54",
                    "delete": "https://files.osf.io/v1/resources/ezcuj/providers/osfstorage/553e69248c5e4a219919ea54"
                  },
                  "attributes": {
                    "extra": {
                      "hashes": {
                        "sha256": "2450eb9ff3db92a1bff370368b0552b270bd4b5ca0745b773c37d2662f94df8e",
                        "md5": "44325d4f13b09f3769ede09d7c20a82c"
                      },
                      "downloads": 447
                    },
                    "kind": "file",
                    "name": "OSC2012.pdf",
                    "last_touched": "2015-09-18T01:11:16.328000",
                    "materialized_path": "/OSC2012.pdf",
                    "date_modified": "2014-10-17T19:24:12.264Z",
                    "current_version": 1,
                    "delete_allowed": true,
                    "date_created": "2014-10-17T19:24:12.264Z",
                    "provider": "osfstorage",
                    "path": "/553e69248c5e4a219919ea54",
                    "current_user_can_comment": true,
                    "guid": "sejcv",
                    "checkout": null,
                    "tags": [],
                    "size": 216945
                  },
                  "type": "files",
                  "id": "553e69248c5e4a219919ea54"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/forks/": {
      "get": {
        "summary": "List all forks",
        "description": "\nA paginated list of the registration’s forks\n\nThe returned forks are sorted by their `forked_date`, with the most recent forks appearing first.\n\nForking a registration creates a copy of an existing registration and all of its contents.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 forks. If the current registration has no fork, the `data` key will contain an empty array. Each resource in the array is a separate registration object and contains the full representation of the registration's fork.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_forks_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Registration",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the registration."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the registration entity (`registrations`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the registration entity.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": true,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the registered node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                      },
                      "date_withdrawn": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The description of the registered node."
                      },
                      "embargo_end_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration represents a fork of another node."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                      },
                      "pending_embargo_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                      },
                      "pending_registration_approval": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval from project administrators."
                      },
                      "pending_withdrawal": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the registration is publicly visible."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                      },
                      "registered_meta": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary with supplemental registration questions and responses."
                      },
                      "registration_supplement": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registration schema this registration conforms to."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings that describe the registered node."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The title of the registered node."
                      },
                      "withdrawn": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this registration has been withdrawn."
                      },
                      "withdrawal_justification": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this registration is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of the registered node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this registration."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this registration."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this registration."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this registration."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this registration."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this registration."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                      },
                      "registered_by": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the user that initiated this registration."
                      },
                      "registered_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that this registration was registered from."
                      },
                      "registration_schema": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the metaschema that this registration conforms to."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this registration."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this registration."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the registrations entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the registration's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this registration."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "registrations",
                    "attributes": {
                      "draft_registration": "{draft_registration_id}",
                      "registration_choice": "embargo",
                      "lift_embargo": "2017-05-10T20:44:03.185000"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/comments/?filter%5Btarget%5D=4cmnz",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5wprs/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/4cmnz/",
                      "html": "https://osf.io/4cmnz/"
                    },
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "project",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "Full Project Description",
                      "registered_meta": {
                        "looked": {
                          "comments": [],
                          "value": "No",
                          "extra": []
                        },
                        "datacompletion": {
                          "comments": [],
                          "value": "Yes, data collection is underway or complete",
                          "extra": []
                        },
                        "comments": {
                          "comments": [],
                          "value": "Data collection for measurement time T1 is underway, but no data has been collected for T2 (when menstrual cycle information will be assessed). Therefore, data cannot be analysed at the time of preregistration.",
                          "extra": []
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "",
                      "tags": [],
                      "collection": false,
                      "current_user_can_comment": false,
                      "pending_registration_approval": false,
                      "date_modified": "2016-05-23T14:22:03.885000",
                      "date_registered": "2016-05-23T14:24:25.478000",
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "date_created": "2016-05-23T12:11:14.853000",
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "type": "registrations",
                    "id": "4cmnz"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a fork",
        "description": "Creates a fork of the given registration.\n\nForking a project creates a copy of an existing registration and all of its contents. The fork always points back to the original registration, forming a network of registrations.\n\nYou might use a fork to copy another's work to build on and extend. For example, a professor may create an OSF project of materials for individual student use. Each student forks the project to have his or her own copy of the materials to start his/her own work.\n\nWhen creating a fork, your fork will only contain public components of the current registration and components for which you are a contributor. Private components that you do not have access to will not be forked.\n#### Required\nThere are no required attributes when creating a fork, as all of the forked registration's attributes will be copied from the current registration.\n\nThe `title` field is optional, with the default title being \"Fork of \" prepended to the current registration's title.\n#### Returns\nReturns a JSON object with a `data` key containing the complete representation of the forked registration, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the registration."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the registration entity (`registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the registration entity.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "analysis",
                        "communication",
                        "data",
                        "hypothesis",
                        "instrumentation",
                        "methods and measures",
                        "procedure",
                        "project",
                        "software",
                        "other"
                      ],
                      "description": "The category of the registered node."
                    },
                    "collection": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                    },
                    "current_user_can_comment": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                    },
                    "date_withdrawn": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The description of the registered node."
                    },
                    "embargo_end_date": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                    },
                    "fork": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration represents a fork of another node."
                    },
                    "node_license": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                    },
                    "pending_embargo_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                    },
                    "pending_registration_approval": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval from project administrators."
                    },
                    "pending_withdrawal": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                    },
                    "preprint": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                    },
                    "public": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the registration is publicly visible."
                    },
                    "registration": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                    },
                    "registered_meta": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary with supplemental registration questions and responses."
                    },
                    "registration_supplement": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registration schema this registration conforms to."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "A list of strings that describe the registered node."
                    },
                    "template_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the registered node."
                    },
                    "withdrawn": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not this registration has been withdrawn."
                    },
                    "withdrawal_justification": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                  "properties": {
                    "affiliated_institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions this registration is affiliated with."
                    },
                    "children": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of the registered node's children (components)."
                    },
                    "citation": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the citation details of this registration."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of comments on this registration."
                    },
                    "contributors": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of contributors on this registration."
                    },
                    "files": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of storage providers that have been enabled on this registration."
                    },
                    "forks": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are forks of this registration."
                    },
                    "identifiers": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                    },
                    "logs": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of log actions pertaining to this registration."
                    },
                    "linked_nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration."
                    },
                    "node_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                    },
                    "parent": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                    },
                    "registered_by": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user that initiated this registration."
                    },
                    "registered_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this registration was registered from."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the metaschema that this registration conforms to."
                    },
                    "root": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                    },
                    "view_only_links": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of view only links that have been created for this registration."
                    },
                    "wikis": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of wiki pages for this registration."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the registrations entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the registration's page on the OSF."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the canonical API endpoint of this registration."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "registrations",
                  "attributes": {
                    "draft_registration": "{draft_registration_id}",
                    "registration_choice": "embargo",
                    "lift_embargo": "2017-05-10T20:44:03.185000"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_forks_create",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "Registration",
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/registrations/{registration_id}/identifiers/": {
      "get": {
        "summary": "List all identifiers",
        "description": "A paginated list of the registration's identifiers.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of identifiers. Each resource in the array is a separate identifier object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\n\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/identifiers/?filter[category]=ark\n\nIdentifiers may be filtered by their `category` e.g `ark` or `doi`.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_identifiers_list",
        "x-response-schema": "Identifier",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Identifier",
                "description": "Representation of an identifier entity within the OSF API.",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Unique identifier for the identifier entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Resource type, always `identifiers` for identifier entities."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "Attributes of the identifier entity, including category and value.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "enum": [
                          "doi"
                        ],
                        "readOnly": true,
                        "description": "The category of the identifier, such as ARK or DOI."
                      },
                      "value": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The actual value of the identifier."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Relationships to other entities, indicating the node this identifier refers to.",
                    "properties": {
                      "referent": {
                        "type": "object",
                        "description": "Relationship object linking to the node associated with this identifier.",
                        "properties": {
                          "links": {
                            "type": "object",
                            "properties": {
                              "related": {
                                "type": "string",
                                "format": "url",
                                "description": "URL to the related node."
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to representations of the identifier entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "url",
                        "readOnly": true,
                        "description": "URL to the detail page for this identifier."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b459/"
                    },
                    "attributes": {
                      "category": "doi",
                      "value": "10.17605/OSF.IO/73PND"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b459"
                  },
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b45a/"
                    },
                    "attributes": {
                      "category": "ark",
                      "value": "c7605/osf.io/73pnd"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b45a"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "A paginated list of institutions affiliated with the registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 affiliated institutions. Each resource in the array is a separate institution object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      },
                      "iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Internationalized Resource Identifier (IRI) of the institution."
                      },
                      "ror_iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Research Organization Registry (ROR) IRI of the institution."
                      },
                      "iris": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "List of IRIs associated with the institution."
                      },
                      "assets": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo."
                          },
                          "logo_rounded": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo with rounded corners."
                          },
                          "banner": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's banner."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Static path to the institution specific logo."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/cos/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/cos/"
                    },
                    "attributes": {
                      "auth_url": null,
                      "logo_path": "/static/img/institutions/shields/cos-shield.png",
                      "name": "Center For Open Science",
                      "description": "COS is a non-profit technology company providing free and open services to increase inclusivity and transparency of research. Find out more at <a href=\"https://cos.io\">cos.io</a>."
                    },
                    "type": "institutions",
                    "id": "cos"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/uva/"
                    },
                    "attributes": {
                      "auth_url": "https://accounts.osf.io/Shibboleth.sso/Login?entityID=urn%3Amace%3Aincommon%3Avirginia.edu",
                      "logo_path": "/static/img/institutions/shields/uva-shield.png",
                      "name": "University of Virginia",
                      "description": "In partnership with the <a href=\"http://www.virginia.edu/vpr/\">Vice President for Research</a>, <a href=\"http://dsi.virginia.edu\">Data Science Institute</a>, <a href=\"https://www.hsl.virginia.edu\">Health Sciences Library</a>, and <a href=\"http://data.library.virginia.edu\">University Library</a>. Learn more about <a href=\"http://cadre.virginia.edu\">UVA resources for computational and data-driven research</a>. Projects must abide by the <a href=\"http://www.virginia.edu/informationpolicy/security.html\">University Security and Data Protection Policies</a>."
                    },
                    "type": "institutions",
                    "id": "uva"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/linked_nodes/": {
      "get": {
        "summary": "List all linked nodes",
        "description": "List of all nodes linked to the registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/linked_nodes/?filter[title]=reproducibility/?filter[title]=reproducibility.\n\nNodes may be filtered by their `title`, `category`, `description`, `public`, `registration`, or `tags`. `title`, `description`, and `category` are string fields and will be filteres using simple substring matching. `public`, `registration` are boolean and can be filtered using truthy values, such as `true`, `false`, `0`, `1`. `tags` is an array of simple strings.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_linked_nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/comments/?filter%5Btarget%5D=bifc7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/bifc7/",
                      "html": "https://osf.io/bifc7/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This is an independent replication as part of the Reproducibility Project: Psychology.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-03-03T05:00:31.512000",
                      "title": "Replication of WA Cunningham, JJ Van Bavel, IR Johnsen (2008, PS 19(2))",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-07-28T13:53:04.508000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "bifc7"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/kxhz5/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/comments/?filter%5Btarget%5D=73pnd",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/73pnd/",
                      "html": "https://osf.io/73pnd/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-10-02T19:50:23.605000",
                      "title": "Replication of Hajcak &amp; Foti (2008, PS, Study 1)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-10-31T18:50:46.111000",
                      "current_user_can_comment": false,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "anxiety",
                        "EMG",
                        "EEG",
                        "motivation",
                        "ERN"
                      ]
                    },
                    "type": "nodes",
                    "id": "73pnd"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/logs/": {
      "get": {
        "summary": "List all logs",
        "description": "A paginated list of the registration's logs.\n\nThe returned logs are sorted by their `date`, with the most recents logs appearing first.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 logs. Each resource in the array is a separate logs object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include logs that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/logs/?filter[action]=made_private.\n\nLogs may be filtered by their `action`, and `date`.",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_logs_list",
        "x-response-schema": "Log",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Log",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the log."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the log (`logs`)"
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the log.",
                    "required": [
                      "action",
                      "date"
                    ],
                    "properties": {
                      "date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the log was created, as an iso8601 formatted timestamp."
                      },
                      "action": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See actions section for full list of possible actions."
                      },
                      "params": {
                        "type": "object",
                        "title": "Log Params",
                        "readOnly": true,
                        "description": "The type of action performed on the OSF. See description for full list of possible actions.",
                        "properties": {
                          "addon": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The addon associated with the connected node."
                          },
                          "anonymous_link": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "The view only link added to the node was anonymous."
                          },
                          "bucket": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The Amazon s3 bucket connected to the connected node."
                          },
                          "citation_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of citation associated with the connected node."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "List of contributors on the connected node involved in the action represented by this node log."
                          },
                          "data_set": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The dataset associated with the connected node."
                          },
                          "destination": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the destination for the move of the item on the node associated with this log. Details include the path, url, addon, node_url and node_title."
                          },
                          "figshare_title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Title of the fighshare project associated with this node log"
                          },
                          "forward_url": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL that the connected node forwards to."
                          },
                          "github_user": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github user involved with the action represented by this node log."
                          },
                          "github_repo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The github repository involved with the action represented by this node log."
                          },
                          "file": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary with information about the file involved with the log."
                          },
                          "filename": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Filename for the file associated with the log."
                          },
                          "kind": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Kind of the object associated with the log."
                          },
                          "folder": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Folder associated with the log."
                          },
                          "folder_name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Name of the folder associated with the log."
                          },
                          "license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "License for the associated node."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the DOI and ARK ID for a preprint associated with the log."
                          },
                          "institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dictionary containing the ID and Name of the institution associated with the log."
                          },
                          "old_page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Old name of wiki page for a wiki rename log action."
                          },
                          "page": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Current name of wiki page for rename log action."
                          },
                          "page_id": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Primary key of the wiki page associated with the log."
                          },
                          "params_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Node that is refered to in the params of the log."
                          },
                          "params_project": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Project that is refered to in the params of the log."
                          },
                          "path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Path for a file associated with the log."
                          },
                          "pointer": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the node that is linked to the associated node."
                          },
                          "preprint": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint related to the associated node."
                          },
                          "preprint_provider": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Preprint provider for the associated node."
                          },
                          "previous_institution": {
                            "type": "string",
                            "readOnly": true,
                            "description": "If a primary institution for the associated node is changed, this will show the previous institution."
                          },
                          "source": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the source of a move related event for a log. Details include the path, url, addon, node_url and node_title."
                          },
                          "study": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Dataverse study linked to the associated node."
                          },
                          "tag": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tag associated with the associated node."
                          },
                          "tags": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Tags associated with the associated node."
                          },
                          "target": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing details about the target of the log. Details include the path, url, addon, node_url and node_title."
                          },
                          "template_node": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing information about the node that was used as a template for the associated node."
                          },
                          "title_new": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The new title for the associated node."
                          },
                          "title_original": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The original title for the associated node"
                          },
                          "updated_fields": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing all of the fields updated on the associated node."
                          },
                          "urls": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Links to access information about the file associated with this log."
                          },
                          "version": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Version of the wiki page associated with this log."
                          },
                          "wiki": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with information about the wiki page associated with the log."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the log.",
                    "required": [
                      "node"
                    ],
                    "properties": {
                      "node": {
                        "description": "A relationship to the node associated with this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "original_node": {
                        "description": "A relationship to the original node that was associated with this log, in case this log was copied from a node to a fork or registration.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "user": {
                        "description": "A relationship to the user who performed the log action.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "linked_node": {
                        "description": "A relationship to the node linked to this log.",
                        "readOnly": true,
                        "type": "string"
                      },
                      "template_node": {
                        "description": "A relationship to the node used as a template for this log.",
                        "readOnly": true,
                        "type": "string"
                      }
                    }
                  },
                  "links": {
                    "description": "URLs to alternative representations of the log entity.",
                    "readOnly": true,
                    "type": "object",
                    "title": "Links",
                    "required": [
                      "self"
                    ],
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the log."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/ezcuj/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/jk5cv/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/4fc706a80b6e9118ef000122/"
                    },
                    "attributes": {
                      "date": "2012-05-31T05:50:32.083000",
                      "action": "contributor_added",
                      "params": {
                        "params_node": {
                          "id": "ezcuj",
                          "title": "Reproducibility Project: Psychology"
                        },
                        "contributors": [
                          {
                            "family_name": "Nosek",
                            "middle_names": "A.",
                            "given_name": "Brian",
                            "full_name": "Brian A. Nosek",
                            "active": true,
                            "id": "cdi38"
                          }
                        ]
                      }
                    },
                    "type": "logs",
                    "id": "4fc706a80b6e9118ef000122"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/n32tp/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/7eshv/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead7174f/"
                    },
                    "attributes": {
                      "date": "2016-05-23T14:22:20.142000",
                      "action": "osf_storage_file_updated",
                      "params": {
                        "contributors": [],
                        "params_project": {
                          "id": "5wprs",
                          "title": "Full Project Description"
                        },
                        "params_node": {
                          "id": "7eshv",
                          "title": "Full Questionnaire [in original language]"
                        },
                        "urls": {
                          "download": "/project/7eshv/files/osfstorage/5742f41c6c613b01de5b15dd/?action=download",
                          "view": "/project/7eshv/files/osfstorage/5742f41c6c613b01de5b15dd/"
                        },
                        "preprint_provider": null,
                        "path": "/StudyMaterials_UEH1.pdf"
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead7174f"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/n32tp/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/7eshv/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead7174d/"
                    },
                    "attributes": {
                      "date": "2016-05-23T12:13:58.371000",
                      "action": "project_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "7eshv",
                          "title": "Full Questionnaire [in original language]"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead7174d"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/4cmnz/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/5wprs/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead71746/"
                    },
                    "attributes": {
                      "date": "2016-05-23T12:11:14.853000",
                      "action": "project_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "5wprs",
                          "title": "Full Project Description"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead71746"
                  },
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wucr8/",
                            "meta": {}
                          }
                        }
                      },
                      "original_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/6gbkh/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/7xea5/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/logs/57431299594d9001ead71742/"
                    },
                    "attributes": {
                      "date": "2016-05-23T12:10:48.868000",
                      "action": "project_created",
                      "params": {
                        "preprint_provider": null,
                        "params_node": {
                          "id": "6gbkh",
                          "title": "Investigating fluctuations in cooperative preferences across the natural female menstrual cycle in a within-subjects-design"
                        },
                        "params_project": null,
                        "contributors": []
                      }
                    },
                    "type": "logs",
                    "id": "57431299594d9001ead71742"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 5,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/actions/": {
      "get": {
        "summary": "List Registration Actions",
        "description": "Retrieve a list of actions performed on a specific registration. Actions represent state transitions or moderation events, such as submission, approval, rejection, and withdrawal requests.\n#### Permissions\n - Publicly accessible if the registration is public.\n - Administrators of the registration always have access.\n - Moderators of the associated Registration Provider may have access depending on action type.\n\n#### Returns\n - A JSON object containing a list of `registration actions` returned in a `data` array.\n - Each action describes a specific event or state transition applied to the registration.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_actions_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of registration actions.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Registration",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the registration."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the registration entity (`registrations`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the registration entity.",
                        "properties": {
                          "category": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "analysis",
                              "communication",
                              "data",
                              "hypothesis",
                              "instrumentation",
                              "methods and measures",
                              "procedure",
                              "project",
                              "software",
                              "other"
                            ],
                            "description": "The category of the registered node."
                          },
                          "collection": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                          },
                          "current_user_can_comment": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                          },
                          "current_user_permissions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                          },
                          "date_withdrawn": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the registered node."
                          },
                          "embargo_end_date": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                          },
                          "fork": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration represents a fork of another node."
                          },
                          "node_license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                          },
                          "pending_embargo_approval": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                          },
                          "pending_registration_approval": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the registration is pending approval from project administrators."
                          },
                          "pending_withdrawal": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                          },
                          "preprint": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": false,
                            "description": "Whether or not the registration is publicly visible."
                          },
                          "registration": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                          },
                          "registered_meta": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with supplemental registration questions and responses."
                          },
                          "registration_supplement": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The title of the registration schema this registration conforms to."
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "A list of strings that describe the registered node."
                          },
                          "template_from": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                          },
                          "title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The title of the registered node."
                          },
                          "withdrawn": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration has been withdrawn."
                          },
                          "withdrawal_justification": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                        "properties": {
                          "affiliated_institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions this registration is affiliated with."
                          },
                          "children": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of the registered node's children (components)."
                          },
                          "citation": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the citation details of this registration."
                          },
                          "comments": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of comments on this registration."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of contributors on this registration."
                          },
                          "files": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of storage providers that have been enabled on this registration."
                          },
                          "forks": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are forks of this registration."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                          },
                          "logs": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of log actions pertaining to this registration."
                          },
                          "linked_nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to this registration."
                          },
                          "node_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                          },
                          "parent": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                          },
                          "registered_by": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the user that initiated this registration."
                          },
                          "registered_from": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that this registration was registered from."
                          },
                          "registration_schema": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the metaschema that this registration conforms to."
                          },
                          "root": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                          },
                          "view_only_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of view only links that have been created for this registration."
                          },
                          "wikis": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of wiki pages for this registration."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the registrations entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the registration's page on the OSF."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the canonical API endpoint of this registration."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "registrations",
                        "attributes": {
                          "draft_registration": "{draft_registration_id}",
                          "registration_choice": "embargo",
                          "lift_embargo": "2017-05-10T20:44:03.185000"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "action_1",
                    "type": "registration_action",
                    "attributes": {
                      "trigger": "submit",
                      "from_state": "initial",
                      "to_state": "unapproved",
                      "comment": "Submitted for review.",
                      "date_created": "2024-03-01T12:00:00Z",
                      "date_modified": "2024-03-01T12:00:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "user_1"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg_abc123"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/abc123/actions/action_1/"
                    }
                  }
                ],
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view registration actions for this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/bibliographic_contributors/": {
      "get": {
        "summary": "List Bibliographic Contributors for a Registration",
        "description": "Retrieve a list of bibliographic contributors associated with a specific registration.\nBibliographic contributors are users who have made significant contributions to the registration and are listed as authors. These contributors appear in citations and are considered authors on the registration's public pages and metadata.\n#### Permissions\n - Public registrations expose bibliographic contributors publicly.\n - Private registrations require appropriate read permissions to view bibliographic contributors.\n\n#### Returns\n - A JSON object with a `data` array containing contributor resources that are marked as bibliographic for the registration.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_bibliographic_contributors_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of bibliographic contributors for the specified registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of bibliographic contributors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier of the contributor.",
                        "example": "abc123"
                      },
                      "type": {
                        "type": "string",
                        "description": "Resource type identifier.",
                        "example": "contributors"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "bibliographic": {
                            "type": "boolean",
                            "description": "Indicates whether this contributor is bibliographic.",
                            "example": true
                          },
                          "permission": {
                            "type": "string",
                            "description": "Contributor's permission level on the registration.",
                            "example": "admin"
                          },
                          "unregistered_contributor": {
                            "type": "string",
                            "description": "Name of the unregistered contributor (if applicable).",
                            "example": "John Doe"
                          },
                          "index": {
                            "type": "integer",
                            "description": "Contributor's order in the contributor list.",
                            "example": 0
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "users": {
                            "description": "The user associated with this contributor (if registered).",
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "abc123"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "Canonical link to this contributor.",
                            "example": "https://api.osf.io/v2/registrations/abcd1/contributors/abc123/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links for the result set.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/bibliographic_contributors/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/bibliographic_contributors/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/bibliographic_contributors/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of bibliographic contributors.",
                      "example": 2
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page.",
                      "example": 10
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "abc123",
                    "type": "contributors",
                    "attributes": {
                      "bibliographic": true,
                      "permission": "admin",
                      "unregistered_contributor": null,
                      "index": 0
                    },
                    "relationships": {
                      "users": {
                        "data": {
                          "id": "abc123",
                          "type": "users"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/abcd1/contributors/abc123/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/abcd1/bibliographic_contributors/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/registrations/abcd1/bibliographic_contributors/?page=1",
                  "last": "https://api.osf.io/v2/registrations/abcd1/bibliographic_contributors/?page=1"
                },
                "meta": {
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view contributors on this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/cedar_metadata_records/": {
      "get": {
        "summary": "List CEDAR Metadata Records for a Registration",
        "description": "Retrieve a list of CEDAR metadata records associated with a specific registration.\nCEDAR metadata records store structured metadata collected from external CEDAR templates and are attached to registrations. Each record corresponds to a specific metadata schema provided by the CEDAR system and enhances the discoverability and documentation of a registration.\n#### Permissions\n - Public registrations expose their CEDAR metadata records publicly.\n - Private registrations require appropriate read permissions to view CEDAR metadata records.\n\n#### Returns\n - A JSON object with a `data` array containing CEDAR metadata records related to the registration.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_cedar_metadata_records_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of CEDAR metadata records for the specified registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of CEDAR metadata records.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the CEDAR metadata record.",
                        "example": "cmr789"
                      },
                      "type": {
                        "type": "string",
                        "description": "Resource type identifier.",
                        "example": "cedar-metadata-records"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "Title of the metadata record.",
                            "example": "Sample Dataset Metadata"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the metadata record (e.g., draft, submitted, approved).",
                            "example": "approved"
                          },
                          "schema_name": {
                            "type": "string",
                            "description": "Name of the schema used to generate this metadata record.",
                            "example": "Human Subjects Research Metadata Schema"
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "ISO 8601 formatted date and time the record was created.",
                            "example": "2024-02-20T14:35:00Z"
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "description": "ISO 8601 formatted date and time the record was last modified.",
                            "example": "2024-03-01T10:15:00Z"
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "registration": {
                            "description": "The registration associated with this metadata record.",
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "abcd1"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "registrations"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "Canonical link to this metadata record.",
                            "example": "https://api.osf.io/v2/cedar_metadata_records/cmr789/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links for the result set.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/cedar_metadata_records/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/cedar_metadata_records/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/cedar_metadata_records/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of CEDAR metadata records available.",
                      "example": 1
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page.",
                      "example": 10
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "cmr789",
                    "type": "cedar-metadata-records",
                    "attributes": {
                      "title": "Sample Dataset Metadata",
                      "status": "approved",
                      "schema_name": "Human Subjects Research Metadata Schema",
                      "date_created": "2024-02-20T14:35:00Z",
                      "date_modified": "2024-03-01T10:15:00Z"
                    },
                    "relationships": {
                      "registration": {
                        "data": {
                          "id": "abcd1",
                          "type": "registrations"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/cedar_metadata_records/cmr789/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/abcd1/cedar_metadata_records/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/registrations/abcd1/cedar_metadata_records/?page=1",
                  "last": "https://api.osf.io/v2/registrations/abcd1/cedar_metadata_records/?page=1"
                },
                "meta": {
                  "total": 1,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view CEDAR metadata records on this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/citation/": {
      "get": {
        "summary": "List all citation styles",
        "description": "\nA paginated list of the registration's alternative citation styles\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 citation styles. Each resource in the array is a separate citation styles object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include citation styles that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wucr8/citations/?filter[title]=open.\n\nCitation styles may be filtered by their `id`, `title`, `short-title`, and `summary`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_citations_list",
        "x-response-schema": "Citation Style",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Citation Style",
                "required": [
                  "id",
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the citation style, e.g. APA."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the citation style entity (`citation-styles`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "required": [
                      "date_parsed",
                      "title"
                    ],
                    "description": "The properties of the citation style entity.",
                    "properties": {
                      "date_parsed": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the citation style was first parsed, as an iso8601 formatted timestamp."
                      },
                      "short_title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The short name for the citation style."
                      },
                      "summary": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The summary of the citation style."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The official name of the citation style."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the citation style entity."
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {},
                    "attributes": {
                      "date_parsed": "2015-02-16T04:16:25.732000",
                      "summary": null,
                      "short_title": "AMR",
                      "title": "Academy of Management Review"
                    },
                    "type": "citation-styles",
                    "id": "academy-of-management-review"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/citation/{citation_id}/": {
      "get": {
        "summary": "Retrieve a citation",
        "description": "Retrieves the citation style details for a registration, in CSL format.\n#### Returns\nReturns a JSON object with a `data` key that contains the representation of the details necessary for the citation style.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "citation_id",
            "required": true,
            "description": "The unique identifier of the citation."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_citation_read",
        "x-response-schema": "Citation Detail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Citation Detail",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the entity being cited."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the citation entity (either `node-citation`, `preprint-citation`, or `registration-citation`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the citation entity.",
                  "properties": {
                    "author": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The list of bibliographic authors, represented as dictionaries of their given and family names, for the entitiy being cited."
                    },
                    "doi": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The DOI for the entity being cited, if one exists."
                    },
                    "publisher": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The publisher of the entity being cited. For nodes and registrations, the publisher is the 'Open Science Framework'. For preprints, the publisher is the same as the preprint provider."
                    },
                    "title": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The title of the entity being cited."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the citation entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the entity that is being cited."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "bg4di",
                  "type": "node-citation",
                  "attributes": {
                    "publisher": "Open Science Framework",
                    "author": [
                      {
                        "given": "Timothy M",
                        "family": "Errington"
                      },
                      {
                        "given": "Nicole",
                        "family": "Vasilevsky"
                      },
                      {
                        "given": "Melissa A",
                        "family": "Haendel"
                      }
                    ],
                    "type": "webpage",
                    "title": "Identification Analysis of RP:CB"
                  },
                  "links": {
                    "self": "osf.io/bg4di"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/implicit_contributors/": {
      "get": {
        "summary": "List Implicit Contributors for a Registration",
        "description": "Retrieve a list of implicit contributors for the specified registration.\nImplicit contributors are users who contributed to a parent node or a fork and whose contributions are inherited by this registration. They are not explicitly listed as contributors but have an implied relationship.\n#### Permissions\n - Public registrations expose their implicit contributors publicly.\n - Private registrations require appropriate read permissions to view contributors.\n\n#### Returns\n - A JSON object containing a `data` array of user resources representing implicit contributors to the registration.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_implicit_contributors_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of implicit contributors for the specified registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of users who are implicit contributors.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the user.",
                        "example": "user123"
                      },
                      "type": {
                        "type": "string",
                        "example": "users"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "full_name": {
                            "type": "string",
                            "description": "Full name of the user.",
                            "example": "Ada Lovelace"
                          },
                          "given_name": {
                            "type": "string",
                            "description": "Given name of the user.",
                            "example": "Ada"
                          },
                          "family_name": {
                            "type": "string",
                            "description": "Family name of the user.",
                            "example": "Lovelace"
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date the user registered on OSF.",
                            "example": "2024-01-01T12:00:00Z"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "Canonical API endpoint for this user.",
                            "example": "https://api.osf.io/v2/users/user123/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links for the result set.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/implicit_contributors/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/implicit_contributors/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/implicit_contributors/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of implicit contributors.",
                      "example": 2
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page.",
                      "example": 10
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "user123",
                    "type": "users",
                    "attributes": {
                      "full_name": "Ada Lovelace",
                      "given_name": "Ada",
                      "family_name": "Lovelace",
                      "date_registered": "2024-01-01T12:00:00Z"
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/users/user123/"
                    }
                  },
                  {
                    "id": "user456",
                    "type": "users",
                    "attributes": {
                      "full_name": "Alan Turing",
                      "given_name": "Alan",
                      "family_name": "Turing",
                      "date_registered": "2023-06-01T08:30:00Z"
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/users/user456/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/abcd/implicit_contributors/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/registrations/abcd/implicit_contributors/?page=1",
                  "last": "https://api.osf.io/v2/registrations/abcd/implicit_contributors/?page=1"
                },
                "meta": {
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view the implicit contributors."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/linked_by_nodes/": {
      "get": {
        "summary": "List Linked By Nodes",
        "description": "Retrieve a list of nodes that have added the specified registration as a node link.\nThis endpoint allows you to discover which nodes are referencing the given registration by including it in their node links.\n#### Permissions\n - Public registrations expose their linked by nodes publicly.\n - Private registrations require appropriate read permissions to view this relationship.\n\n#### Returns\n - A JSON object containing a `data` array of node resources that link to the specified registration.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_linked_by_nodes_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of nodes linking to the specified registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of nodes that link to the specified registration.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the node.",
                        "example": "abcd1"
                      },
                      "type": {
                        "type": "string",
                        "example": "nodes"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "The title of the node.",
                            "example": "Linked Node Example"
                          },
                          "description": {
                            "type": "string",
                            "description": "A short description of the node.",
                            "example": "This node includes the registration as a node link."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date the node was created.",
                            "example": "2024-02-15T12:00:00Z"
                          },
                          "public": {
                            "type": "boolean",
                            "description": "Whether the node is publicly visible.",
                            "example": true
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "The canonical API endpoint for this node.",
                            "example": "https://api.osf.io/v2/nodes/abcd1/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links for the result set.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_by_nodes/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_by_nodes/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_by_nodes/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of nodes linking to the specified registration.",
                      "example": 3
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page.",
                      "example": 10
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "abcd1",
                    "type": "nodes",
                    "attributes": {
                      "title": "Linked Node Example",
                      "description": "This node links to the registration.",
                      "date_created": "2024-02-15T12:00:00Z",
                      "public": true
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/abcd1/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/fghij/linked_by_nodes/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/registrations/fghij/linked_by_nodes/?page=1",
                  "last": "https://api.osf.io/v2/registrations/fghij/linked_by_nodes/?page=1"
                },
                "meta": {
                  "total": 1,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view linked by nodes."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/linked_by_registrations/": {
      "get": {
        "summary": "List Linked By Registrations",
        "description": "Retrieve a list of registrations that have added the specified registration as a node link.\nThis allows you to discover which registrations are referencing the given registration through their node links.\n#### Permissions\n - Public registrations expose their linked by registrations publicly.\n - Private registrations require read access to view this relationship.\n\n#### Returns\n - A JSON object containing a `data` array of registration resources that link to this registration.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_linked_by_registrations_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of registrations linking to the specified registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of registrations that link to the specified registration.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the registration.",
                        "example": "abcde"
                      },
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "The title of the registration.",
                            "example": "My Registration"
                          },
                          "description": {
                            "type": "string",
                            "description": "Short description of the registration.",
                            "example": "This is a test registration."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date the registration was created.",
                            "example": "2024-01-01T00:00:00Z"
                          },
                          "public": {
                            "type": "boolean",
                            "description": "Whether the registration is publicly visible.",
                            "example": true
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "description": "The canonical API endpoint for this registration.",
                            "example": "https://api.osf.io/v2/registrations/abcde/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links for the result set.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_by_registrations/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_by_registrations/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_by_registrations/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of registrations linking to the specified registration.",
                      "example": 1
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of results per page.",
                      "example": 10
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "abcde",
                    "type": "registrations",
                    "attributes": {
                      "title": "Linked Registration A",
                      "description": "This registration links to the specified registration.",
                      "date_created": "2024-01-01T00:00:00Z",
                      "public": true
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/abcde/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/fghij/linked_by_registrations/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/registrations/fghij/linked_by_registrations/?page=1",
                  "last": "https://api.osf.io/v2/registrations/fghij/linked_by_registrations/?page=1"
                },
                "meta": {
                  "total": 1,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view linked by registrations."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/node_links/": {
      "get": {
        "summary": "List Node Links for a Registration",
        "description": "Retrieve a list of node links (linked nodes) associated with a specific registration.\nNode links are references from the registration to other nodes (projects or components).   They allow users to create a relationship between a registration and other nodes within OSF.\n#### Permissions\n - Public registrations expose their node links publicly.\n - Private registrations require read access to view node links.\n\n#### Returns\n - A JSON object containing a `data` array with node link resources.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_node_links_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of node links for the specified registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of node links.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the node link.",
                        "example": "abcde"
                      },
                      "type": {
                        "type": "string",
                        "example": "node_links"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "description": "The title of the linked node.",
                            "example": "Linked Project"
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "target": {
                            "type": "object",
                            "description": "Link to the target node.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "nodes"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "xyz12"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "example": "https://api.osf.io/v2/registrations/{registration_id}/node_links/{node_link_id}/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/node_links/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/node_links/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/node_links/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 1,
                      "description": "Total number of node links."
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10,
                      "description": "Number of results per page."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "nl1abc",
                    "type": "node_links",
                    "attributes": {
                      "title": "Linked Project A"
                    },
                    "relationships": {
                      "target": {
                        "data": {
                          "type": "nodes",
                          "id": "node123"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/fghij/node_links/nl1abc/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/fghij/node_links/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/registrations/fghij/node_links/?page=1",
                  "last": "https://api.osf.io/v2/registrations/fghij/node_links/?page=1"
                },
                "meta": {
                  "total": 1,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access this resource."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view node links for this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/registrations/": {
      "get": {
        "summary": "List Child Registrations of a Registration",
        "description": "Retrieve a list of child registrations for a specific registration.\nRegistrations can have hierarchical relationships, where one registration can have multiple child registrations.   This endpoint returns all registrations that are children of the given parent registration.\n#### Permissions\n - Public registrations will display their children publicly.\n - Private registrations require appropriate permissions to view child registrations.\n\n#### Returns\n - A JSON object with a `data` key containing a list of child registration resources.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_children_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the parent registration."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to view (pagination)."
          },
          {
            "in": "query",
            "name": "filter",
            "type": "string",
            "description": "Filter results by specific fields, e.g., `filter[title]=keyword`."
          },
          {
            "in": "query",
            "name": "embed",
            "type": "string",
            "description": "Comma-separated list of related resources to embed."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of child registrations.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "abcde",
                        "description": "The unique identifier of the child registration."
                      },
                      "type": {
                        "type": "string",
                        "example": "registrations"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string",
                            "example": "My Child Registration",
                            "description": "The title of the registration."
                          },
                          "description": {
                            "type": "string",
                            "example": "A detailed description of the child registration."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2023-01-01T12:00:00Z"
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2023-01-02T12:00:00Z"
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "description": "Relationships to other resources."
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "example": "https://api.osf.io/v2/registrations/abcde/",
                            "description": "The canonical API endpoint for this child registration."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/registrations/"
                    },
                    "next": {
                      "type": "string",
                      "example": null
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    },
                    "first": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/registrations/?page=1"
                    },
                    "last": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/registrations/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 1,
                      "description": "Total number of child registrations available."
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10,
                      "description": "Number of items returned per page."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "abcde",
                    "type": "registrations",
                    "attributes": {
                      "title": "Child Registration 1",
                      "description": "Description for child registration 1.",
                      "date_created": "2023-01-01T12:00:00Z",
                      "date_modified": "2023-01-02T12:00:00Z"
                    },
                    "relationships": {},
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/abcde/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/fghij/registrations/",
                  "next": null,
                  "prev": null,
                  "first": "https://api.osf.io/v2/registrations/fghij/registrations/?page=1",
                  "last": "https://api.osf.io/v2/registrations/fghij/registrations/?page=1"
                },
                "meta": {
                  "total": 1,
                  "per_page": 10
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access this resource."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access these registrations."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/relationships/institutions/": {
      "get": {
        "summary": "Retrieve Institution Relationships for a Registration",
        "description": "Retrieve the relationship data for the institutions affiliated with a specific registration.\nThis endpoint returns a resource identifier object for each institution related to the registration.   To retrieve detailed information about these institutions, use the `related` link or query the `/institutions/` endpoint.\n#### Permissions\n - Public registrations will display their institutions publicly.\n - Private registrations require appropriate permissions to view affiliated institutions.\n\n#### Returns\n - A JSON object with a `data` key, containing an array of `institutions` resource identifier objects (`id` and `type`).",
        "tags": [
          "Registrations"
        ],
        "operationId": "relationships_institutions_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the affiliated institutions relationship data for this registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "cos",
                        "description": "The unique identifier for the institution."
                      },
                      "type": {
                        "type": "string",
                        "example": "institutions",
                        "description": "The type of the related resource (always `institutions` for this endpoint)."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/relationships/institutions/",
                      "description": "The link to this relationship view."
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/institutions/",
                      "description": "The link to the related institutions collection."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "cos",
                    "type": "institutions"
                  },
                  {
                    "id": "uva",
                    "type": "institutions"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/abcd1/relationships/institutions/",
                  "related": "https://api.osf.io/v2/registrations/abcd1/institutions/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access this resource."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access the institutions of this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/relationships/linked_nodes/": {
      "get": {
        "summary": "Retrieve Linked Nodes Relationship for a Registration or Node",
        "description": "Retrieve the relationship data for linked nodes associated with a specific registration or node.\nLinked nodes are nodes that have been explicitly linked to the current registration/node through the `linked_nodes` relationship.\nThis endpoint returns an array of linked node resource identifier objects (`id` and `type`).   To retrieve detailed information about each linked node, you should query the `/linked_nodes/` endpoint   or follow the `related` link provided in this response.\n#### Permissions\n - Public nodes/registrations expose linked nodes publicly.\n - Private nodes/registrations require appropriate permissions to view their linked nodes.\n\n#### Returns\n - A JSON object with a `data` key, containing an array of `nodes` resource identifier objects (`id` and `type`).",
        "tags": [
          "Registrations"
        ],
        "operationId": "relationships_linked_nodes_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved linked nodes relationship data for this registration/node.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "abcde",
                        "description": "The unique identifier of the linked node."
                      },
                      "type": {
                        "type": "string",
                        "example": "nodes",
                        "description": "The type of the related resource (always `nodes` for this endpoint)."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/relationships/linked_nodes/",
                      "description": "The link to this relationship view."
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_nodes/",
                      "description": "The link to the related linked nodes resources."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "abcde",
                    "type": "nodes"
                  },
                  {
                    "id": "fghij",
                    "type": "nodes"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/abcd1/relationships/linked_nodes/",
                  "related": "https://api.osf.io/v2/registrations/abcd1/linked_nodes/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access this resource."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access the linked nodes of this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/relationships/linked_registrations/": {
      "get": {
        "summary": "Retrieve Linked Registrations Relationship for a Registration",
        "description": "Retrieve the relationship data for linked registrations associated with a specific registration.\nLinked registrations are registrations that have been explicitly linked to the given registration through the `linked_registrations` relationship.\nThis endpoint returns an array of linked registration resource identifier objects (`id` and `type`).   To retrieve detailed information about each linked registration, you should query the `/registrations/{registration_id}/linked_registrations/` endpoint   or follow the `related` link provided in this response.\n#### Permissions\n - Public registrations expose linked registrations publicly.\n - Private registrations require appropriate permissions to view their linked registrations.\n\n#### Returns\n - A JSON object with a `data` key, containing an array of `registration` resource identifier objects (`id` and `type`).",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_linked_registrations_relationship_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved linked registrations relationship data for this registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "reg123",
                        "description": "The unique identifier of the linked registration."
                      },
                      "type": {
                        "type": "string",
                        "example": "registrations",
                        "description": "The type of the related resource (always `registrations` for this endpoint)."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/relationships/linked_registrations/",
                      "description": "The link to this relationship view."
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/linked_registrations/",
                      "description": "The link to the related linked registrations resources."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "reg123",
                    "type": "registrations"
                  },
                  {
                    "id": "reg456",
                    "type": "registrations"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/abcd1/relationships/linked_registrations/",
                  "related": "https://api.osf.io/v2/registrations/abcd1/linked_registrations/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access this resource."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access the linked registrations of this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/relationships/subjects/": {
      "get": {
        "summary": "Retrieve Subjects Relationship for a Registration",
        "description": "Retrieve the relationship data for the subjects associated with a specific registration.\nThis endpoint returns an array of subject identifiers in a `relationships` object, without the full subject resource details.   To get the full details of the subjects, you should follow the `related` link provided in the relationships object or query the `/registrations/{registration_id}/subjects/` endpoint.\n#### Permissions\n - Public registrations expose this relationship publicly.\n - Private registrations require appropriate permissions to view their subjects.\n\n#### Returns\n - A JSON object with a `data` key, which contains an array of `subject` resource identifier objects (`id` and `type`).",
        "tags": [
          "Registrations"
        ],
        "operationId": "registration_subjects_relationship_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the subject relationship data for this registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "subj123",
                        "description": "The unique identifier of the subject."
                      },
                      "type": {
                        "type": "string",
                        "example": "subjects",
                        "description": "The type of the related resource (always `subjects` for this endpoint)."
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/relationships/subjects/",
                      "description": "The link to this relationship view."
                    },
                    "related": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/registrations/{registration_id}/subjects/",
                      "description": "The link to the related subjects resources."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "subj123",
                    "type": "subjects"
                  },
                  {
                    "id": "subj456",
                    "type": "subjects"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/registrations/abcd1/relationships/subjects/",
                  "related": "https://api.osf.io/v2/registrations/abcd1/subjects/"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access this resource."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access this registration's subjects."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/requests/": {
      "get": {
        "summary": "List Requests for a Registration",
        "description": "Retrieve a list of requests associated with a specific registration.\nRequests allow contributors and moderators to manage changes to a registration, including withdrawal requests, embargo requests, and schema update requests.\n#### Permissions\n - Public registrations expose some request metadata publicly.\n - Private registrations require read access for non-admin contributors.\n - Only admins and moderators can view and manage sensitive request details.\n\n#### Returns\n - A JSON object with a `data` key containing an array of request records.\n - Each request includes the type of request (withdrawal, embargo, etc.), its state,\n  and information about who initiated the request.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_requests_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "query",
            "name": "filter[type]",
            "type": "string",
            "description": "Filter requests by type.\nAllowed values:\n  - withdrawal\n  - embargo\n  - schema_update\n"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to return (pagination)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of requests for this registration.",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "rq1xyz",
                    "type": "registration_requests",
                    "attributes": {
                      "request_type": "withdrawal",
                      "state": "pending",
                      "created": "2024-03-01T12:00:00Z",
                      "updated": "2024-03-03T09:00:00Z",
                      "comment": "Requesting withdrawal due to data errors."
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "user123"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg456"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registration_requests/rq1xyz/"
                    }
                  }
                ],
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access requests for this registration."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view requests for this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/resources/": {
      "get": {
        "summary": "List Related Resources for a Registration",
        "description": "Retrieve a list of resources associated with a specific registration.\nThis endpoint returns a list of nodes, preprints, and other resources that have been explicitly linked to the registration as related resources.  These resources help provide additional context, background, or supporting materials for the registration.\n#### Permissions\n - Public registrations expose their related resources publicly.\n - Private registrations require the user to have read access to view related resources.\n\n#### Returns\n - A JSON object with a `data` key containing an array of related resources.\n - Related resources may include nodes, preprints, and other OSF resources.",
        "tags": [
          "Registrations",
          "Resources"
        ],
        "operationId": "registrations_resources_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to return (pagination)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved related resources for this registration.",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "xyz123",
                    "type": "nodes",
                    "attributes": {
                      "title": "Supporting Project A",
                      "description": "Dataset related to the registration study",
                      "public": true,
                      "date_created": "2024-01-10T10:00:00Z",
                      "date_modified": "2024-03-22T15:30:00Z"
                    },
                    "relationships": {
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xyz123/contributors/"
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/xyz123/institutions/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/xyz123/"
                    }
                  }
                ],
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access related resources for this registration."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view the related resources for this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/schema_responses/": {
      "get": {
        "summary": "List Schema Responses for a Registration",
        "description": "Retrieve a list of all Schema Responses associated with a specific registration.\nSchema Responses represent the answers provided to a registration schema's questions. They reflect the current and historical state of responses submitted for the registration.\nA registration can have multiple schema responses over time due to edits or updates, depending on the registration provider's workflow.\n#### Permissions\n - Publicly accessible for public registrations.\n - Private registrations require appropriate permissions (must be a contributor with read access).\n\n#### Returns\n - A JSON object with a `data` key containing an array of schema response resources.\n - Each schema response includes its current state, related actions, and the data provided in the registration form.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_schema_responses_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to view (pagination)."
          },
          {
            "in": "query",
            "name": "filter[state]",
            "type": "string",
            "description": "Filter schema responses by their state (e.g., `in_progress`, `unapproved`, `approved`, `pending_moderation`)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of schema responses for this registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Schema Responses",
                    "required": [
                      "type",
                      "attributes"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the Schema Response."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The type identifier of the Schema Response (`schema-response`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": false,
                        "description": "The properties of the Schema Response.",
                        "properties": {
                          "revision_justification": {
                            "type": "string",
                            "readOnly": false,
                            "description": "A user provided string representing the reason a new Schema Response was needed."
                          },
                          "date_created": {
                            "type": "integer",
                            "readOnly": false,
                            "description": "The date the Schema Response was created"
                          },
                          "date_submitted": {
                            "type": "integer",
                            "readOnly": false,
                            "description": "The date the Schema Response was submitted for approval."
                          },
                          "date_modified": {
                            "type": "integer",
                            "readOnly": false,
                            "description": "The date the Schema Response was most recently changed."
                          },
                          "revision_responses": {
                            "type": "object",
                            "items": {
                              "type": "object",
                              "description": "Revision responses use a custom key value pair where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`."
                            },
                            "description": "A dictionary object representing responses to to the revision where the key is the block key for that the response. For example in the registration response `{\"q1\": \"Answer 1\"}` the block key is `q1`.."
                          },
                          "reviews_state": {
                            "type": "string",
                            "readOnly": false,
                            "enum": [
                              "initial",
                              "in_progress",
                              "approved",
                              "pending_moderation"
                            ],
                            "description": "A string that represents Schema Response state. `initial` is the state of a Schema Response on a newly registered Registration, to edit a Schema Response you must create a Schema Response Action that triggers a new submission."
                          },
                          "is_pending_current_user_approval": {
                            "type": "boolean",
                            "readOnly": false,
                            "description": "A bool that represents whether the Schema Response needs the current user to approve the state transition."
                          },
                          "is_original_response": {
                            "type": "boolean",
                            "readOnly": false,
                            "description": "A bool that represents whether the Schema Response is the original one that was made when the registration was created."
                          },
                          "updated_response_keys": {
                            "type": "array",
                            "readOnly": true,
                            "description": "A list of strings which the response keys for Registration Response Blocks that were updated from the previous schema."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": false,
                        "description": "URLs to alternative representations of the Schema Response entity.",
                        "properties": {
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": false,
                            "description": "A link to the detail page for a Schema Response."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": false,
                        "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                        "properties": {
                          "actions": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": false,
                            "description": "A link to the Registration Schema Actions endpoint for this Schema Response."
                          },
                          "registration": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": false,
                            "description": "A link to the Registration for this Schema Response."
                          },
                          "registration_schema": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": false,
                            "description": "A link to the Registration Schema for this Schema Response."
                          },
                          "initiated_by": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": false,
                            "description": "A link to the User who initiated the creation of the Schema Response."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "schema-responses",
                        "attributes": {
                          "revision_justification": "I made a mistake.",
                          "revision_responses": {
                            "Q1": "updated response"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "sr123",
                    "type": "schema-responses",
                    "attributes": {
                      "state": "approved",
                      "date_created": "2024-05-01T12:00:00Z",
                      "date_modified": "2024-06-10T09:30:00Z",
                      "revision_justification": "Updated methodology section for clarity"
                    },
                    "relationships": {
                      "registration_schema": {
                        "data": {
                          "type": "registration-schemas",
                          "id": "rs1"
                        }
                      },
                      "registration": {
                        "data": {
                          "type": "registrations",
                          "id": "abcd1"
                        }
                      },
                      "current_user_permissions": {
                        "data": [
                          "read",
                          "write",
                          "admin"
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schema_responses/sr123/"
                    }
                  }
                ],
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access schema responses for a private registration."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view schema responses for this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/subjects/": {
      "get": {
        "summary": "List Registration Subjects",
        "description": "Retrieve a list of taxonomy subjects assigned to a specific registration.\nSubjects represent the topics, disciplines, or areas of research that the registration is categorized under. These subjects help with search, discovery, and classification within the OSF platform.\n#### Permissions\n - Publicly accessible if the registration is public.\n - Private registrations require admin permissions to access.\n\n#### Returns\n - A JSON object with a `data` key containing an array of subject resources.\n - Each subject describes a taxonomy term, including its name and hierarchical position.",
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_subjects_list",
        "parameters": [
          {
            "in": "path",
            "name": "registration_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to view (pagination)."
          },
          {
            "in": "query",
            "name": "filter[text]",
            "type": "string",
            "description": "Filter subjects by name."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of subjects for this registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Taxonomy",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the taxonomy entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the taxonomy entity.",
                        "properties": {
                          "text": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The text name of the taxonomy"
                          },
                          "child_count": {
                            "type": "integer",
                            "readOnly": true,
                            "description": "The number of children this taxonomy contains."
                          },
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the taxonomy entity.",
                        "properties": {
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the taxonomy."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "1234",
                    "type": "taxonomy",
                    "attributes": {
                      "text": "Psychology",
                      "parent_ids": [],
                      "child_ids": [
                        "5678"
                      ],
                      "path": [
                        "Psychology"
                      ],
                      "is_highlighted": true
                    },
                    "relationships": {
                      "parent": {
                        "data": null
                      },
                      "children": {
                        "data": [
                          {
                            "type": "taxonomy",
                            "id": "5678"
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/1234/"
                    }
                  }
                ],
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access subjects for a private registration."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view subjects for this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/registrations/{registration_id}/view_only_links/": {
      "get": {
        "summary": "List all view only links",
        "description": "A paginated list of view only links created for this registration.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 view only links. Each resource in the array is a view only link object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\n#### Permissions\n\nView only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.\n\n#### Filtering\n\nYou can optionally request that the response only include view only links that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registrations/wu3a4/view_only_links/?filter[anonymous]=true.\n\nView Only Links may be filtered based on their `name`, `anonymous` and `date_created` fields. Possible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_view_only_links_list",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "view-only-links",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the view only link."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the view only link ('view-only-links')."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the view only link entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                      },
                      "anonymous": {
                        "type": "boolean",
                        "default": true,
                        "readOnly": false,
                        "description": "Whether or not the view only link has anonymized contributors"
                      },
                      "name": {
                        "type": "string",
                        "default": "Shared project link",
                        "readOnly": false,
                        "description": "The name of the view only link"
                      },
                      "key": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The view only key"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                    "required": [
                      "nodes",
                      "creator"
                    ],
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": false,
                        "description": "A relationship to the nodes which this view only link gives read-only access to."
                      },
                      "creator": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the user who created this view only link."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d03846a170c50025baae61/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d03846a170c50025baae61/"
                    },
                    "attributes": {
                      "date_created": "2017-03-20T20:15:02.488643",
                      "anonymous": false,
                      "key": "c1df490be3294a9bac01ff05c4097ab7",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d03846a170c50025baae61"
                  },
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "self": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/relationships/nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "http://api.osf.io/v2/view_only_links/58d13827a170c50025baae6e/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "http://api.osf.io/v2/users/4xpu9/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "http://api.osf.io/v2/nodes/gaz5n/view_only_links/58d13827a170c50025baae6e/"
                    },
                    "attributes": {
                      "date_created": "2017-03-21T14:26:47.507504",
                      "anonymous": false,
                      "key": "9794ac36085e4d7086ff4dab49daf1cb",
                      "name": "vol name"
                    },
                    "type": "view_only_links",
                    "id": "58d13827a170c50025baae6e"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/view_only_links/{link_id}/": {
      "get": {
        "summary": "Retrieve a view only link",
        "description": "Retrieves the details of a view only link created from this registration.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Permissions\n\nView only links on a registration, public or private, are readable and writeable only by users that are administrators on the registration.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_view_only_links_read",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "view-only-links",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the view only link."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the view only link ('view-only-links')."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the view only link entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                    },
                    "anonymous": {
                      "type": "boolean",
                      "default": true,
                      "readOnly": false,
                      "description": "Whether or not the view only link has anonymized contributors"
                    },
                    "name": {
                      "type": "string",
                      "default": "Shared project link",
                      "readOnly": false,
                      "description": "The name of the view only link"
                    },
                    "key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The view only key"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                  "required": [
                    "nodes",
                    "creator"
                  ],
                  "properties": {
                    "nodes": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A relationship to the nodes which this view only link gives read-only access to."
                    },
                    "creator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the user who created this view only link."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "self": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/relationships/nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "creator": {
                      "links": {
                        "related": {
                          "href": "http://api.osf.io/v2/users/<user_id>/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "attributes": {
                    "date_created": "2017-03-20T20:11:01.603851",
                    "anonymous": false,
                    "key": "<view_only_link_key>",
                    "name": "Test View Only Link"
                  },
                  "type": "view-only-links",
                  "id": "<link_id>"
                }
              }
            }
          }
        }
      }
    },
    "/registrations/{registration_id}/wikis/": {
      "get": {
        "summary": "List all wikis",
        "description": "A paginated list of the registration's wiki pages\n#### Returns\nA list of all registration's current wiki page versions ordered by their date_modified. Each resource contains the full representation of the wiki, meaning additional requests to an individual wiki's detail view are not necessary.\n\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n#### Filtering\nWiki pages can be filtered based on their `name` and `date_modified` fields.\n+ `filter[name]=<Str>` -- filter wiki pages by name\n+ `filter[date_modified][comparison_operator]=YYYY-MM-DDTH:M:S` -- filter wiki pages based on date modified.\n\nPossible comparison operators include 'gt' (greater than), 'gte'(greater than or equal to), 'lt' (less than) and 'lte' (less than or equal to). The date must be in the format YYYY-MM-DD and the time is optional.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "registration_id",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "tags": [
          "Registrations"
        ],
        "operationId": "registrations_wikis_list",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Wiki",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the wiki."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the wiki (`wikis`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the wiki.",
                    "required": [
                      "kind",
                      "name",
                      "date_modified",
                      "extra",
                      "content_type",
                      "path",
                      "current_user_can_comment",
                      "materialized_path",
                      "size"
                    ],
                    "properties": {
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                      },
                      "kind": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type of object."
                      },
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The name/title of the wiki page."
                      },
                      "extra": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A dictionary containing additional metadata about this wiki, including version information."
                      },
                      "content_type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Content type of the wiki (`text/markdown`)."
                      },
                      "path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Path to the wiki object."
                      },
                      "current_user_can_comment": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Whether the current user is allowed to post comments on this wiki."
                      },
                      "materialized_path": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Materialized path to the wiki object."
                      },
                      "size": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Size of the wiki."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                    "required": [
                      "node",
                      "user",
                      "comments"
                    ],
                    "properties": {
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the associated node."
                      },
                      "user": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the user associated with this wiki."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the comments related to this wiki."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the wiki.",
                    "properties": {
                      "download": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL to download the content of the wiki."
                      },
                      "info": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the wiki."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wu3a4/",
                            "meta": {}
                          }
                        }
                      },
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/edb8y/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/wu3a4/comments/?filter%5Btarget%5D=9rb7g",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "info": "https://api.osf.io/v2/wikis/9rb7g/",
                      "download": "https://api.osf.io/v2/wikis/9rb7g/content/",
                      "self": "https://api.osf.io/v2/wikis/9rb7g/"
                    },
                    "attributes": {
                      "kind": "file",
                      "name": "home",
                      "date_modified": "2015-02-11T21:16:50.918000",
                      "extra": {
                        "version": 1
                      },
                      "content_type": "text/markdown",
                      "path": "/9rb7g",
                      "current_user_can_comment": false,
                      "materialized_path": "/9rb7g",
                      "size": 1544
                    },
                    "type": "wikis",
                    "id": "9rb7g"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/providers/registrations/": {
      "get": {
        "summary": "List all Registration Providers",
        "description": "\nA paginated list of all Registration Providers. The returned Registration Providers are sorted by their creation date, with the most recent registrations appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 Registration providers. Each resource in the array is a separate Registration provider object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include preprint providers that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/registration_providers/?filter[id]=osf.\n\nPreprint Providers may be filtered by their `id`, `name`,  and `description`",
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registration_provider_list",
        "x-response-schema": "Registration Provider",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the Registration Provider.",
                  "example": "osf"
                },
                "type": {
                  "type": "string",
                  "description": "The type of resource; always `registration_providers`.",
                  "example": "registration_providers"
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "name",
                    "description",
                    "domain",
                    "subjects_acceptable"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the registration provider.",
                      "example": "Open Science Framework"
                    },
                    "description": {
                      "type": "string",
                      "description": "A short description of the provider.",
                      "example": "A scholarly commons to connect the entire research cycle."
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain associated with the registration provider.",
                      "example": "osf.io"
                    },
                    "banner_path": {
                      "type": "string",
                      "description": "The path to the banner image displayed for the provider.",
                      "example": "/static/img/registration_providers/cos-logo.png"
                    },
                    "logo_path": {
                      "type": "string",
                      "description": "The path to the logo image for the provider.",
                      "example": "/static/img/registration_providers/cos-logo.png"
                    },
                    "header_text": {
                      "type": "string",
                      "description": "Optional custom text for the provider's header.",
                      "example": ""
                    },
                    "social_twitter": {
                      "type": "string",
                      "description": "Twitter handle or link for the provider.",
                      "example": ""
                    },
                    "social_facebook": {
                      "type": "string",
                      "description": "Facebook handle or link for the provider.",
                      "example": ""
                    },
                    "social_instagram": {
                      "type": "string",
                      "description": "Instagram handle or link for the provider.",
                      "example": ""
                    },
                    "email_support": {
                      "type": "string",
                      "description": "Email address for technical support inquiries.",
                      "example": ""
                    },
                    "email_contact": {
                      "type": "string",
                      "description": "Email address for general contact.",
                      "example": ""
                    },
                    "advisory_board": {
                      "type": "string",
                      "description": "Details about the provider's advisory board (if any).",
                      "example": ""
                    },
                    "example": {
                      "type": "string",
                      "description": "Example metadata related to the provider.",
                      "example": "khbvy"
                    },
                    "subjects_acceptable": {
                      "type": "array",
                      "description": "An array describing the subjects acceptable to this provider.   This array consists of nested subject hierarchies with booleans indicating whether all child subjects are included.\n",
                      "example": [
                        [
                          [
                            "584240d954be81056ceca9e5",
                            "584240da54be81056cecac87"
                          ],
                          true
                        ],
                        [
                          [
                            "584240da54be81056cecaca9",
                            "584240db54be81056cecacd6",
                            "584240da54be81056cecaa74"
                          ],
                          false
                        ]
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "description": "Related resources associated with this registration provider.",
                  "properties": {
                    "licenses_acceptable": {
                      "type": "object",
                      "description": "Licenses accepted by this provider.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/registration_providers/osf/licenses/"
                                },
                                "meta": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "taxonomies": {
                      "type": "object",
                      "description": "Taxonomies (subjects) available for this provider.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/registration_providers/osf/taxonomies/"
                                },
                                "meta": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "registrations": {
                      "type": "object",
                      "description": "Registrations managed by this provider.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/registration_providers/osf/registrations/"
                                },
                                "meta": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Links to useful URLs for the registration provider.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "The canonical API endpoint for this provider.",
                      "example": "https://api.osf.io/v2/registration_providers/osf/"
                    },
                    "registrations": {
                      "type": "string",
                      "format": "uri",
                      "description": "Link to the registrations list for this provider.",
                      "example": "https://api.osf.io/v2/registration_providers/osf/registrations/"
                    },
                    "external_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "External website for this provider.",
                      "example": "https://osf.io/registrations/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "licenses_acceptable": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registration_providers/osf/licenses/",
                            "meta": {}
                          }
                        }
                      },
                      "taxonomies": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registration_providers/osf/taxonomies/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registration_providers/osf/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registration_providers/osf/",
                      "registrations": "https://api.osf.io/v2/registration_providers/osf/registrations/",
                      "external_url": "https://osf.io/registrations/"
                    },
                    "attributes": {
                      "social_instagram": "",
                      "advisory_board": "",
                      "email_support": "",
                      "banner_path": "/static/img/registration_providers/cos-logo.png",
                      "logo_path": "/static/img/registration_providers/cos-logo.png",
                      "subjects_acceptable": [],
                      "description": "A scholarly commons to connect the entire research cycle",
                      "social_facebook": "",
                      "header_text": "",
                      "social_twitter": "",
                      "email_contact": "",
                      "example": "khbvy",
                      "name": "Open Science Framework",
                      "domain": "osf.io"
                    },
                    "type": "registration_providers",
                    "id": "osf"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/": {
      "get": {
        "summary": "Retrieve a Registration Provider",
        "description": "Retrieves the details of a Registration Provider.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested Registration Provider, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\n#### Acceptable Subjects Structure\nEach Registration Provider specifies acceptable subjects.\n`subjects_acceptable` is an array found in `attributes`.\nSubjects consist of general parent subjects (e.g., Engineering), more specific child subjects (e.g., Aerospace Engineering), and even more specific grandchild subjects (e.g., Aerodynamics and Fluid Mechanics). Subjects can only be nested 3 deep.\n\n\n    \"subjects_acceptable\": [\n        [\n            [\n                # Parent Subject:\n                # Architecture\n                \"584240d954be81056ceca9e5\",\n\n                # Child Subject:\n                # Architectural Engineering\n                \"584240da54be81056cecac87\"\n            ],\n            # Include all Architectural Engineering's children:\n            true\n        ],\n        [\n            [\n                # Parent Subject:\n                # Engineering\n                \"584240da54be81056cecaca9\",\n\n                # Child Subject:\n                # Aerospace Engineering\n                \"584240db54be81056cecacd6\",\n\n                # Grandchild Subject:\n                # Aerodynamics and Fluid Mechanics\n                \"584240da54be81056cecaa74\"\n            ],\n            # All nestings 3 deep must be false\n            false\n        ]\n    ]\n\nThe above structure would allow Architecture, Architectural Engineering, all of Architectural Engineering's children, Engineering, Aerospace Engineering, and Aerodynamics and Fluid Mechanics.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "The unique identifier of the Registration Provider."
          }
        ],
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registration_provider_detail",
        "x-response-schema": "Registration Provider",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique identifier of the Registration Provider.",
                  "example": "osf"
                },
                "type": {
                  "type": "string",
                  "description": "The type of resource; always `registration_providers`.",
                  "example": "registration_providers"
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "name",
                    "description",
                    "domain",
                    "subjects_acceptable"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the registration provider.",
                      "example": "Open Science Framework"
                    },
                    "description": {
                      "type": "string",
                      "description": "A short description of the provider.",
                      "example": "A scholarly commons to connect the entire research cycle."
                    },
                    "domain": {
                      "type": "string",
                      "description": "The domain associated with the registration provider.",
                      "example": "osf.io"
                    },
                    "banner_path": {
                      "type": "string",
                      "description": "The path to the banner image displayed for the provider.",
                      "example": "/static/img/registration_providers/cos-logo.png"
                    },
                    "logo_path": {
                      "type": "string",
                      "description": "The path to the logo image for the provider.",
                      "example": "/static/img/registration_providers/cos-logo.png"
                    },
                    "header_text": {
                      "type": "string",
                      "description": "Optional custom text for the provider's header.",
                      "example": ""
                    },
                    "social_twitter": {
                      "type": "string",
                      "description": "Twitter handle or link for the provider.",
                      "example": ""
                    },
                    "social_facebook": {
                      "type": "string",
                      "description": "Facebook handle or link for the provider.",
                      "example": ""
                    },
                    "social_instagram": {
                      "type": "string",
                      "description": "Instagram handle or link for the provider.",
                      "example": ""
                    },
                    "email_support": {
                      "type": "string",
                      "description": "Email address for technical support inquiries.",
                      "example": ""
                    },
                    "email_contact": {
                      "type": "string",
                      "description": "Email address for general contact.",
                      "example": ""
                    },
                    "advisory_board": {
                      "type": "string",
                      "description": "Details about the provider's advisory board (if any).",
                      "example": ""
                    },
                    "example": {
                      "type": "string",
                      "description": "Example metadata related to the provider.",
                      "example": "khbvy"
                    },
                    "subjects_acceptable": {
                      "type": "array",
                      "description": "An array describing the subjects acceptable to this provider.   This array consists of nested subject hierarchies with booleans indicating whether all child subjects are included.\n",
                      "example": [
                        [
                          [
                            "584240d954be81056ceca9e5",
                            "584240da54be81056cecac87"
                          ],
                          true
                        ],
                        [
                          [
                            "584240da54be81056cecaca9",
                            "584240db54be81056cecacd6",
                            "584240da54be81056cecaa74"
                          ],
                          false
                        ]
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "description": "Related resources associated with this registration provider.",
                  "properties": {
                    "licenses_acceptable": {
                      "type": "object",
                      "description": "Licenses accepted by this provider.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/registration_providers/osf/licenses/"
                                },
                                "meta": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "taxonomies": {
                      "type": "object",
                      "description": "Taxonomies (subjects) available for this provider.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/registration_providers/osf/taxonomies/"
                                },
                                "meta": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "registrations": {
                      "type": "object",
                      "description": "Registrations managed by this provider.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/registration_providers/osf/registrations/"
                                },
                                "meta": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Links to useful URLs for the registration provider.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "The canonical API endpoint for this provider.",
                      "example": "https://api.osf.io/v2/registration_providers/osf/"
                    },
                    "registrations": {
                      "type": "string",
                      "format": "uri",
                      "description": "Link to the registrations list for this provider.",
                      "example": "https://api.osf.io/v2/registration_providers/osf/registrations/"
                    },
                    "external_url": {
                      "type": "string",
                      "format": "uri",
                      "description": "External website for this provider.",
                      "example": "https://osf.io/registrations/"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "licenses_acceptable": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registration_providers/osf/licenses/",
                          "meta": {}
                        }
                      }
                    },
                    "taxonomies": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registration_providers/osf/taxonomies/",
                          "meta": {}
                        }
                      }
                    },
                    "registrations": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/registration_providers/osf/registrations/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/registration_providers/osf/",
                    "registrations": "https://api.osf.io/v2/registration_providers/osf/registrations/",
                    "external_url": "https://osf.io/registrations/"
                  },
                  "attributes": {
                    "social_instagram": "",
                    "advisory_board": "",
                    "email_support": "",
                    "banner_path": "/static/img/registration_providers/cos-logo.png",
                    "logo_path": "/static/img/registration_providers/cos-logo.png",
                    "subjects_acceptable": [],
                    "description": "A scholarly commons to connect the entire research cycle",
                    "social_facebook": "",
                    "header_text": "",
                    "social_twitter": "",
                    "email_contact": "",
                    "example": "khbvy",
                    "name": "Open Science Framework",
                    "domain": "osf.io"
                  },
                  "type": "preprint_providers",
                  "id": "osf"
                },
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 5,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/registrations/": {
      "get": {
        "summary": "List Registration Requests",
        "description": "Retrieve a list of requests associated with a specific registration.\nRegistration Requests represent user-initiated requests that may include withdrawal requests or requests for changes. These requests are typically part of moderated workflows and require approval or rejection by moderators or contributors.\n#### Permissions - Public registrations: No authentication required to view public requests. - Private registrations: Only contributors with read access may view registration requests. - Moderators of the registration provider may view all requests, including pending ones.\n#### Returns - A JSON object with a `data` key containing an array of registration request resources. - Each request describes the request type, status, creator, and any related comments.",
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registration_requests_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of registration requests.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Registration",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the registration."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the registration entity (`registrations`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the registration entity.",
                        "properties": {
                          "category": {
                            "type": "string",
                            "readOnly": true,
                            "enum": [
                              "analysis",
                              "communication",
                              "data",
                              "hypothesis",
                              "instrumentation",
                              "methods and measures",
                              "procedure",
                              "project",
                              "software",
                              "other"
                            ],
                            "description": "The category of the registered node."
                          },
                          "collection": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                          },
                          "current_user_can_comment": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the current user has permission to post comments on this registration. Comments on registrations can be set to allow all users to comment or restricted to only contributors."
                          },
                          "current_user_permissions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "A list of strings representing the permissions for the current user on this registration. Valid permissions are \"admin\", \"read\", and \"write\"."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the registered node was created, as an iso8601 formatted timestamp."
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the registered node was last modified, as an iso8601 formatted timestamp."
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which this registration was created, as an iso8601 formatted timestamp."
                          },
                          "date_withdrawn": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which this registration was withdrawn, as an iso8601 formatted timestamp."
                          },
                          "description": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The description of the registered node."
                          },
                          "embargo_end_date": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the embargo on this registration will be lifted and the registration will become public, as an iso8601 formatted timestamp."
                          },
                          "fork": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration represents a fork of another node."
                          },
                          "node_license": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary containing the metadata (copyright year and holder) associated with the registered node license (required for certain license types)."
                          },
                          "pending_embargo_approval": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the embargo associated with this registration is pending approval from project administrators."
                          },
                          "pending_registration_approval": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the registration is pending approval from project administrators."
                          },
                          "pending_withdrawal": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the registration is pending approval for withdrawal from project administrators."
                          },
                          "preprint": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                          },
                          "public": {
                            "type": "boolean",
                            "readOnly": false,
                            "description": "Whether or not the registration is publicly visible."
                          },
                          "registration": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this is a registration. This value should always be `true`. This field may be deprecated in future versions."
                          },
                          "registered_meta": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A dictionary with supplemental registration questions and responses."
                          },
                          "registration_supplement": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The title of the registration schema this registration conforms to."
                          },
                          "tags": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "A list of strings that describe the registered node."
                          },
                          "template_from": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The unique ID of the node from which the registered node was templated, if the registered node was created from a template."
                          },
                          "title": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The title of the registered node."
                          },
                          "withdrawn": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not this registration has been withdrawn."
                          },
                          "withdrawal_justification": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The reasoning for why this registration was withdrawn, as entered by the administrator that initiated the withdrawal."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "URLs to other entities or entity collections that have a relationship to the registration entity.",
                        "properties": {
                          "affiliated_institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions this registration is affiliated with."
                          },
                          "children": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of the registered node's children (components)."
                          },
                          "citation": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the citation details of this registration."
                          },
                          "comments": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of comments on this registration."
                          },
                          "contributors": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of contributors on this registration."
                          },
                          "files": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of storage providers that have been enabled on this registration."
                          },
                          "forks": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are forks of this registration."
                          },
                          "identifiers": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of identifiers for this registration (i.e. ARK and DOI identifiers)."
                          },
                          "logs": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of log actions pertaining to this registration."
                          },
                          "linked_nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to this registration."
                          },
                          "node_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes that are linked to this registration. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                          },
                          "parent": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the direct parent of the current registration, if the current registration is a child registration."
                          },
                          "registered_by": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the user that initiated this registration."
                          },
                          "registered_from": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that this registration was registered from."
                          },
                          "registration_schema": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the metaschema that this registration conforms to."
                          },
                          "root": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the node that is the top-level parent of the current registration. If the current registration is the top-level node, the root is the current registration."
                          },
                          "view_only_links": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of view only links that have been created for this registration."
                          },
                          "wikis": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of wiki pages for this registration."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the registrations entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the registration's page on the OSF."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the canonical API endpoint of this registration."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "registrations",
                        "attributes": {
                          "draft_registration": "{draft_registration_id}",
                          "registration_choice": "embargo",
                          "lift_embargo": "2017-05-10T20:44:03.185000"
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if available)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if available)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response, such as total count."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "req1",
                    "type": "registration_request",
                    "attributes": {
                      "request_type": "withdrawal",
                      "state": "pending",
                      "justification": "Authors requested withdrawal due to data issues.",
                      "date_created": "2024-06-01T09:30:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "user123"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg1"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/registrations/reg1/requests/req1/"
                    }
                  },
                  {
                    "id": "req2",
                    "type": "registration_request",
                    "attributes": {
                      "request_type": "withdrawal",
                      "state": "accepted",
                      "justification": "Withdrawal approved by moderator.",
                      "date_created": "2024-06-05T15:45:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "moderator1"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg1"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/registrations/reg1/requests/req2/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/registrations/reg1/requests/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access these registration requests."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/taxonomies/": {
      "get": {
        "summary": "List Provider Taxonomies",
        "description": "Retrieves a list of all taxonomies associated with the provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "filter[parent]",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by parent taxonomy ID ('null' for top-level)."
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomies retrieved successfully.",
            "examples": {
              "application/vnd.api+json": {
                "data": [
                  {
                    "id": "23456",
                    "type": "taxonomies",
                    "attributes": {
                      "text": "Life Sciences"
                    }
                  },
                  {
                    "id": "34567",
                    "type": "taxonomies",
                    "attributes": {
                      "text": "Social Sciences"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/taxonomies/highlighted/": {
      "get": {
        "summary": "List Highlighted Taxonomies",
        "description": "Retrieves highlighted taxonomies associated with the provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Highlighted taxonomies retrieved successfully.",
            "examples": {
              "application/vnd.api+json": {
                "data": [
                  {
                    "id": "12345",
                    "type": "taxonomies",
                    "attributes": {
                      "text": "Psychology"
                    }
                  },
                  {
                    "id": "67890",
                    "type": "taxonomies",
                    "attributes": {
                      "text": "Sociology"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/licenses/": {
      "get": {
        "summary": "Registration Providers Licenses List",
        "description": "\nThis returns the lists of possible licenses for a Registration.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of license ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that Registration"
          }
        ],
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registration_provider_detail",
        "x-response-schema": "Registration Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5c252c8e0989e100220edb73",
                    "type": "licenses",
                    "attributes": {
                      "name": "CC-By Attribution 4.0 International",
                      "text": "Creative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\nSection 2 – Scope.\n\nLicense grant.\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\nSection 3 – License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\nSection 4 – Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n",
                      "url": "https://creativecommons.org/licenses/by/4.0/legalcode",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb73/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb74",
                    "type": "licenses",
                    "attributes": {
                      "name": "Artistic License 2.0",
                      "text": "\t\t       The Artistic License 2.0\n\n\t    Copyright (c) 2000-2006, The Perl Foundation.\n\n     Everyone is permitted to copy and distribute verbatim copies\n      of this license document, but changing it is not allowed.\n\nPreamble\n\nThis license establishes the terms under which a given free software\nPackage may be copied, modified, distributed, and/or redistributed.\nThe intent is that the Copyright Holder maintains some artistic\ncontrol over the development of that Package while still keeping the\nPackage available as open source and free software.\n\nYou are always permitted to make arrangements wholly outside of this\nlicense directly with the Copyright Holder of a given Package.  If the\nterms of this license do not permit the full use that you propose to\nmake of the Package, you should contact the Copyright Holder and seek\na different licensing arrangement. \n\nDefinitions\n\n    \"Copyright Holder\" means the individual(s) or organization(s)\n    named in the copyright notice for the entire Package.\n\n    \"Contributor\" means any party that has contributed code or other\n    material to the Package, in accordance with the Copyright Holder's\n    procedures.\n\n    \"You\" and \"your\" means any person who would like to copy,\n    distribute, or modify the Package.\n\n    \"Package\" means the collection of files distributed by the\n    Copyright Holder, and derivatives of that collection and/or of\n    those files. A given Package may consist of either the Standard\n    Version, or a Modified Version.\n\n    \"Distribute\" means providing a copy of the Package or making it\n    accessible to anyone else, or in the case of a company or\n    organization, to others outside of your company or organization.\n\n    \"Distributor Fee\" means any fee that you charge for Distributing\n    this Package or providing support for this Package to another\n    party.  It does not mean licensing fees.\n\n    \"Standard Version\" refers to the Package if it has not been\n    modified, or has been modified only in ways explicitly requested\n    by the Copyright Holder.\n\n    \"Modified Version\" means the Package, if it has been changed, and\n    such changes were not explicitly requested by the Copyright\n    Holder. \n\n    \"Original License\" means this Artistic License as Distributed with\n    the Standard Version of the Package, in its current version or as\n    it may be modified by The Perl Foundation in the future.\n\n    \"Source\" form means the source code, documentation source, and\n    configuration files for the Package.\n\n    \"Compiled\" form means the compiled bytecode, object code, binary,\n    or any other form resulting from mechanical transformation or\n    translation of the Source form.\n\n\nPermission for Use and Modification Without Distribution\n\n(1)  You are permitted to use the Standard Version and create and use\nModified Versions for any purpose without restriction, provided that\nyou do not Distribute the Modified Version.\n\n\nPermissions for Redistribution of the Standard Version\n\n(2)  You may Distribute verbatim copies of the Source form of the\nStandard Version of this Package in any medium without restriction,\neither gratis or for a Distributor Fee, provided that you duplicate\nall of the original copyright notices and associated disclaimers.  At\nyour discretion, such verbatim copies may or may not include a\nCompiled form of the Package.\n\n(3)  You may apply any bug fixes, portability changes, and other\nmodifications made available from the Copyright Holder.  The resulting\nPackage will still be considered the Standard Version, and as such\nwill be subject to the Original License.\n\n\nDistribution of Modified Versions of the Package as Source \n\n(4)  You may Distribute your Modified Version as Source (either gratis\nor for a Distributor Fee, and with or without a Compiled form of the\nModified Version) provided that you clearly document how it differs\nfrom the Standard Version, including, but not limited to, documenting\nany non-standard features, executables, or modules, and provided that\nyou do at least ONE of the following:\n\n    (a)  make the Modified Version available to the Copyright Holder\n    of the Standard Version, under the Original License, so that the\n    Copyright Holder may include your modifications in the Standard\n    Version.\n\n    (b)  ensure that installation of your Modified Version does not\n    prevent the user installing or running the Standard Version. In\n    addition, the Modified Version must bear a name that is different\n    from the name of the Standard Version.\n\n    (c)  allow anyone who receives a copy of the Modified Version to\n    make the Source form of the Modified Version available to others\n    under\n\t\t\n\t(i)  the Original License or\n\n\t(ii)  a license that permits the licensee to freely copy,\n\tmodify and redistribute the Modified Version using the same\n\tlicensing terms that apply to the copy that the licensee\n\treceived, and requires that the Source form of the Modified\n\tVersion, and of any works derived from it, be made freely\n\tavailable in that license fees are prohibited but Distributor\n\tFees are allowed.\n\n\nDistribution of Compiled Forms of the Standard Version \nor Modified Versions without the Source\n\n(5)  You may Distribute Compiled forms of the Standard Version without\nthe Source, provided that you include complete instructions on how to\nget the Source of the Standard Version.  Such instructions must be\nvalid at the time of your distribution.  If these instructions, at any\ntime while you are carrying out such distribution, become invalid, you\nmust provide new instructions on demand or cease further distribution.\nIf you provide valid instructions or cease distribution within thirty\ndays after you become aware that the instructions are invalid, then\nyou do not forfeit any of your rights under this license.\n\n(6)  You may Distribute a Modified Version in Compiled form without\nthe Source, provided that you comply with Section 4 with respect to\nthe Source of the Modified Version.\n\n\nAggregating or Linking the Package \n\n(7)  You may aggregate the Package (either the Standard Version or\nModified Version) with other packages and Distribute the resulting\naggregation provided that you do not charge a licensing fee for the\nPackage.  Distributor Fees are permitted, and licensing fees for other\ncomponents in the aggregation are permitted. The terms of this license\napply to the use and Distribution of the Standard or Modified Versions\nas included in the aggregation.\n\n(8) You are permitted to link Modified and Standard Versions with\nother works, to embed the Package in a larger work of your own, or to\nbuild stand-alone binary or bytecode versions of applications that\ninclude the Package, and Distribute the result without restriction,\nprovided the result does not expose a direct interface to the Package.\n\n\nItems That are Not Considered Part of a Modified Version \n\n(9) Works (including, but not limited to, modules and scripts) that\nmerely extend or make use of the Package, do not, by themselves, cause\nthe Package to be a Modified Version.  In addition, such works are not\nconsidered parts of the Package itself, and are not subject to the\nterms of this license.\n\n\nGeneral Provisions\n\n(10)  Any use, modification, and distribution of the Standard or\nModified Versions is governed by this Artistic License. By using,\nmodifying or distributing the Package, you accept this license. Do not\nuse, modify, or distribute the Package, if you do not accept this\nlicense.\n\n(11)  If your Modified Version has been derived from a Modified\nVersion made by someone other than you, you are nevertheless required\nto ensure that your Modified Version complies with the requirements of\nthis license.\n\n(12)  This license does not grant you the right to use any trademark,\nservice mark, tradename, or logo of the Copyright Holder.\n\n(13)  This license includes the non-exclusive, worldwide,\nfree-of-charge patent license to make, have made, use, offer to sell,\nsell, import and otherwise transfer the Package with respect to any\npatent claims licensable by the Copyright Holder that are necessarily\ninfringed by the Package. If you institute patent litigation\n(including a cross-claim or counterclaim) against any party alleging\nthat the Package constitutes direct or contributory patent\ninfringement, then this Artistic License to you shall terminate on the\ndate that such litigation is filed.\n\n(14)  Disclaimer of Warranty:\nTHE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS \"AS\nIS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR\nNON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL\nLAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
                      "url": "http://www.perlfoundation.org/attachment/legal/artistic-2_0.txt",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb74/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb75",
                    "type": "licenses",
                    "attributes": {
                      "name": "CC0 1.0 Universal",
                      "text": "Statement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an \"owner\") of an original work of authorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (\"Commons\") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (\"Copyright and Related Rights\"). Copyright and Related Rights include, but are not limited to, the following:\n\nthe right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work;\nmoral rights retained by the original author(s) and/or performer(s);\npublicity and privacy rights pertaining to a person's image or likeness depicted in a Work;\nrights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below;\nrights protecting the extraction, dissemination, use and reuse of data in a Work;\ndatabase rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and\nother similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof.\n2. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"License\"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\nNo trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.\nAffirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law.\nAffirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work.\nAffirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.\n",
                      "url": "https://creativecommons.org/publicdomain/zero/1.0/legalcode",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb75/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb7b",
                    "type": "licenses",
                    "attributes": {
                      "name": "Eclipse Public License 1.0",
                      "text": "Eclipse Public License - v 1.0\n\nTHE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n\n1. DEFINITIONS\n\n\"Contribution\" means:\n\na) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and\nb) in the case of each subsequent Contributor:\ni) changes to the Program, and\nii) additions to the Program;\nwhere such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.\n\"Contributor\" means any person or entity that distributes the Program.\n\n\"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.\n\n\"Program\" means the Contributions distributed in accordance with this Agreement.\n\n\"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors.\n\n2. GRANT OF RIGHTS\n\na) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.\nb) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.\nc) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.\nd) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.\n3. REQUIREMENTS\n\nA Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:\n\na) it complies with the terms and conditions of this Agreement; and\nb) its license agreement:\ni) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;\nii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;\niii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and\niv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.\nWhen the Program is made available in source code form:\n\na) it must be made available under this Agreement; and\nb) a copy of this Agreement must be included with each copy of the Program.\nContributors may not remove or alter any copyright notices contained within the Program.\n\nEach Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.\n\n4. COMMERCIAL DISTRIBUTION\n\nCommercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.\n\nFor example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.\n\n5. NO WARRANTY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.\n\n6. DISCLAIMER OF LIABILITY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n7. GENERAL\n\nIf any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.\n\nIf Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.\n\nAll Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.\n\nEveryone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.\n\nThis Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.\n",
                      "url": "http://www.eclipse.org/legal/epl-v10.html",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb7b/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb7c",
                    "type": "licenses",
                    "attributes": {
                      "name": "Mozilla Public License 2.0",
                      "text": "Mozilla Public License\nVersion 2.0\n\n1. Definitions\n\n1.1. “Contributor”\nmeans each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n\n1.2. “Contributor Version”\nmeans the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n\n1.3. “Contribution”\nmeans Covered Software of a particular Contributor.\n\n1.4. “Covered Software”\nmeans Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n\n1.5. “Incompatible With Secondary Licenses”\nmeans\n\nthat the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or\n\nthat the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License.\n\n1.6. “Executable Form”\nmeans any form of the work other than Source Code Form.\n\n1.7. “Larger Work”\nmeans a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n\n1.8. “License”\nmeans this document.\n\n1.9. “Licensable”\nmeans having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n\n1.10. “Modifications”\nmeans any of the following:\n\nany file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or\n\nany new file in Source Code Form that contains any Covered Software.\n\n1.11. “Patent Claims” of a Contributor\nmeans any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n\n1.12. “Secondary License”\nmeans either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n\n1.13. “Source Code Form”\nmeans the form of the work preferred for making modifications.\n\n1.14. “You” (or “Your”)\nmeans an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n\n2. License Grants and Conditions\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\n\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\n\nfor any code that a Contributor has removed from Covered Software; or\n\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\n\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.\n\n3. Responsibilities\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\n\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n\nIf it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.\n\n5. Termination\n\n5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n\n6. Disclaimer of Warranty\n\nCovered Software is provided under this License on an “as is” basis, without warranty of any kind, either expressed, implied, or statutory, including, without limitation, warranties that the Covered Software is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the Covered Software is with You. Should any Covered Software prove defective in any respect, You (not any Contributor) assume the cost of any necessary servicing, repair, or correction. This disclaimer of warranty constitutes an essential part of this License. No use of any Covered Software is authorized under this License except under this disclaimer.\n\n7. Limitation of Liability\n\nUnder no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall any Contributor, or anyone who distributes Covered Software as permitted above, be liable to You for any direct, indirect, special, incidental, or consequential damages of any character including, without limitation, damages for lost profits, loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party’s negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to You.\n\n8. Litigation\n\nAny litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims.\n\n9. Miscellaneous\n\nThis License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - “Incompatible With Secondary Licenses” Notice\n\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.\n",
                      "url": "https://www.mozilla.org/MPL/2.0/",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb7c/"
                    }
                  }
                ],
                "meta": {
                  "total": 5,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/registrations/temp/licenses/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/actions/": {
      "get": {
        "summary": "List Registration Actions",
        "description": "Retrieve a list of actions associated with a specific registration.\nRegistration Actions represent moderator decisions or contributor responses related to the registration workflow. These actions log the decision history for registrations requiring moderation or contributor approval.\n#### Permissions - Public registrations: No authentication required. - Private registrations: Only contributors with read access may view registration actions.\n#### Returns - A JSON object with a `data` key containing an array of registration action resources. - Registration actions describe the decision history, who performed the action, when, and the resulting state of the registration.",
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registration_actions_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "Page number of results to return (for pagination)."
          },
          {
            "in": "query",
            "name": "per_page",
            "type": "integer",
            "required": false,
            "description": "Number of results per page. Defaults to 10."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of registration actions.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the registration action.",
                        "example": "ract1"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of this resource; always `registration_action`.",
                        "example": "registration_action"
                      },
                      "attributes": {
                        "type": "object",
                        "required": [
                          "trigger",
                          "from_state",
                          "to_state",
                          "date_created"
                        ],
                        "properties": {
                          "trigger": {
                            "type": "string",
                            "description": "The trigger event that caused the action.   Examples include: `submit`, `accept`, `reject`, `edit_comment`, etc.\n",
                            "example": "submit"
                          },
                          "comment": {
                            "type": "string",
                            "description": "Optional comment explaining the reason or context for the action.",
                            "example": "Initial submission"
                          },
                          "from_state": {
                            "type": "string",
                            "description": "The state of the registration before the action was performed.\n",
                            "example": "draft"
                          },
                          "to_state": {
                            "type": "string",
                            "description": "The state of the registration after the action was performed.\n",
                            "example": "unapproved"
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp indicating when the action was performed.",
                            "example": "2024-05-01T12:00:00Z"
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp indicating when the action was last modified (if applicable).",
                            "example": "2024-05-01T12:00:00Z"
                          },
                          "auto": {
                            "type": "boolean",
                            "description": "Indicates if the action was automatically triggered by the system.",
                            "example": false
                          },
                          "visible": {
                            "type": "boolean",
                            "description": "Indicates whether the action is visible to non-admin users.",
                            "example": true
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "required": [
                          "creator",
                          "target"
                        ],
                        "properties": {
                          "creator": {
                            "type": "object",
                            "description": "The user who performed the action.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "user123"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  }
                                }
                              }
                            }
                          },
                          "target": {
                            "type": "object",
                            "description": "The registration this action applies to.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "reg1"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "registrations"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "description": "Links related to this registration action.",
                        "properties": {
                          "self": {
                            "type": "string",
                            "format": "uri",
                            "description": "The API URL to access this action directly.",
                            "example": "https://api.test.osf.io/v2/registrations/reg1/actions/ract1/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if available)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if available)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response, such as total count."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "ract1",
                    "type": "registration_action",
                    "attributes": {
                      "trigger": "submit",
                      "comment": "Initial submission",
                      "from_state": "draft",
                      "to_state": "unapproved",
                      "date_created": "2024-05-01T12:00:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "user123"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg1"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/registrations/reg1/actions/ract1/"
                    }
                  },
                  {
                    "id": "ract2",
                    "type": "registration_action",
                    "attributes": {
                      "trigger": "accept",
                      "comment": "Moderator approved",
                      "from_state": "pending_moderation",
                      "to_state": "approved",
                      "date_created": "2024-05-03T14:45:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "moderator1"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg1"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/registrations/reg1/actions/ract2/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/registrations/reg1/actions/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access these registration actions."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/requests/": {
      "get": {
        "summary": "List Registration Requests",
        "description": "Retrieve a list of requests associated with a specific registration.\nRegistration Requests represent user-initiated requests that may include withdrawal requests or requests for changes. These requests are typically part of moderated workflows and require approval or rejection by moderators or contributors.\n## Permissions\n - Public registrations: No authentication required to view public requests.\n - Private registrations: Only contributors with read access may view registration requests.\n - Moderators of the registration provider may view all requests, including pending ones.\n\n## Returns\n - A JSON object with a `data` key containing an array of registration request resources.\n - Each request describes the request type, status, creator, and any related comments.",
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registration_requests_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of registration requests.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the registration request.",
                        "example": "req1"
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of this resource; always `registration_request`.",
                        "example": "registration_request"
                      },
                      "attributes": {
                        "type": "object",
                        "required": [
                          "request_type",
                          "state",
                          "justification",
                          "date_created"
                        ],
                        "properties": {
                          "request_type": {
                            "type": "string",
                            "description": "Type of the registration request. Common types include `withdrawal`.\n",
                            "example": "withdrawal"
                          },
                          "state": {
                            "type": "string",
                            "description": "Current status of the request in the moderation workflow. Examples include `pending`, `accepted`, `rejected`.\n",
                            "enum": [
                              "pending",
                              "accepted",
                              "rejected"
                            ],
                            "example": "pending"
                          },
                          "justification": {
                            "type": "string",
                            "description": "Justification provided by the requester for making the request.\n",
                            "example": "Authors requested withdrawal due to data issues."
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The date and time when the request was created.",
                            "example": "2024-06-01T09:30:00Z"
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "required": [
                          "creator",
                          "target"
                        ],
                        "properties": {
                          "creator": {
                            "type": "object",
                            "description": "The user who created the request.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "user123"
                                  }
                                }
                              }
                            }
                          },
                          "target": {
                            "type": "object",
                            "description": "The registration this request applies to.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "registrations"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "reg1"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "description": "Links related to this registration request.",
                        "properties": {
                          "self": {
                            "type": "string",
                            "format": "uri",
                            "description": "Link to the detail page for this request.",
                            "example": "https://api.test.osf.io/v2/registrations/reg1/requests/req1/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "description": "Link to the current page of results."
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results (if available)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results (if available)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Meta information about the response, such as total count."
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "req1",
                    "type": "registration_request",
                    "attributes": {
                      "request_type": "withdrawal",
                      "state": "pending",
                      "justification": "Authors requested withdrawal due to data issues.",
                      "date_created": "2024-06-01T09:30:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "user123"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg1"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/registrations/reg1/requests/req1/"
                    }
                  },
                  {
                    "id": "req2",
                    "type": "registration_request",
                    "attributes": {
                      "request_type": "withdrawal",
                      "state": "accepted",
                      "justification": "Withdrawal approved by moderator.",
                      "date_created": "2024-06-05T15:45:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "moderator1"
                        }
                      },
                      "target": {
                        "data": {
                          "type": "registrations",
                          "id": "reg1"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/registrations/reg1/requests/req2/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/registrations/reg1/requests/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access these registration requests."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/schemas/": {
      "get": {
        "summary": "List Registration Schemas for a Provider",
        "description": "Retrieve a list of registration schemas available for a specific registration provider.\nRegistration schemas define the structure and fields that users must complete when registering a project with the provider.\n#### Permissions - No authentication required for public providers. - Private providers may require authentication.\n#### Returns - A JSON object with a `data` array containing the registration schemas.\n",
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registration_provider_schema_list",
        "produces": [
          "application/vnd.api+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the registration provider."
          },
          {
            "name": "filter[active]",
            "in": "query",
            "type": "boolean",
            "required": false,
            "description": "Filter schemas by their active status."
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "required": false,
            "description": "Page number of results to return (pagination)."
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "required": false,
            "description": "Number of results per page."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of registration schemas for the provider.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Registration Schema",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the Registration Schema."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the Registration Schema (`registration-schemas`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The attributes of the Registration Schema.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The name of the Registration Schema"
                          },
                          "active": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Bool that represents whether the Registration Schema is active."
                          },
                          "schema_version": {
                            "type": "integer",
                            "readOnly": true,
                            "description": "The version of this Registration Schema"
                          },
                          "schema": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "items": {
                                "type": "object"
                              }
                            },
                            "readOnly": true,
                            "description": "This dictionary is the raw schema that originally defined the Registration Schema object and it's blocks."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs that link to alternative representations of the Registration Schema.",
                        "properties": {
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for a Registration Schema."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "Links to other entities or entity collections that have a relationship to the Registration Schema.",
                        "properties": {
                          "schema_blocks": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the list of schema blocks that contain the question prompt information for the Registration Schema."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/providers/registrations/{provider_id}/schemas/"
                    },
                    "next": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/providers/registrations/{provider_id}/schemas/?page=2"
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 5
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10
                    },
                    "version": {
                      "type": "string",
                      "example": "2.0"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "prereg-challenge",
                    "type": "registration-schemas",
                    "attributes": {
                      "name": "Prereg Challenge",
                      "description": "Pre-registration schema for the Preregistration Challenge.",
                      "schema_version": 1,
                      "active": true,
                      "schema": [
                        {
                          "id": "q1",
                          "type": "object",
                          "title": "Research Questions",
                          "properties": {
                            "text": "What is your main research question?"
                          }
                        }
                      ],
                      "date_created": "2017-06-01T00:00:00Z",
                      "date_modified": "2023-10-01T00:00:00Z"
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/schemas/registrations/prereg-challenge/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/providers/registrations/{provider_id}/schemas/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.0"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid parameters or input."
          },
          "404": {
            "description": "Not found. Registration provider does not exist."
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/subjects/": {
      "get": {
        "summary": "List Subjects for a Registration",
        "description": "Retrieve a list of subjects (taxonomy terms) assigned to a specific registration.\nSubjects are used to categorize the content of a registration according to a predefined taxonomy. Each subject may be a part of a hierarchical structure, allowing for detailed categorization.\n#### Permissions - Public registrations: No authentication required. - Private registrations: Only contributors with read access can view subjects.\n#### Returns - A JSON object with a `data` key containing an array of subjects. - Each subject includes metadata such as the subject text and its hierarchical position.",
        "tags": [
          "Registration Providers"
        ],
        "operationId": "registrations_subjects_list",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "Page number of results to return (pagination)."
          },
          {
            "in": "query",
            "name": "per_page",
            "type": "integer",
            "required": false,
            "description": "Number of results per page (default 10, maximum 100)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of subjects for the registration.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Taxonomy",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the taxonomy entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the taxonomy entity.",
                        "properties": {
                          "text": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The text name of the taxonomy"
                          },
                          "child_count": {
                            "type": "integer",
                            "readOnly": true,
                            "description": "The number of children this taxonomy contains."
                          },
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the taxonomy entity.",
                        "properties": {
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the taxonomy."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "description": "URL to the next page of results (if applicable)."
                    },
                    "prev": {
                      "type": "string",
                      "description": "URL to the previous page of results (if applicable)."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of subjects assigned to this registration."
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of subjects returned per page."
                    },
                    "version": {
                      "type": "string",
                      "description": "API version."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "12345",
                    "type": "subjects",
                    "attributes": {
                      "text": "Psychology",
                      "parent": null,
                      "children": [
                        {
                          "id": "67890",
                          "text": "Cognitive Psychology"
                        }
                      ]
                    },
                    "relationships": {
                      "children": {
                        "links": {
                          "related": "https://api.test.osf.io/v2/taxonomies/12345/children/"
                        }
                      },
                      "parent": {
                        "links": {
                          "related": null
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/taxonomies/12345/"
                    }
                  },
                  {
                    "id": "67890",
                    "type": "subjects",
                    "attributes": {
                      "text": "Cognitive Psychology",
                      "parent": "Psychology",
                      "children": []
                    },
                    "relationships": {
                      "parent": {
                        "links": {
                          "related": "https://api.test.osf.io/v2/taxonomies/12345/"
                        }
                      },
                      "children": {
                        "links": {
                          "related": null
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/taxonomies/67890/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/registrations/abcd1/subjects/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "per_page": 10,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access this registration's subjects."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access subjects for this registration."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/submissions/": {
      "get": {
        "summary": "List Submissions for a Registration",
        "description": "Retrieve a list of submissions associated with a specific registration.\nA submission represents an attempt to add a registration to a collection, typically requiring moderation or approval.\n#### Permissions - Only authenticated users with access to the registration can view submission data. - Access to submission details may depend on the moderation settings of the related collections.\n#### Returns - A JSON object with a `data` key containing an array of submission objects. - Each submission reflects its current moderation status and relevant metadata.\n",
        "tags": [
          "Registrations",
          "Collection Submissions"
        ],
        "operationId": "registrations_submissions_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration."
          },
          {
            "in": "query",
            "name": "filter[state]",
            "type": "string",
            "required": false,
            "description": "Filter submissions by their state.\nAvailable values:\n- in_progress\n- pending\n- accepted\n- rejected\n- removed\n"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "Page number of results to return (pagination)."
          },
          {
            "in": "query",
            "name": "per_page",
            "type": "integer",
            "required": false,
            "description": "Number of results per page (default 10, maximum 100)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the list of submissions for the registration.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "sub1"
                      },
                      "type": {
                        "type": "string",
                        "example": "collection-submissions"
                      },
                      "attributes": {
                        "type": "object",
                        "required": [
                          "state",
                          "date_submitted"
                        ],
                        "properties": {
                          "state": {
                            "type": "string",
                            "enum": [
                              "in_progress",
                              "pending",
                              "accepted",
                              "rejected",
                              "removed"
                            ],
                            "example": "pending"
                          },
                          "date_submitted": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-12-01T12:00:00Z"
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "required": [
                          "collection",
                          "creator"
                        ],
                        "properties": {
                          "collection": {
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "collections"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "col123"
                                  }
                                }
                              }
                            }
                          },
                          "creator": {
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "user456"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "example": "https://api.test.osf.io/v2/collection_submissions/sub1/"
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string",
                      "description": "Link to the next page of results, if applicable."
                    },
                    "prev": {
                      "type": "string",
                      "description": "Link to the previous page of results, if applicable."
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of submissions."
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of submissions per page."
                    },
                    "version": {
                      "type": "string",
                      "description": "API version."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "sub1",
                    "type": "collection-submissions",
                    "attributes": {
                      "state": "pending",
                      "date_submitted": "2024-12-01T12:00:00Z"
                    },
                    "relationships": {
                      "collection": {
                        "data": {
                          "type": "collections",
                          "id": "col123"
                        }
                      },
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "user456"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/collection_submissions/sub1/"
                    }
                  },
                  {
                    "id": "sub2",
                    "type": "collection-submissions",
                    "attributes": {
                      "state": "accepted",
                      "date_submitted": "2024-10-15T10:00:00Z"
                    },
                    "relationships": {
                      "collection": {
                        "data": {
                          "type": "collections",
                          "id": "col456"
                        }
                      },
                      "creator": {
                        "data": {
                          "type": "users",
                          "id": "user456"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/collection_submissions/sub2/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/registrations/abcd1/submissions/",
                  "next": null,
                  "prev": null
                },
                "meta": {
                  "total": 2,
                  "per_page": 10,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required to access these submissions."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view these submissions."
          },
          "404": {
            "description": "Not Found. No registration matches the given ID."
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/subjects/highlighted/": {
      "get": {
        "summary": "List Highlighted Subjects",
        "description": "Retrieves highlighted subjects for the specified provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Highlighted subjects retrieved successfully.",
            "examples": {
              "application/vnd.api+json": {
                "data": [
                  {
                    "id": "54321",
                    "type": "subjects",
                    "attributes": {
                      "text": "Clinical Psychology"
                    }
                  },
                  {
                    "id": "98765",
                    "type": "subjects",
                    "attributes": {
                      "text": "Neuroscience"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/moderators/": {
      "get": {
        "summary": "List Moderators",
        "description": "Retrieves a list of moderators associated with a provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of moderators retrieved successfully.",
            "examples": {
              "application/vnd.api+json": {
                "data": [
                  {
                    "id": "abcde",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "Jane Doe",
                      "permission_group": "moderator"
                    }
                  },
                  {
                    "id": "fghij",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "John Smith",
                      "permission_group": "admin"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Moderator",
        "description": "Adds a moderator to the specified provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "moderators"
                      ]
                    },
                    "id": {
                      "type": "string",
                      "description": "User ID to add as moderator."
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "permission_group": {
                          "type": "string",
                          "enum": [
                            "moderator",
                            "admin"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Moderator added successfully."
          },
          "400": {
            "description": "Invalid request – user already moderator or invalid data."
          },
          "403": {
            "description": "Forbidden – insufficient permissions."
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/moderators/{moderator_id}/": {
      "get": {
        "summary": "Retrieve Moderator Details",
        "description": "Retrieves details about a moderator associated with a provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the provider."
          },
          {
            "name": "moderator_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the moderator."
          }
        ],
        "responses": {
          "200": {
            "description": "Moderator details retrieved successfully.",
            "examples": {
              "application/vnd.api+json": {
                "data": {
                  "id": "abcde",
                  "type": "moderators",
                  "attributes": {
                    "full_name": "Jane Doe",
                    "permission_group": "moderator",
                    "email": "jane.doe@example.com"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden – insufficient permissions."
          },
          "404": {
            "description": "Not found – moderator does not exist."
          }
        }
      },
      "patch": {
        "summary": "Update Moderator Permissions",
        "description": "Updates the permissions of a moderator associated with a provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "moderator_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "moderators"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "permission_group": {
                          "type": "string",
                          "enum": [
                            "moderator",
                            "admin"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Moderator permissions updated successfully."
          },
          "400": {
            "description": "Invalid request – validation errors."
          },
          "403": {
            "description": "Forbidden – insufficient permissions."
          }
        }
      },
      "delete": {
        "summary": "Remove Moderator",
        "description": "Removes a moderator from the specified provider.\n",
        "tags": [
          "Registration Providers"
        ],
        "parameters": [
          {
            "name": "provider_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "moderator_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Moderator removed successfully."
          },
          "403": {
            "description": "Forbidden – insufficient permissions."
          },
          "404": {
            "description": "Not found – moderator does not exist."
          }
        }
      }
    },
    "/draft_registrations/": {
      "get": {
        "summary": "Retrieve a list of Draft Registrations",
        "description": "Retrieve a list of all currently available Draft Registrations for that user.\n#### Permissions\nOnly Draft Registration contributors may view draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "draft_registrations_read",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Draft Registration entity.",
                  "properties": {
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the Draft Registration."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the Draft Registration."
                    },
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The category of the Draft Registration."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "The searchable tags of the Draft Registration."
                    },
                    "node_license": {
                      "type": "object",
                      "title": "Node License",
                      "properties": {
                        "copyright_holders": {
                          "type": "array",
                          "readOnly": false,
                          "description": "A list of names of copyright holders for the license.",
                          "items": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A copyright holders for the license."
                          }
                        },
                        "year": {
                          "type": "integer",
                          "readOnly": false,
                          "description": "The year the copyright was made."
                        }
                      }
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "The current users permission level for the Draft Registration."
                    },
                    "has_project": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "This indicates whether a Draft Registration was branched from a project."
                    },
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "object",
                      "readOnly": false,
                      "description": "This is a legacy format for `registration_responses`."
                    },
                    "registration_responses": {
                      "type": "object",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "relationships": {
                    "registration_schema": {
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration_schemas"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "626170854968470203611e2c",
                    "type": "draft-registrations",
                    "attributes": {
                      "registration_metadata": {},
                      "registration_responses": {},
                      "datetime_initiated": "2022-04-21T14:56:05.674349Z",
                      "datetime_updated": "2022-04-21T14:56:05.908546Z",
                      "title": "Test Draft",
                      "description": "Test",
                      "category": "",
                      "tags": [],
                      "node_license": null,
                      "current_user_permissions": [
                        "admin",
                        "write",
                        "read"
                      ],
                      "has_project": false
                    },
                    "relationships": {
                      "initiator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/gyht4/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "gyht4",
                          "type": "users"
                        }
                      },
                      "branched_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_nodes/yt5fw/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "yt5fw",
                          "type": "draft_nodes"
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/5e795fc0d2833800195735d0/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5e795fc0d2833800195735d0",
                          "type": "registration-schemas"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/registrations/osf/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "osf",
                          "type": "registration-providers"
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/institutions/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/relationships/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "data": null
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/draft_registrations/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Draft Registration",
        "description": "This creates a Draft Registration that can be used to edit and register research.\nDraft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it's metadata edited.\nA Draft Registration created by this endpoint will not have a Project linked with it by default, but if the user includes a `branched_from` attribute in their Draft Registration creation payload with the value of the `branched_from` being guid of a Project they have permissions for the Draft Registration will be linked to the Project. If you linked your Draft Registration on a Project, your original Project remains editable and will now have the Draft Registration linked to it. \n#### Permissions\nAny user can create a Draft Registration. If the `branched_from` attribute is provided, then the user must be an ADMIN contributor on the Project being registered.\n#### Required\nRequired fields for creating a Draft Registration include:\n\n&nbsp;&nbsp;&nbsp;&nbsp;`schema_id`\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the created Draft Registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Draft Registration entity.",
                  "properties": {
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the Draft Registration."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the Draft Registration."
                    },
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The category of the Draft Registration."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "The searchable tags of the Draft Registration."
                    },
                    "node_license": {
                      "type": "object",
                      "title": "Node License",
                      "properties": {
                        "copyright_holders": {
                          "type": "array",
                          "readOnly": false,
                          "description": "A list of names of copyright holders for the license.",
                          "items": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A copyright holders for the license."
                          }
                        },
                        "year": {
                          "type": "integer",
                          "readOnly": false,
                          "description": "The year the copyright was made."
                        }
                      }
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "The current users permission level for the Draft Registration."
                    },
                    "has_project": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "This indicates whether a Draft Registration was branched from a project."
                    },
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "object",
                      "readOnly": false,
                      "description": "This is a legacy format for `registration_responses`."
                    },
                    "registration_responses": {
                      "type": "object",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "relationships": {
                    "registration_schema": {
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration_schemas"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "draft_registrations_create",
        "x-response-schema": "Draft Registration",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Draft Registration entity.",
                  "properties": {
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the Draft Registration."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the Draft Registration."
                    },
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The category of the Draft Registration."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "The searchable tags of the Draft Registration."
                    },
                    "node_license": {
                      "type": "object",
                      "title": "Node License",
                      "properties": {
                        "copyright_holders": {
                          "type": "array",
                          "readOnly": false,
                          "description": "A list of names of copyright holders for the license.",
                          "items": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A copyright holders for the license."
                          }
                        },
                        "year": {
                          "type": "integer",
                          "readOnly": false,
                          "description": "The year the copyright was made."
                        }
                      }
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "The current users permission level for the Draft Registration."
                    },
                    "has_project": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "This indicates whether a Draft Registration was branched from a project."
                    },
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "object",
                      "readOnly": false,
                      "description": "This is a legacy format for `registration_responses`."
                    },
                    "registration_responses": {
                      "type": "object",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "relationships": {
                    "registration_schema": {
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration_schemas"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "62716076d90ebe0017f2bf42",
                  "type": "draft_registrations",
                  "attributes": {
                    "registration_metadata": {},
                    "registration_responses": {},
                    "datetime_initiated": "2022-05-03T17:03:50.288542",
                    "datetime_updated": "2022-05-03T17:03:50.560153",
                    "title": "Untitled",
                    "description": "",
                    "category": "",
                    "tags": [],
                    "node_license": null
                  },
                  "relationships": {
                    "initiator": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/fgvc6/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "fgvc6",
                        "type": "users"
                      }
                    },
                    "branched_from": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_nodes/nmj5w/",
                          "meta": {}
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/61e02b6c90de34000ae3447a/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration-schemas"
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/providers/registrations/osf/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "osf",
                        "type": "registration-providers"
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/institutions/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/relationships/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/subjects/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/relationships/subjects/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/draft_registrations/62716076d90ebe0017f2bf42/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/": {
      "get": {
        "summary": "Retrieve a Draft Registration",
        "description": "Retrieve the details of a given Draft Registration\nDraft Registrations contain Registration questions that will become part of the Registration. A Registration is a frozen version of the project that can never be deleted, but can be withdrawn and have it's metadata edited.\n\nIf you based your Draft Registration on a Project, your original Project remains editable but will now have the Draft Registration linked to it.\n#### Permissions\nOnly draft registration contributors may view draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested draft registration, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "nodes_draft_registrations_read",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Draft Registration",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the draft registration entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the draft registration entity (`draft_registrations`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the Draft Registration entity.",
                  "properties": {
                    "title": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The title of the Draft Registration."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The description of the Draft Registration."
                    },
                    "category": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The category of the Draft Registration."
                    },
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": false,
                      "description": "The searchable tags of the Draft Registration."
                    },
                    "node_license": {
                      "type": "object",
                      "title": "Node License",
                      "properties": {
                        "copyright_holders": {
                          "type": "array",
                          "readOnly": false,
                          "description": "A list of names of copyright holders for the license.",
                          "items": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A copyright holders for the license."
                          }
                        },
                        "year": {
                          "type": "integer",
                          "readOnly": false,
                          "description": "The year the copyright was made."
                        }
                      }
                    },
                    "current_user_permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "The current users permission level for the Draft Registration."
                    },
                    "has_project": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "This indicates whether a Draft Registration was branched from a project."
                    },
                    "datetime_initiated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was first initiated, as an iso8601 formatted timestamp."
                    },
                    "datetime_updated": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the draft registration was last updated, as an iso8601 formatted timestamp."
                    },
                    "registration_metadata": {
                      "type": "object",
                      "readOnly": false,
                      "description": "This is a legacy format for `registration_responses`."
                    },
                    "registration_responses": {
                      "type": "object",
                      "readOnly": false,
                      "description": "A dictionary of question IDs and responses from the registration schema."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the draft registration entity.",
                  "properties": {
                    "branched_from": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the node that this draft registration was created from."
                    },
                    "initiator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the user who initiated the draft registration."
                    },
                    "registration_schema": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the detailed registration schema that this draft conforms to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "required": [
                    "html"
                  ],
                  "description": "URLs to alternative representations of the draft registration entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the draft registration's page on the OSF."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "draft_registrations",
                  "relationships": {
                    "registration_schema": {
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration_schemas"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "626ffc1ad90ebe0011fc7601",
                  "type": "draft-registrations",
                  "attributes": {
                    "registration_metadata": {},
                    "registration_responses": {},
                    "datetime_initiated": "2022-05-02T15:43:22.981108Z",
                    "datetime_updated": "2022-05-03T13:08:47.334711Z",
                    "title": "Untitled",
                    "description": "",
                    "category": "",
                    "tags": [],
                    "node_license": null
                  },
                  "relationships": {
                    "initiator": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/fgvc6/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "fgvc6",
                        "type": "users"
                      }
                    },
                    "branched_from": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_nodes/ng4w2/",
                          "meta": {}
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/61e02b6c90de34000ae3447a/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration-schemas"
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/providers/registrations/osf/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "osf",
                        "type": "registration-providers"
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/institutions/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/relationships/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "license": {
                      "data": null
                    },
                    "subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/subjects/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/relationships/subjects/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/"
                  }
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a Draft Registration",
        "description": "Updates a Draft Registration by setting the values of the attributes specified in the request body. Any unspecified attributes will be left unchanged. Note this will not register or change the machine state of a Draft Registration, it can only edit the Draft Registration's attributes prior to its registration.\n#### Permissions\nOnly draft registration contributors may view draft registrations and only draft registration contributors with WRITE or ADMIN permissions may update draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing the new representation of the updated draft registration, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "id": "626ffc1ad90ebe0011fc7601",
                  "type": "draft_registrations",
                  "attributes": {
                    "title": "test title change",
                    "registration_responses": {
                      "summary": "Test Value"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "nodes_draft_registrations_partial_update",
        "x-response-schema": "Draft Registration",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "626ffc1ad90ebe0011fc7601",
                  "type": "draft_registrations",
                  "attributes": {
                    "registration_metadata": {
                      "summary": {
                        "comments": [],
                        "value": "Test",
                        "extra": []
                      },
                      "uploader": {
                        "comments": [],
                        "value": "",
                        "extra": []
                      }
                    },
                    "registration_responses": {
                      "summary": "Test Value"
                    },
                    "datetime_initiated": "2022-05-02T15:43:22.981108",
                    "datetime_updated": "2022-05-03T18:34:29.504428",
                    "title": "test title change",
                    "description": "",
                    "category": "",
                    "tags": [],
                    "node_license": "None"
                  },
                  "relationships": {
                    "initiator": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/fgvc6/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "fgvc6",
                        "type": "users"
                      }
                    },
                    "branched_from": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_nodes/ng4w2/",
                          "meta": {}
                        }
                      }
                    },
                    "registration_schema": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/schemas/registrations/61e02b6c90de34000ae3447a/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "61e02b6c90de34000ae3447a",
                        "type": "registration-schemas"
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/providers/registrations/osf/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "osf",
                        "type": "registration-providers"
                      }
                    },
                    "affiliated_institutions": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/institutions/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/relationships/institutions/",
                          "meta": {}
                        }
                      }
                    },
                    "contributors": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/contributors/",
                          "meta": {}
                        }
                      }
                    },
                    "subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/subjects/",
                          "meta": {}
                        },
                        "self": {
                          "href": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/relationships/subjects/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a draft registration",
        "description": "Permanently deletes a draft registration. A draft that has already been registered cannot be deleted.\n#### Permissions\nOnly draft registration contributors with ADMIN permissions may delete draft registrations\n#### Returns\nIf the request is successful, no content is returned.\nIf the request is unsuccessful, a JSON object with an `errors` key containing information about the failure will be returned. Refer to the [list of error codes]() to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "nodes_draft_registrations_delete",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/contributors/": {
      "get": {
        "summary": "Retreive a list Contributors from a Draft Registration",
        "description": "Retrieves the details of all given Contributors for a Draft Registration.\nContributors are users who can make changes to the Draft Registration.\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the Draft Registration."
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "draft_registration_contributors_list",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "626170854968470203611e2c-gyht4",
                    "type": "contributors",
                    "attributes": {
                      "index": 0,
                      "bibliographic": true,
                      "permission": "admin",
                      "unregistered_contributor": null
                    },
                    "relationships": {
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/gyht4/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "gyht4",
                          "type": "users"
                        }
                      },
                      "draft_registration": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "users": {
                        "data": {
                          "id": "gyht4",
                          "type": "users",
                          "attributes": {
                            "full_name": "John Tordoff",
                            "given_name": "John",
                            "middle_names": "",
                            "family_name": "Tordoff",
                            "suffix": "",
                            "date_registered": "2017-04-26T15:39:29.779518Z",
                            "active": true,
                            "timezone": "America/New_York",
                            "locale": "en_US",
                            "social": {
                              "ssrn": "",
                              "orcid": "0000-0001-8693-9390",
                              "github": [
                                "Johnetordoff"
                              ],
                              "scholar": "",
                              "twitter": [],
                              "linkedIn": [],
                              "impactStory": "",
                              "baiduScholar": "",
                              "researchGate": "",
                              "researcherId": "",
                              "profileWebsites": [
                                "https://test.com"
                              ],
                              "academiaProfileID": "",
                              "academiaInstitution": ""
                            },
                            "employment": [],
                            "education": [],
                            "can_view_reviews": [],
                            "accepted_terms_of_service": true
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/gyht4/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/gyht4/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/gyht4/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/gyht4/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/users/gyht4/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/gyht4/preprints/",
                                  "meta": {}
                                }
                              }
                            },
                            "emails": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/gyht4/settings/emails/",
                                  "meta": {}
                                }
                              }
                            },
                            "default_region": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/regions/us/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/users/gyht4/settings/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "gyht4",
                                "type": "user-settings"
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/gyht4/",
                            "profile_image": "https://secure.gravatar.com/avatar/a61b3827662ddbc604c78e1c8f6a3636?d=identicon",
                            "self": "https://api.osf.io/v2/users/gyht4/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/contributors/gyht4/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "total_bibliographic": 1,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/contributors/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add a contributor to a Draft Registration",
        "description": "Adds a contributor to a Draft Registration, contributors can view, edit, register or delete a Draft Registration depending on their permissions.\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\" contributors. From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.\n#### Permissions\nOnly project administrators can add contributors to a Draft Registration.\n#### Required\nA relationship object with a `data` key, containing the `users` type and valid user ID is required.\nAll attributes describing the relationship between the node and the user are optional.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the new contributor, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the Draft Registration."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "Contributor",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the contributor entity. Contributor identifiers have the form {node_id}-{user_id}."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the contributor entity (`contributors`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the contributor entity.",
                  "properties": {
                    "bibliographic": {
                      "type": "boolean",
                      "readOnly": false,
                      "description": "Whether or not the contributor will be included in citations for the node. The default value is true."
                    },
                    "index": {
                      "type": "integer",
                      "readOnly": false,
                      "description": "The position of this contributor in the list of project contributors and in project citations."
                    },
                    "permission": {
                      "type": "string",
                      "enum": [
                        "read",
                        "write",
                        "admin"
                      ],
                      "readOnly": false,
                      "description": "The permission level of the contributor. The default value is 'write'."
                    },
                    "unregistered_contributor": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The assigned name of the contributor if the contributor has not yet claimed their account."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the contributor entity.",
                  "required": [
                    "node",
                    "user"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the contributor entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the the canonical API endpoint for the contributor."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "contributors",
                  "attributes": {},
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "guid0"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "draft_registration_contributors_create",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Success",
            "examples": {
              "application/json": {
                "data": {
                  "id": "62718748d90ebe0012c38815-tmxzg",
                  "type": "contributors",
                  "attributes": {
                    "index": 2,
                    "bibliographic": true,
                    "permission": "write",
                    "unregistered_contributor": null
                  },
                  "relationships": {
                    "users": {
                      "links": {
                        "related": {
                          "href": "http://localhost:8000/v2/users/tmxzg/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "tmxzg",
                        "type": "users"
                      }
                    },
                    "draft_registration": {
                      "links": {
                        "related": {
                          "href": "http://localhost:8000/v2/draft_registrations/62718748d90ebe0012c38815/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "id": "tmxzg",
                        "type": "users",
                        "attributes": {
                          "full_name": "Paul Dominguez",
                          "given_name": "Paul",
                          "middle_names": "",
                          "family_name": "Dominguez",
                          "suffix": "",
                          "date_registered": "2022-03-04T20:13:35.594990",
                          "active": true,
                          "timezone": "Etc/UTC",
                          "locale": "en_US",
                          "social": {},
                          "employment": [],
                          "education": []
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "http://localhost:8000/v2/users/tmxzg/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "http://localhost:8000/v2/users/tmxzg/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "http://localhost:8000/v2/users/tmxzg/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "http://localhost:8000/v2/users/tmxzg/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "http://localhost:8000/v2/users/tmxzg/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "http://localhost:8000/v2/users/tmxzg/preprints/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "http://localhost:5000/tmxzg/",
                          "profile_image": "https://secure.gravatar.com/avatar/c16b8f65c6ac5dc8511fbffab8ef8918?d=identicon",
                          "self": "http://localhost:8000/v2/users/tmxzg/"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "http://localhost:8000/v2/draft_registrations/62718748d90ebe0012c38815/contributors/tmxzg/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/contributors/{user_id}/": {
      "get": {
        "summary": "Retreive a Contributor from a Draft Registration",
        "description": "Retrieves the details of a given contributor.\n\nContributors are users who can view or edit to the Draft Registrations.\n\nContributors are categorized as either \"bibliographic\" or \"non-bibliographic\". From a permissions standpoint, both are the same, but bibliographic contributors are included in citations and are listed on the project overview page on the OSF, while non-bibliographic contributors are not.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the Draft Registration."
          },
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the Contributor."
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "draft_registration_contributors_create",
        "x-response-schema": "Contributor",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "data": {
                  "id": "626170854968470203611e2c-gyht4",
                  "type": "contributors",
                  "attributes": {
                    "index": 0,
                    "bibliographic": true,
                    "permission": "admin",
                    "unregistered_contributor": null
                  },
                  "relationships": {
                    "users": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/gyht4/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "gyht4",
                        "type": "users"
                      }
                    },
                    "draft_registration": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "embeds": {
                    "users": {
                      "data": {
                        "id": "gyht4",
                        "type": "users",
                        "attributes": {
                          "full_name": "John Tordoff",
                          "given_name": "John",
                          "middle_names": "",
                          "family_name": "Tordoff",
                          "suffix": "",
                          "date_registered": "2017-04-26T15:39:29.779518Z",
                          "active": true,
                          "timezone": "America/New_York",
                          "locale": "en_US",
                          "social": {
                            "ssrn": "",
                            "orcid": "0000-0001-8693-9390",
                            "github": [
                              "Johnetordoff"
                            ],
                            "scholar": "",
                            "twitter": [],
                            "linkedIn": [],
                            "impactStory": "",
                            "baiduScholar": "",
                            "researchGate": "",
                            "researcherId": "",
                            "profileWebsites": [
                              "https://test.com"
                            ],
                            "academiaProfileID": "",
                            "academiaInstitution": ""
                          },
                          "employment": [],
                          "education": [],
                          "can_view_reviews": [],
                          "accepted_terms_of_service": true
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/gyht4/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/gyht4/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/gyht4/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/gyht4/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "https://api.osf.io/v2/users/gyht4/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/gyht4/preprints/",
                                "meta": {}
                              }
                            }
                          },
                          "emails": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/gyht4/settings/emails/",
                                "meta": {}
                              }
                            }
                          },
                          "default_region": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/regions/us/",
                                "meta": {}
                              }
                            },
                            "data": {
                              "id": "us",
                              "type": "regions"
                            }
                          },
                          "settings": {
                            "links": {
                              "related": {
                                "href": "https://api.osf.io/v2/users/gyht4/settings/",
                                "meta": {}
                              }
                            },
                            "data": {
                              "id": "gyht4",
                              "type": "user-settings"
                            }
                          }
                        },
                        "links": {
                          "html": "https://osf.io/gyht4/",
                          "profile_image": "https://secure.gravatar.com/avatar/a61b3827662ddbc604c78e1c8f6a3636?d=identicon",
                          "self": "https://api.osf.io/v2/users/gyht4/"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/draft_registrations/626170854968470203611e2c/contributors/gyht4/"
                  }
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/institutions/": {
      "get": {
        "summary": "Retrieve Institutions afilliated with a Draft Registration",
        "description": "Once a properly authenticated user has marked their registration as affiliated with an institution, that institution and any others added will appear in this list.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "nodes_draft_registrations_read",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Institution",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the institution entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the institution entity (`institutions`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the institution entity.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Full name of the institution."
                    },
                    "description": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Description of the institution."
                    },
                    "iri": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Internationalized Resource Identifier (IRI) of the institution."
                    },
                    "ror_iri": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Research Organization Registry (ROR) IRI of the institution."
                    },
                    "iris": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "List of IRIs associated with the institution."
                    },
                    "assets": {
                      "type": "object",
                      "properties": {
                        "logo": {
                          "type": "string",
                          "readOnly": true,
                          "description": "URL to the institution's logo."
                        },
                        "logo_rounded": {
                          "type": "string",
                          "readOnly": true,
                          "description": "URL to the institution's logo with rounded corners."
                        },
                        "banner": {
                          "type": "string",
                          "readOnly": true,
                          "description": "URL to the institution's banner."
                        },
                        "logo_path": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Static path to the institution specific logo."
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                  "properties": {
                    "nodes": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the nodes affiliated with the institution."
                    },
                    "users": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the users affiliated with the institution."
                    },
                    "registrations": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A relationship to the registrations affiliated with the institution."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the institutions entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the institution."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "lab",
                    "type": "institutions",
                    "attributes": {
                      "name": "Lab [Test]",
                      "description": "Lab test",
                      "assets": {
                        "logo": "/static/img/institutions/shields/lab-shield.png",
                        "logo_rounded": "/static/img/institutions/shields-rounded-corners/lab-shield-rounded-corners.png"
                      }
                    },
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/lab/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/lab/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/lab/users/",
                            "meta": {}
                          }
                        }
                      },
                      "department_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/lab/metrics/departments/",
                            "meta": {}
                          }
                        }
                      },
                      "user_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/lab/metrics/users/",
                            "meta": {}
                          }
                        }
                      },
                      "summary_metrics": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/lab/metrics/summary/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "a2jlab",
                          "type": "institution-summary-metrics"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/lab/",
                      "html": "http://localhost:5000/institutions/lab/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/institutions/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/subjects/": {
      "get": {
        "summary": "Retrieve Subjects associated with a Draft Registration",
        "description": "This retrieves a list of subjects associated with a Draft Registration. Subjects are formatted here in a flat paginated list, but are hierarchical and nested by specificity of subject matter.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "draft_id",
            "required": true,
            "description": "The unique identifier of the draft registration."
          }
        ],
        "tags": [
          "Draft Registrations"
        ],
        "operationId": "nodes_draft_registrations_subjects",
        "x-response-schema": "Draft Registration",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Subject",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subject."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the Subject (`subject`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The attributes of the Subject.",
                  "properties": {
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name for the subject (`Arts and Humanities`)"
                    },
                    "taxonomy_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name for the taxonomy used to name subjects (`bepress`)"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                  "properties": {
                    "parent": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the parent for this Subject."
                    },
                    "children": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the children for this Subject."
                    }
                  }
                },
                "embeds": {
                  "type": "object",
                  "title": "Embeds",
                  "readOnly": true,
                  "description": "The parent is always embedded in the Subject response.",
                  "properties": {
                    "parent": {
                      "type": "object",
                      "title": "parent",
                      "readOnly": true,
                      "description": "The parent of the Subject.",
                      "properties": {
                        "data": {
                          "type": "object",
                          "title": "data",
                          "readOnly": true,
                          "properties": {
                            "data": {
                              "type": "object",
                              "title": "data",
                              "readOnly": true,
                              "description": "A JSON object containing the embedded information."
                            },
                            "id": {
                              "type": "string",
                              "readOnly": true,
                              "description": "The unique identifier of the Subject."
                            },
                            "type": {
                              "type": "string",
                              "readOnly": true,
                              "description": "The type identifier of the Subject (`subject`)."
                            },
                            "attributes": {
                              "type": "object",
                              "title": "Attributes",
                              "readOnly": true,
                              "description": "The attributes of the Subject.",
                              "properties": {
                                "text": {
                                  "type": "string",
                                  "readOnly": true,
                                  "description": "The name for the subject (`Arts and Humanities`)"
                                },
                                "taxonomy_name": {
                                  "type": "string",
                                  "readOnly": true,
                                  "description": "The name for the taxonmy used to name subjects (`bepress`)"
                                }
                              }
                            },
                            "relationships": {
                              "type": "object",
                              "title": "Relationships",
                              "readOnly": true,
                              "description": "Links to other entities or entity collections that have a relationship to the file entity.",
                              "properties": {
                                "parent": {
                                  "type": "string",
                                  "format": "URL",
                                  "readOnly": true,
                                  "description": "A link to the parent for this Subject."
                                },
                                "children": {
                                  "type": "string",
                                  "format": "URL",
                                  "readOnly": true,
                                  "description": "A link to the children for this Subject."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the Subject entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for a Subject."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "61e02bee90de34000ae3449e",
                    "type": "subjects",
                    "attributes": {
                      "text": "Philosophy",
                      "taxonomy_name": ""
                    },
                    "relationships": {
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/subjects/61e02bee90de34000ae344b5/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "61e02bee90de34000ae344b5",
                          "type": "subjects"
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/subjects/61e02bee90de34000ae3449e/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "data": {
                          "id": "61e02bee90de34000ae344b5",
                          "type": "subjects",
                          "attributes": {
                            "text": "Arts and Humanities",
                            "taxonomy_name": ""
                          },
                          "relationships": {
                            "parent": {
                              "data": null
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/subjects/61e02bee90de34000ae344b5/children/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "embeds": {
                            "parent": {
                              "errors": [
                                {
                                  "detail": "Not found."
                                }
                              ]
                            }
                          },
                          "links": {
                            "self": "https://api.osf.io/v2/subjects/61e02bee90de34000ae344b5/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/subjects/61e02bee90de34000ae3449e/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/draft_registrations/626ffc1ad90ebe0011fc7601/subjects/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/bibliographic_contributors/": {
      "get": {
        "summary": "List bibliographic contributors on a draft registration",
        "description": "Retrieve a list of contributors marked as bibliographic (visible) for a draft registration.",
        "tags": [
          "Draft Registrations",
          "Contributors"
        ],
        "operationId": "draft_registration_bibliographic_contributors_list",
        "parameters": [
          {
            "name": "draft_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Draft registration ID."
          }
        ],
        "responses": {
          "200": {
            "description": "Bibliographic contributors retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Contributor ID"
                      },
                      "type": {
                        "type": "string",
                        "example": "contributors"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "full_name": {
                            "type": "string"
                          },
                          "bibliographic": {
                            "type": "boolean",
                            "description": "Indicates if the contributor is visible."
                          },
                          "email": {
                            "type": "string",
                            "description": "Email of the contributor."
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "id": "user123",
                    "type": "contributors",
                    "attributes": {
                      "full_name": "Alice Smith",
                      "bibliographic": true,
                      "email": "alice@example.com"
                    }
                  },
                  {
                    "id": "user456",
                    "type": "contributors",
                    "attributes": {
                      "full_name": "Bob Jones",
                      "bibliographic": true,
                      "email": "bob@example.com"
                    }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Draft registration not found."
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/relationships/institutions/": {
      "get": {
        "summary": "Retrieve affiliated institutions for a draft registration",
        "description": "Retrieve the list of institutions currently affiliated with a draft registration.\nReturns institution IDs in JSON:API relationship format.\n",
        "tags": [
          "Draft Registrations",
          "Institutions"
        ],
        "operationId": "draft_registration_institutions_relationship_retrieve",
        "parameters": [
          {
            "name": "draft_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the draft registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Institutions retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "institutions",
                        "description": "The resource type; must be `institutions`."
                      },
                      "id": {
                        "type": "string",
                        "example": "inst123",
                        "description": "The unique identifier of the institution."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "institutions",
                    "id": "inst123"
                  },
                  {
                    "type": "institutions",
                    "id": "inst456"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. You do not have permission to view affiliated institutions."
          },
          "404": {
            "description": "Draft registration not found."
          }
        }
      },
      "post": {
        "summary": "Add affiliated institutions to a draft registration",
        "description": "Add one or more institutions to a draft registration by their identifiers.\nThe user must be affiliated with the institutions they are attempting to add.\n",
        "tags": [
          "Draft Registrations",
          "Institutions"
        ],
        "operationId": "draft_registration_institutions_relationship_add",
        "parameters": [
          {
            "name": "draft_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the draft registration."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "JSON:API list of institution identifiers to associate with the draft registration.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "institutions",
                        "description": "The resource type; must be `institutions`."
                      },
                      "id": {
                        "type": "string",
                        "example": "inst123",
                        "description": "The unique ID of the institution to add."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Institutions added successfully."
          },
          "400": {
            "description": "Bad Request. User is not affiliated with the specified institution(s)."
          },
          "403": {
            "description": "Forbidden. You do not have permission to add institutions."
          },
          "404": {
            "description": "Draft registration not found."
          }
        }
      },
      "delete": {
        "summary": "Remove affiliated institutions from a draft registration",
        "description": "Remove one or more institutions from the draft registration by their identifiers.\nThis operation only modifies the relationship and does not delete the institutions themselves.\n",
        "tags": [
          "Draft Registrations",
          "Institutions"
        ],
        "operationId": "draft_registration_institutions_relationship_delete",
        "parameters": [
          {
            "name": "draft_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the draft registration."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "JSON:API list of institution identifiers to disassociate from the draft registration.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "institutions",
                        "description": "The resource type; must be `institutions`."
                      },
                      "id": {
                        "type": "string",
                        "example": "inst456",
                        "description": "The unique ID of the institution to remove."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Institutions removed successfully."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify institutions."
          },
          "404": {
            "description": "Draft registration not found."
          }
        }
      }
    },
    "/draft_registrations/{draft_id}/relationships/subjects/": {
      "get": {
        "summary": "Retrieve subjects relationship for a draft registration",
        "description": "Retrieve the list of subjects currently associated with a draft registration.\nThis endpoint returns subject IDs in the JSON:API relationship format.\n",
        "tags": [
          "Draft Registrations",
          "Subjects"
        ],
        "operationId": "draft_registration_subjects_relationship_retrieve",
        "parameters": [
          {
            "name": "draft_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the draft registration."
          }
        ],
        "responses": {
          "200": {
            "description": "Subjects retrieved successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "subjects",
                        "description": "The resource type; always `subjects`."
                      },
                      "id": {
                        "type": "string",
                        "example": "abc123",
                        "description": "The unique identifier for the subject."
                      }
                    }
                  }
                }
              },
              "example": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "abc123"
                  },
                  {
                    "type": "subjects",
                    "id": "def456"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden. You don't have permission to view these subjects."
          },
          "404": {
            "description": "Draft registration not found."
          }
        }
      },
      "post": {
        "summary": "Add subjects to a draft registration",
        "description": "Add one or more subjects to the draft registration by their identifiers.\nThis modifies the subjects relationship and does not affect the subject resource itself.\n",
        "tags": [
          "Draft Registrations",
          "Subjects"
        ],
        "operationId": "draft_registration_subjects_relationship_add",
        "parameters": [
          {
            "name": "draft_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the draft registration."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "JSON:API list of subject identifiers to associate with the draft registration.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "subjects",
                        "description": "The resource type; must be `subjects`."
                      },
                      "id": {
                        "type": "string",
                        "example": "abc123",
                        "description": "The unique ID of the subject to add."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subjects added successfully."
          },
          "403": {
            "description": "Forbidden. You don't have permission to modify subjects."
          },
          "404": {
            "description": "Draft registration not found."
          }
        }
      },
      "delete": {
        "summary": "Remove subjects from a draft registration",
        "description": "Remove one or more subjects from the draft registration by their identifiers.\nThis only updates the relationship and does not delete the subject resource.\n",
        "tags": [
          "Draft Registrations",
          "Subjects"
        ],
        "operationId": "draft_registration_subjects_relationship_delete",
        "parameters": [
          {
            "name": "draft_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the draft registration."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "JSON:API list of subject identifiers to disassociate from the draft registration.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "example": "subjects",
                        "description": "The resource type; must be `subjects`."
                      },
                      "id": {
                        "type": "string",
                        "example": "def456",
                        "description": "The unique ID of the subject to remove."
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subjects removed successfully."
          },
          "403": {
            "description": "Forbidden. You don't have permission to modify subjects."
          },
          "404": {
            "description": "Draft registration not found."
          }
        }
      }
    },
    "/taxonomies/": {
      "get": {
        "summary": "List all taxonomies",
        "description": "\nA paginated list of all [bepress disciplines taxonomies](https://www.bepress.com/wp-content/uploads/2016/12/Digital-Commons-Disciplines-taxonomy-2017-01.pdf).\nNote: this API endpoint is under active development, and is subject to change in the future.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 taxonomies. Each resource in the array is a separate taxonomy object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include taxonomies that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/taxonomies/?filter['id']='{taxonomy_id}'.\n\nTaxonomies may be filtered by their `id`, `parents`, and `text`.",
        "tags": [
          "Taxonomies"
        ],
        "operationId": "taxonomies_list",
        "x-response-schema": "Taxonomy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Taxonomy",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the taxonomy entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the taxonomy entity.",
                    "properties": {
                      "text": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The text name of the taxonomy"
                      },
                      "child_count": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "The number of children this taxonomy contains."
                      },
                      "parents": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the taxonomy entity.",
                    "properties": {
                      "parents": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the taxonomy."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca838/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240d954be81056ceca97a/"
                      ]
                    },
                    "attributes": {
                      "text": "History of Philosophy",
                      "parents": [
                        {
                          "text": "Philosophy",
                          "id": "584240d954be81056ceca97a"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca838"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca839/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240db54be81056cecacd3/"
                      ]
                    },
                    "attributes": {
                      "text": "Animal Law",
                      "parents": [
                        {
                          "text": "Law",
                          "id": "584240db54be81056cecacd3"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca839"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca83a/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240db54be81056cecacd3/"
                      ]
                    },
                    "attributes": {
                      "text": "Consumer Protection Law",
                      "parents": [
                        {
                          "text": "Law",
                          "id": "584240db54be81056cecacd3"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca83a"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca83b/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240da54be81056cecaa9c/"
                      ]
                    },
                    "attributes": {
                      "text": "Missions and World Christianity",
                      "parents": [
                        {
                          "text": "Religion",
                          "id": "584240da54be81056cecaa9c"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca83b"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/taxonomies/584240d854be81056ceca83c/",
                      "parents": [
                        "https://api.osf.io/v2/taxonomies/584240d954be81056ceca8fd/"
                      ]
                    },
                    "attributes": {
                      "text": "Other Teacher Education and Professional Development",
                      "parents": [
                        {
                          "text": "Teacher Education and Professional Development",
                          "id": "584240d954be81056ceca8fd"
                        }
                      ],
                      "child_count": 0
                    },
                    "type": "taxonomies",
                    "id": "584240d854be81056ceca83c"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 5,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/taxonomies/{taxonomy_id}/": {
      "get": {
        "summary": "Retrieve a taxonomy",
        "description": "Retrieves the details of a taxonomy.\n#### Returns\n\nReturns a JSON object with a `data` key containing the representation of the requested taxonomy, if the request is successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "taxonomy_id",
            "description": "The unique identifier of the taxonomy."
          }
        ],
        "tags": [
          "Taxonomies"
        ],
        "operationId": "taxonomies_read",
        "x-response-schema": "Taxonomy",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Taxonomy",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the taxonomy entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the taxonomy entity.",
                  "properties": {
                    "text": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The text name of the taxonomy"
                    },
                    "child_count": {
                      "type": "integer",
                      "readOnly": true,
                      "description": "The number of children this taxonomy contains."
                    },
                    "parents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the taxonomy entity.",
                  "properties": {
                    "parents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "readOnly": true,
                      "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the taxonomy."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/taxonomies/584240d954be81056ceca841/",
                    "parents": [
                      "https://api.osf.io/v2/taxonomies/584240da54be81056cecab8f/"
                    ]
                  },
                  "attributes": {
                    "text": "Public Economics",
                    "parents": [
                      {
                        "text": "Economics",
                        "id": "584240da54be81056cecab8f"
                      }
                    ],
                    "child_count": 0
                  },
                  "type": "taxonomies",
                  "id": "584240d954be81056ceca841"
                }
              }
            }
          }
        }
      }
    },
    "/users/": {
      "get": {
        "summary": "List all users",
        "description": "\nA paginated list of all users registered on the OSF. The returned users are sorted by their `date_registered`, with the most recently registered users appearing first.\n\nThe subroute `/users/me/` is a special endpoint that always points to the currently logged-in user.\n#### Versioning\nAs of version `2.3`, merged users will not be returned from this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 users. Each resource in the array is a separate users object and contains the full representation of the user, meaning additional requests to a user's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nThis request should never return an error.\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/?filter[family_name]=Nosek.\n\nUsers may be filtered by their `id`, `full_name`, `given_name`, `middle_name`, or `family_name`.",
        "tags": [
          "Users"
        ],
        "operationId": "users_list",
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "User",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "relationships",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the user entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the user entity (`users`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the user entity.",
                    "required": [
                      "active",
                      "date_registered",
                      "full_name"
                    ],
                    "properties": {
                      "active": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the user is an active user."
                      },
                      "date_registered": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                      },
                      "family_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The family name of the user, used for bibliographic citations."
                      },
                      "full_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The full name of the user, used for display on the OSF."
                      },
                      "given_name": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The given name of the user, used for bibliographic citations."
                      },
                      "middle_names": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The middle names of the user, used for bibliographic citations."
                      },
                      "suffix": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The suffix of the user, used for bibliographic citations."
                      },
                      "locale": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's locale, e.g. 'en_US'."
                      },
                      "timezone": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The user's timezone, e.g. 'Etc/UTC'."
                      },
                      "social": {
                        "type": "object",
                        "readOnly": false,
                        "additionalProperties": true,
                        "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                      },
                      "employment": {
                        "type": "array",
                        "readOnly": false,
                        "description": "A list of the user's employment history records.",
                        "items": {
                          "type": "object",
                          "required": [
                            "institution",
                            "startYear",
                            "startMonth",
                            "ongoing"
                          ],
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "institution": {
                              "type": "string"
                            },
                            "department": {
                              "type": "string"
                            },
                            "startYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "startMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "endYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "endMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "ongoing": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      "education": {
                        "type": "array",
                        "readOnly": false,
                        "description": "A list of the user's educational history records.",
                        "items": {
                          "type": "object",
                          "required": [
                            "institution",
                            "startYear",
                            "startMonth",
                            "ongoing"
                          ],
                          "properties": {
                            "degree": {
                              "type": "string"
                            },
                            "institution": {
                              "type": "string"
                            },
                            "department": {
                              "type": "string"
                            },
                            "startYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "startMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "endYear": {
                              "type": "integer",
                              "minimum": 1900
                            },
                            "endMonth": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 12
                            },
                            "ongoing": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                    "properties": {
                      "institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions the user is affiliated with."
                      },
                      "nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes the user is a contributor to."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the user entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile page on the OSF."
                      },
                      "profile_image": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the user's profile image."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "users",
                    "id": "{user_id}",
                    "attributes": {
                      "full_name": "Casey M. Rollins",
                      "middle_names": "Marie",
                      "social": {
                        "github": [
                          "https://github.com/caseyrollins"
                        ],
                        "twitter": [
                          "https://twitter.com/crollins"
                        ]
                      },
                      "employment": [
                        {
                          "title": "Data Scientist",
                          "institution": "Open Science Framework",
                          "department": "Engineering",
                          "startYear": 2018,
                          "startMonth": 5,
                          "ongoing": true
                        }
                      ],
                      "education": [
                        {
                          "degree": "MS in Computer Science",
                          "institution": "University of Somewhere",
                          "department": "Computer Science",
                          "startYear": 2014,
                          "startMonth": 9,
                          "endYear": 2016,
                          "endMonth": 6,
                          "ongoing": false
                        }
                      ]
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/q7fts/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/users/q7fts/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/users/q7fts/institutions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/users/q7fts/",
                      "html": "https://osf.io/q7fts/",
                      "profile_image": "https://secure.gravatar.com/avatar/e9d9311ab2f5ab7492a86ac9adb5c8e9?d=identicon"
                    },
                    "attributes": {
                      "family_name": "Rollins",
                      "suffix": "",
                      "locale": "en_US",
                      "date_registered": "2014-06-15T17:39:06.701000",
                      "middle_names": "",
                      "given_name": "Casey",
                      "full_name": "Casey Rollins",
                      "active": true,
                      "timezone": "America/New_York"
                    },
                    "type": "users",
                    "id": "q7fts"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/users/?page=4337",
                  "prev": null,
                  "next": "https://api.osf.io/v2/users/?page=2",
                  "meta": {
                    "total": 43370,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/": {
      "get": {
        "summary": "Retrieve a user",
        "description": "Retrieves details of a specific user.\nIncludes bibliographic information, date of registration, and related resources such as affiliated institutions and nodes the user contributes to (provided the requesting user has access).\nUsing `me` as the `user_id` retrieves the currently logged-in user's information.\n#### Returns\nSuccessful responses return a JSON object under the `data` key with user details. Failed requests provide an `errors` key containing error information. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) for more details.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_read",
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    },
                    "social": {
                      "type": "object",
                      "readOnly": false,
                      "additionalProperties": true,
                      "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                    },
                    "employment": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's employment history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "education": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's educational history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "degree": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie",
                    "social": {
                      "github": [
                        "https://github.com/caseyrollins"
                      ],
                      "twitter": [
                        "https://twitter.com/crollins"
                      ]
                    },
                    "employment": [
                      {
                        "title": "Data Scientist",
                        "institution": "Open Science Framework",
                        "department": "Engineering",
                        "startYear": 2018,
                        "startMonth": 5,
                        "ongoing": true
                      }
                    ],
                    "education": [
                      {
                        "degree": "MS in Computer Science",
                        "institution": "University of Somewhere",
                        "department": "Computer Science",
                        "startYear": 2014,
                        "startMonth": 9,
                        "endYear": 2016,
                        "endMonth": 6,
                        "ongoing": false
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/q7fts/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "institutions": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/users/q7fts/relationships/institutions/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/users/q7fts/institutions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/users/q7fts/",
                    "html": "https://osf.io/q7fts/",
                    "profile_image": "https://secure.gravatar.com/avatar/e9d9311ab2f5ab7492a86ac9adb5c8e9?d=identicon"
                  },
                  "attributes": {
                    "family_name": "Rollins",
                    "suffix": "",
                    "locale": "en_US",
                    "date_registered": "2014-06-15T17:39:06.701000",
                    "middle_names": "",
                    "given_name": "Casey",
                    "full_name": "Casey Rollins",
                    "active": true,
                    "timezone": "America/New_York"
                  },
                  "type": "users",
                  "id": "q7fts"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a user",
        "description": "Updates user attributes specified in the request body. Unspecified attributes remain unchanged.\nUpdates can be performed via **PUT** or **PATCH**. The `full_name` attribute is mandatory for **PUT** requests but optional for **PATCH**.\n**Note**: When updating via `/users/me/`, you must use your full user ID in the request body. The `me` alias is not supported in request bodies.\n### Instructions for Updating Social, Education, and Employment Fields\n- **Social Profiles**:\n  - Provide platform usernames or identifiers (not full URLs) for:\n    - `github`, `twitter`, `linkedIn`: arrays of strings\n    - `scholar`, `orcid`, `researcherId`, `impactStory`: single string\n    - `profileWebsites`: array of full URLs\n  - Example:\n    ```json\n    \"social\": {\n      \"linkedIn\": [\"userLinkedInID\"],\n      \"github\": [\"githubUsername\"],\n      \"twitter\": [\"twitterHandle\"],\n      \"profileWebsites\": [\"http://example.com\"]\n    }\n    ```\n\n- **Education and Employment**:\n  - Each record must include:\n    - `institution` (required, non-empty string)\n    - `startYear` and `startMonth` (required integers, startYear ≥ 1900, startMonth 1-12)\n    - `ongoing` (required boolean)\n    - Optional fields: `degree`, `title`, `department`\n    - If `ongoing` is `false`, include `endYear` and `endMonth` (end date ≥ start date)\n  - Example:\n    ```json\n    \"employment\": [{\n      \"title\": \"Data Scientist\",\n      \"institution\": \"Open Science Framework\",\n      \"department\": \"Engineering\",\n      \"startYear\": 2018,\n      \"startMonth\": 5,\n      \"ongoing\": true\n    }]\n    ```",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    },
                    "social": {
                      "type": "object",
                      "readOnly": false,
                      "additionalProperties": true,
                      "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                    },
                    "employment": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's employment history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "education": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's educational history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "degree": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie",
                    "social": {
                      "github": [
                        "https://github.com/caseyrollins"
                      ],
                      "twitter": [
                        "https://twitter.com/crollins"
                      ]
                    },
                    "employment": [
                      {
                        "title": "Data Scientist",
                        "institution": "Open Science Framework",
                        "department": "Engineering",
                        "startYear": 2018,
                        "startMonth": 5,
                        "ongoing": true
                      }
                    ],
                    "education": [
                      {
                        "degree": "MS in Computer Science",
                        "institution": "University of Somewhere",
                        "department": "Computer Science",
                        "startYear": 2014,
                        "startMonth": 9,
                        "endYear": 2016,
                        "endMonth": 6,
                        "ongoing": false
                      }
                    ]
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_partial_update",
        "consumes": [
          "application/json"
        ],
        "x-response-schema": "User",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users/{user_id}/institutions/": {
      "get": {
        "summary": "List all institutions",
        "description": "A paginated list of institutions that the user is affiliated with.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 institutions. Each resource in the array is a complete institution object and contains the full representation of the institution, meaning additional requests to a institution's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "operationId": "users_institutions_list",
        "x-response-schema": "Institution",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Institution",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the institution entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the institution entity (`institutions`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the institution entity.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Full name of the institution."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Description of the institution."
                      },
                      "iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Internationalized Resource Identifier (IRI) of the institution."
                      },
                      "ror_iri": {
                        "type": "string",
                        "readOnly": true,
                        "description": "Research Organization Registry (ROR) IRI of the institution."
                      },
                      "iris": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "List of IRIs associated with the institution."
                      },
                      "assets": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo."
                          },
                          "logo_rounded": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's logo with rounded corners."
                          },
                          "banner": {
                            "type": "string",
                            "readOnly": true,
                            "description": "URL to the institution's banner."
                          },
                          "logo_path": {
                            "type": "string",
                            "readOnly": true,
                            "description": "Static path to the institution specific logo."
                          }
                        }
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "URLs to other entities or entity collections that have a relationship to the institution entity.",
                    "properties": {
                      "nodes": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the nodes affiliated with the institution."
                      },
                      "users": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the users affiliated with the institution."
                      },
                      "registrations": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A relationship to the registrations affiliated with the institution."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the institutions entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the institution."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "users": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/users/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/institutions/uva/registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/institutions/uva/"
                    },
                    "attributes": {
                      "auth_url": "https://accounts.osf.io/Shibboleth.sso/Login?entityID=urn%3Amace%3Aincommon%3Avirginia.edu",
                      "logo_path": "/static/img/institutions/shields/uva-shield.png",
                      "name": "University of Virginia",
                      "description": "In partnership with the <a href=\"http://www.virginia.edu/vpr/\">Vice President for Research</a>, <a href=\"http://dsi.virginia.edu\">Data Science Institute</a>, <a href=\"https://www.hsl.virginia.edu\">Health Sciences Library</a>, and <a href=\"http://data.library.virginia.edu\">University Library</a>. Learn more about <a href=\"http://cadre.virginia.edu\">UVA resources for computational and data-driven research</a>. Projects must abide by the <a href=\"http://www.virginia.edu/informationpolicy/security.html\">University Security and Data Protection Policies</a>."
                    },
                    "type": "institutions",
                    "id": "uva"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 2,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/nodes/": {
      "get": {
        "summary": "List all nodes",
        "description": "A paginated list of nodes that the user is a contributor to. The returned nodes are sorted by their `date_modified`, with the most recently updated nodes appearing first.\n\nIf the user ID in the path is the same as the logged-in user, all nodes will be returned. Otherwise, only the user's public nodes will be returned.\n\nUser registrations are not available at this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include nodes that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/nodes/?filter[title]=open.\n\nNodes may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, `preprint`, and `contributors`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_nodes_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/p7ayb/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/e81xl/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/comments/?filter%5Btarget%5D=0hezb",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/0hezb/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/0hezb/",
                      "html": "https://osf.io/0hezb/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-02-09T20:37:49.060000",
                      "title": "Study 8: Replication of Hatzivassiliou et al., 2010 (Nature)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2013-10-22T20:07:57.674000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "0hezb"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/users/alh38/nodes/?page=23",
                  "prev": null,
                  "next": "https://api.osf.io/v2/users/alh38/nodes/?page=2",
                  "meta": {
                    "total": 224,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/preprints/": {
      "get": {
        "summary": "List all preprints",
        "description": "A paginated list of preprints that the user contributes to. The returned preprints are sorted by their creation date, with the most recent preprints appearing first.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 preprints. Each resource in the array is a complete preprint object and contains the full representation of the preprint, meaning additional requests to a preprint's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include preprints that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/preprints/?filter[provider]=psyarxiv.\n\nPreprints may be filtered by their `id`, `is_published`, `date_created`, `date_modified`, and `provider`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_preprints_list",
        "x-response-schema": "Preprint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Preprint",
                "required": [
                  "type",
                  "relationships"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The identifier of the preprint entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the preprint entity (`preprints`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the preprint entity.",
                    "properties": {
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was last modified, as an iso8601 formatted timestamp."
                      },
                      "date_published": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the preprint was published, as an iso8601 formatted timestamp."
                      },
                      "doi": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The DOI of the associated journal article, as entered by the user, if the preprint is published."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the preprint."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the preprint."
                      },
                      "is_preprint_orphan": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the preprint is orphaned. A preprint can be orphaned if it's primary file was removed from the preprint node. This field may be deprecated in future versions."
                      },
                      "license_record": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The metadata (copyright year and holder) associated with a license, required for certain licenses."
                      },
                      "tags": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The tags given to a preprint."
                      },
                      "preprint_doi_created": {
                        "type": "string",
                        "readOnly": false,
                        "description": "When the preprint DOI was created."
                      },
                      "date_withdrawn": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The date the preprint was withdrawn, null if it was never withdrawn."
                      },
                      "current_user_permissions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The list of permissions the current user has."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "The wheter the preprint is public."
                      },
                      "reviews_state": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The a label to indicate the state of review a preprint is in."
                      },
                      "date_last_transitioned": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The date the reviews state of the preprint changed."
                      },
                      "has_coi": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a conflict of interest statement.",
                        "enum": [
                          true,
                          false,
                          null
                        ]
                      },
                      "conflict_of_interest_statement": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the conflict of interest statement for the preprint."
                      },
                      "has_data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has a links to data.",
                        "enum": [
                          "no",
                          "available",
                          "not_applicable",
                          null
                        ]
                      },
                      "why_no_data": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration data was not included."
                      },
                      "data_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints supplemental data go here.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "has_prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A value indicating whether the preprint has any preregistration links.",
                        "enum": [
                          "available",
                          "no",
                          "not_applicable"
                        ]
                      },
                      "why_no_prereg": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "A value for a field explaining why preregistration links weren't included."
                      },
                      "prereg_links": {
                        "type": "string",
                        "readOnly": false,
                        "description": "Any links to a preprints preregistrations go here."
                      },
                      "prereg_link_info": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The text of the any explanation of preprint preregistration link infomation."
                      },
                      "version": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Preprint version"
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the preprint entity.",
                    "required": [
                      "node",
                      "primary_file",
                      "provider"
                    ],
                    "properties": {
                      "contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the all contributors that are listed as contributing to this preprint."
                      },
                      "bibliographic_contributors": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the bibliographic contributors that are listed as contributing to this preprint."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the citation of the preprint."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A relationship to the identifiers associated with the preprint."
                      },
                      "node": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the node that was created for the preprint, or from which the preprint was created."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the license that has been applied to the preprint."
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the preprint provider under which the preprint was created (OSF, socarxiv, psyarxiv, etc.)."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to files of the preprint."
                      },
                      "review_actions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the review actions made of that preprint."
                      },
                      "requests": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the requests for sanction changes that was made to the preprint."
                      },
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the file that is designated as the preprint's primary file, or the manuscript of the preprint."
                      },
                      "subjects": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A relationship to the academic subjects for the preprint."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the preprint entity.",
                    "properties": {
                      "iri": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation preprint of the OSF."
                      },
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the project on the OSF that was created for the preprint, or from which the preprint was created."
                      },
                      "preprint_doi": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The URL representation of the OSF assigned DOI for the preprint."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the detail page for the preprint."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "attributes": {},
                    "relationships": {
                      "node": {
                        "data": {
                          "type": "nodes",
                          "id": "{node_id}"
                        }
                      },
                      "primary_file": {
                        "data": {
                          "type": "primary_files",
                          "id": "{primary_file_id}"
                        }
                      },
                      "provider": {
                        "data": {
                          "type": "providers",
                          "id": "{provider_id}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bnzx5/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/khbvy/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/57c44b1e594d90004a421ab1/",
                            "meta": {}
                          }
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprint_providers/osf/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/khbvy/",
                      "html": "https://osf.io/khbvy/",
                      "doi": "https://dx.doi.org/10.1371/journal.pbio.1002456"
                    },
                    "attributes": {
                      "doi": "10.1371/journal.pbio.1002456",
                      "license_record": null,
                      "date_modified": "2016-08-29T14:53:51.185000",
                      "is_preprint_orphan": false,
                      "date_published": "2016-08-29T14:53:51.185000",
                      "subjects": [
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Public Affairs, Public Policy and Public Administration",
                            "id": "584240da54be81056cecaab8"
                          },
                          {
                            "text": "Science and Technology Policy",
                            "id": "584240d954be81056cecaa10"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Library and Information Science",
                            "id": "584240da54be81056cecab33"
                          },
                          {
                            "text": "Scholarly Publishing",
                            "id": "584240db54be81056cecacd2"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ],
                        [
                          {
                            "text": "Social and Behavioral Sciences",
                            "id": "584240da54be81056cecac48"
                          },
                          {
                            "text": "Psychology",
                            "id": "584240da54be81056cecac68"
                          }
                        ]
                      ],
                      "date_created": "2016-08-29T14:53:51.185000",
                      "is_published": true
                    },
                    "type": "preprints",
                    "id": "khbvy"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 4,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/registrations/": {
      "get": {
        "summary": "List all registrations",
        "description": "A paginated list of registrations that the user is a contributor to. The returned registrations are sorted by their `date_modified`, with the most recently updated registrations appearing first.\n\nIf the user ID in the path is the same as the logged-in user, all registrations will be returned. Otherwise, only the user's public registrations will be returned.\n\nUser nodes are not available at this endpoint.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of 10 registrations. Each resource in the array is a separate registration object and contains the full representation of the registration, meaning additional requests to a registration's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include registrations that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/users/cdi38/registrations/?filter[title]=replication.\n\nRegistrations may be filtered by their `id`, `title`, `category`, `description`, `public`, `tags`, `date_created`, `date_modified`, `root`, `parent`, and `contributors`.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_registrations_list",
        "x-response-schema": "Registration",
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/metaschemas/564d31db8c5e4a7c9694b2c0/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/sdbdx/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/sdbdx/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/comments/?filter%5Btarget%5D=d5r99",
                            "meta": {}
                          }
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qce75/",
                            "meta": {}
                          }
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/dnhrw/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/children/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/registrations/d5r99/",
                      "html": "https://osf.io/d5r99/"
                    },
                    "attributes": {
                      "registration_supplement": "OSF-Standard Pre-Data Collection Registration",
                      "pending_embargo_approval": false,
                      "registration": true,
                      "embargo_end_date": null,
                      "withdrawn": false,
                      "withdrawal_justification": null,
                      "category": "communication",
                      "preprint": false,
                      "current_user_permissions": [
                        "read"
                      ],
                      "title": "Replication Reports",
                      "registered_meta": {
                        "looked": {
                          "value": "No",
                          "comments": [],
                          "extra": []
                        },
                        "datacompletion": {
                          "value": "No, data collection has not begun",
                          "comments": [],
                          "extra": []
                        },
                        "comments": {
                          "value": "",
                          "comments": [],
                          "extra": []
                        }
                      },
                      "public": true,
                      "fork": false,
                      "description": "",
                      "tags": [],
                      "collection": false,
                      "current_user_can_comment": true,
                      "pending_registration_approval": false,
                      "date_modified": "2016-11-18T19:14:42.873000",
                      "date_registered": "2016-11-18T19:16:56.962000",
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/d5r99/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "date_created": "2016-09-27T01:12:42.135000",
                      "pending_withdrawal": false,
                      "node_license": null
                    },
                    "type": "registrations",
                    "id": "d5r99"
                  }
                ],
                "links": {
                  "first": null,
                  "last": "https://api.osf.io/v2/users/cdi38/registrations/?page=17",
                  "prev": null,
                  "next": "https://api.osf.io/v2/users/cdi38/registrations/?page=2",
                  "meta": {
                    "total": 170,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/": {
      "get": {
        "summary": "List all user addons",
        "description": "\nA paginated list of authorized user addons\n\n#### Permissions\n\nUser addons are visible only to the user that authorized the addon.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 addons. Each resource in the array is a separate addon object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nAttempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "user_id",
            "required": true,
            "description": "The unique identifier of the user."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_addons_list",
        "x-response-schema": "User Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "User Addon",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the user addon entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the user addon entity (`user_addons`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the user addon entity.",
                    "required": [
                      "user_has_auth"
                    ],
                    "properties": {
                      "user_has_auth": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the user has access to this user addon."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the user addon entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The canonical API endpoint to this user addon."
                      },
                      "accounts": {
                        "type": "object",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A dictionary with addon_account id as key, an array of connected nodes and link to user account as value"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/box/",
                      "accounts": {
                        "562d9acf8c5e4a14112e489e": {
                          "nodes_connected": [
                            "https://api.osf.io/v2/nodes/t3y58/"
                          ],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/box/accounts/562d9acf8c5e4a14112e489e/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "box"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/dropbox/",
                      "accounts": {
                        "56742db88c5e4a396d689e3e": {
                          "nodes_connected": [],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/dropbox/accounts/56742db88c5e4a396d689e3e/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "dropbox"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/github/",
                      "accounts": {
                        "570edf7f9ad5a101f90030f6": {
                          "nodes_connected": [
                            "https://api.osf.io/v2/nodes/t3y58/"
                          ],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/github/accounts/570edf7f9ad5a101f90030f6/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "github"
                  },
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/googledrive/",
                      "accounts": {
                        "58fe1cb59ad5a1025c8ae281": {
                          "nodes_connected": [],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/googledrive/accounts/58fe1cb59ad5a1025c8ae281/"
                        },
                        "563c1c518c5e4a36e7dc5450": {
                          "nodes_connected": [
                            "https://api.osf.io/v2/nodes/6y5jf/",
                            "https://api.osf.io/v2/nodes/t3y58/"
                          ],
                          "account": "https://api.osf.io/v2/users/q7fts/addons/googledrive/accounts/563c1c518c5e4a36e7dc5450/"
                        }
                      }
                    },
                    "attributes": {
                      "user_has_auth": true
                    },
                    "type": "user_addons",
                    "id": "googledrive"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 4,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/{provider}/": {
      "get": {
        "summary": "Retrieve a user addon",
        "description": "Retrieves the details of an authorized user addon\n\n#### Permissions\n\nUser addons are visible only to the user that authorized the addon.\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested user addon, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\n\nAttempting to request the accounts for an addon that is not enabled will result in a **404 Not Found** response.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "user_id",
            "description": "The unique identifier of the user."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon provider."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "users_addons_read",
        "x-response-schema": "User Addon",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "User Addon",
              "required": [
                "id",
                "type",
                "attributes",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user addon entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user addon entity (`user_addons`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the user addon entity.",
                  "required": [
                    "user_has_auth"
                  ],
                  "properties": {
                    "user_has_auth": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user has access to this user addon."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user addon entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The canonical API endpoint to this user addon."
                    },
                    "accounts": {
                      "type": "object",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A dictionary with addon_account id as key, an array of connected nodes and link to user account as value"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "links": {
                    "self": "https://api.osf.io/v2/users/me/addons/dropbox/",
                    "accounts": {
                      "58d16ece9ad5a10201025eb4": {
                        "nodes_connected": [],
                        "account": "https://api.osf.io/v2/users/f542f/addons/dropbox/accounts/58d16ece9ad5a10201025eb4/"
                      }
                    }
                  },
                  "attributes": {
                    "user_has_auth": true
                  },
                  "type": "user_addons",
                  "id": "dropbox"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/{provider}/accounts/": {
      "get": {
        "summary": "List all addon accounts",
        "description": "\nA paginated list of addon accounts authorized by this user.\n\n#### Permissions\n\nAddon accounts are visible only to the user that authorized the account.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of at most 10 addon account objects. Each resource in the array is a separate  addon account object and contains the full representation of the addon account.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "user_id",
            "description": "The unique identifier of the user."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon provider."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "Users_addon_accounts_list",
        "x-response-schema": "Addon Account",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Addon Account",
                "required": [
                  "id",
                  "type",
                  "attributes",
                  "links"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the addon account entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The type identifier of the addon account entity (`external_accounts`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "The properties of the addon account entity.",
                    "required": [
                      "display_name",
                      "provider"
                    ],
                    "properties": {
                      "display_name": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The user's display name on the third-party service"
                      },
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The short name of the third-party service"
                      },
                      "profile_url": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The link to user's profile on third-party service"
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the addon account entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "The canonical api endpoint of this addon account"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/dropbox/accounts/58d16ece9ad5a10201027eb4/"
                    },
                    "attributes": {
                      "display_name": "Fabrice Mizero",
                      "profile_url": null,
                      "provider": "dropbox"
                    },
                    "type": "external_accounts",
                    "id": "58d16ece9ad5a10201027eb4"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/addons/{provider}/accounts/{account_id}/": {
      "get": {
        "summary": "Retrieve an addon account",
        "description": "Retrieves the details of an addon account\n\n#### Permissions\n\nAddon accounts are visible only to the user that authorized the account.\n\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested addon account, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "user_id",
            "description": "The unique identifier of the user."
          },
          {
            "in": "path",
            "name": "provider",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon provider."
          },
          {
            "in": "path",
            "name": "account_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the addon account."
          }
        ],
        "tags": [
          "Users"
        ],
        "operationId": "Users_addon_accounts_read",
        "x-response-schema": "Addon Account",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Addon Account",
              "required": [
                "id",
                "type",
                "attributes",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the addon account entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the addon account entity (`external_accounts`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the addon account entity.",
                  "required": [
                    "display_name",
                    "provider"
                  ],
                  "properties": {
                    "display_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The user's display name on the third-party service"
                    },
                    "provider": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The short name of the third-party service"
                    },
                    "profile_url": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The link to user's profile on third-party service"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the addon account entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The canonical api endpoint of this addon account"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "data": {
                    "links": {
                      "self": "https://api.osf.io/v2/users/me/addons/dropbox/accounts/58d16ece9ad5a10201027eb4/"
                    },
                    "attributes": {
                      "display_name": "Fabrice Mizero",
                      "profile_url": null,
                      "provider": "dropbox"
                    },
                    "type": "external_accounts",
                    "id": "58d16ece9ad5a10201027eb4"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/claim/": {
      "post": {
        "summary": "Claim a User Account",
        "description": "Allows a user to claim an unregistered OSF account.\nThis endpoint is typically used when a contributor is added to a project with an unregistered account, and the user wants to claim that account.\nThe user can be claimed by either:\n - A logged-in user (who is not the referrer of the unclaimed account).\n - A user who provides an email address for the claim.\n\n#### Returns\nReturns a `204 No Content` response on successful claim initiation.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\nSome common error cases:\n - `403 Forbidden`: The user is not authorized to claim this account.\n - `404 Not Found`: The specified user or record does not exist.\n - `400 Bad Request`: Invalid claim request parameters.",
        "tags": [
          "Users"
        ],
        "operationId": "user_claim_create",
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user you are trying to claim.\nExample: `abc123`"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "A JSON API representation of the claim request.\nYou must provide at least a `record id`. Optionally, an `email` may be included if you are not authenticated.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "claim-user"
                      ],
                      "example": "claim-user"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The record ID associated with the unclaimed user. Usually corresponds to a project, preprint, etc.",
                          "example": "xyz456"
                        },
                        "email": {
                          "type": "string",
                          "description": "The email address to use for claiming the user account. Required if the claimer is not authenticated.",
                          "example": "user@example.com"
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "x-examples": {
              "application/json": {
                "data": {
                  "type": "claim-user",
                  "attributes": {
                    "id": "xyz456",
                    "email": "user@example.com"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully initiated the claim process.\nIf the claimer is authenticated, they will receive an email confirming the claim. If not authenticated and an email is provided, the claim invitation will be sent to the specified email address."
          },
          "400": {
            "description": "Bad request.\nThe request payload is invalid or missing required fields (such as `id`)."
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to claim this user, or the user has already been claimed."
          },
          "404": {
            "description": "Not found.\nThe specified user or record could not be found."
          }
        }
      }
    },
    "/users/{user_id}/draft_preprints/": {
      "get": {
        "summary": "List a User's Draft Preprints",
        "description": "Retrieves a list of draft preprints for the specified user.\nOnly the authenticated user can view their own draft preprints.\n#### Returns\nReturns a JSON object with a `data` key containing an array of draft preprint resources.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Users"
        ],
        "operationId": "user_draft_preprints_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user. Example: `abc123`"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to view (pagination). Default is 1."
          },
          {
            "in": "query",
            "name": "filter[title]",
            "type": "string",
            "description": "Filter draft preprints by title."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of draft preprints.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "User",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the user entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the user entity (`users`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": false,
                        "description": "The properties of the user entity.",
                        "required": [
                          "active",
                          "date_registered",
                          "full_name"
                        ],
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the user is an active user."
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                          },
                          "family_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The family name of the user, used for bibliographic citations."
                          },
                          "full_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The full name of the user, used for display on the OSF."
                          },
                          "given_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The given name of the user, used for bibliographic citations."
                          },
                          "middle_names": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The middle names of the user, used for bibliographic citations."
                          },
                          "suffix": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The suffix of the user, used for bibliographic citations."
                          },
                          "locale": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's locale, e.g. 'en_US'."
                          },
                          "timezone": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's timezone, e.g. 'Etc/UTC'."
                          },
                          "social": {
                            "type": "object",
                            "readOnly": false,
                            "additionalProperties": true,
                            "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                          },
                          "employment": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's employment history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          },
                          "education": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's educational history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "degree": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                        "properties": {
                          "institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions the user is affiliated with."
                          },
                          "nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes the user is a contributor to."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the user entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile page on the OSF."
                          },
                          "profile_image": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile image."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "users",
                        "id": "{user_id}",
                        "attributes": {
                          "full_name": "Casey M. Rollins",
                          "middle_names": "Marie",
                          "social": {
                            "github": [
                              "https://github.com/caseyrollins"
                            ],
                            "twitter": [
                              "https://twitter.com/crollins"
                            ]
                          },
                          "employment": [
                            {
                              "title": "Data Scientist",
                              "institution": "Open Science Framework",
                              "department": "Engineering",
                              "startYear": 2018,
                              "startMonth": 5,
                              "ongoing": true
                            }
                          ],
                          "education": [
                            {
                              "degree": "MS in Computer Science",
                              "institution": "University of Somewhere",
                              "department": "Computer Science",
                              "startYear": 2014,
                              "startMonth": 9,
                              "endYear": 2016,
                              "endMonth": 6,
                              "ongoing": false
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string"
                    },
                    "prev": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "draftpreprint123",
                    "type": "draft-preprints",
                    "attributes": {
                      "title": "Draft Preprint Example",
                      "date_created": "2024-01-01T00:00:00Z",
                      "date_modified": "2024-01-01T12:00:00Z",
                      "preprint_provider": "example-provider"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "id": "abc123",
                          "type": "users"
                        }
                      },
                      "provider": {
                        "data": {
                          "id": "example-provider",
                          "type": "providers"
                        }
                      }
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/users/abc123/draft_preprints/",
                  "next": null,
                  "prev": null
                }
              }
            }
          },
          "403": {
            "description": "Permission denied. You do not have permission to view these draft preprints."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/users/{user_id}/draft_registrations/": {
      "get": {
        "summary": "List a User's Draft Registrations",
        "description": "Retrieves a list of draft registrations for the specified user.\nOnly the authenticated user can view their own draft registrations.\n#### Returns\nReturns a JSON object with a `data` key containing an array of draft registration resources.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Users"
        ],
        "operationId": "user_draft_registrations_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user. Example: `abc123`"
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "description": "Page number of results to view (pagination). Default is 1."
          },
          {
            "in": "query",
            "name": "filter[title]",
            "type": "string",
            "description": "Filter draft registrations by title."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of draft registrations.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "User",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the user entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the user entity (`users`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": false,
                        "description": "The properties of the user entity.",
                        "required": [
                          "active",
                          "date_registered",
                          "full_name"
                        ],
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the user is an active user."
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                          },
                          "family_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The family name of the user, used for bibliographic citations."
                          },
                          "full_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The full name of the user, used for display on the OSF."
                          },
                          "given_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The given name of the user, used for bibliographic citations."
                          },
                          "middle_names": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The middle names of the user, used for bibliographic citations."
                          },
                          "suffix": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The suffix of the user, used for bibliographic citations."
                          },
                          "locale": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's locale, e.g. 'en_US'."
                          },
                          "timezone": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's timezone, e.g. 'Etc/UTC'."
                          },
                          "social": {
                            "type": "object",
                            "readOnly": false,
                            "additionalProperties": true,
                            "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                          },
                          "employment": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's employment history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          },
                          "education": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's educational history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "degree": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                        "properties": {
                          "institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions the user is affiliated with."
                          },
                          "nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes the user is a contributor to."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the user entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile page on the OSF."
                          },
                          "profile_image": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile image."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "users",
                        "id": "{user_id}",
                        "attributes": {
                          "full_name": "Casey M. Rollins",
                          "middle_names": "Marie",
                          "social": {
                            "github": [
                              "https://github.com/caseyrollins"
                            ],
                            "twitter": [
                              "https://twitter.com/crollins"
                            ]
                          },
                          "employment": [
                            {
                              "title": "Data Scientist",
                              "institution": "Open Science Framework",
                              "department": "Engineering",
                              "startYear": 2018,
                              "startMonth": 5,
                              "ongoing": true
                            }
                          ],
                          "education": [
                            {
                              "degree": "MS in Computer Science",
                              "institution": "University of Somewhere",
                              "department": "Computer Science",
                              "startYear": 2014,
                              "startMonth": 9,
                              "endYear": 2016,
                              "endMonth": 6,
                              "ongoing": false
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "per_page": {
                      "type": "integer"
                    },
                    "version": {
                      "type": "string"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string"
                    },
                    "next": {
                      "type": "string"
                    },
                    "prev": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "draftreg123",
                    "type": "draft-registrations",
                    "attributes": {
                      "title": "Draft Registration Example",
                      "date_created": "2024-01-01T00:00:00Z",
                      "date_modified": "2024-01-01T12:00:00Z",
                      "registration_metadata": {}
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "id": "abc123",
                          "type": "users"
                        }
                      },
                      "branched_from": {
                        "data": {
                          "id": "proj456",
                          "type": "nodes"
                        }
                      }
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/users/abc123/draft_registrations/",
                  "next": null,
                  "prev": null
                }
              }
            }
          },
          "403": {
            "description": "Permission denied. You do not have permission to view these draft registrations."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/users/{user_id}/relationships/institutions/": {
      "get": {
        "summary": "Retrieve a User's Institution Relationships",
        "description": "Retrieves the relationships between a user and their affiliated institutions.\nOnly the authenticated user can view their affiliated institutions in this relationship endpoint.\n#### Returns\nReturns a JSON object with a `data` key containing an array of institution relationship identifiers.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Users"
        ],
        "operationId": "user_institutions_relationship_read",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user. Example: `abc123`"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's affiliated institutions.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The institution ID.",
                        "example": "mit"
                      },
                      "type": {
                        "type": "string",
                        "description": "Resource type.",
                        "example": "institutions"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "mit",
                    "type": "institutions"
                  },
                  {
                    "id": "cambridge",
                    "type": "institutions"
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Permission denied. You do not have permission to view these institution relationships."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "delete": {
        "summary": "Remove Institutions from a User's Affiliations",
        "description": "Removes one or more institutions from a user's list of affiliations.\n#### Usage Notes\n- Only the authenticated user can remove their institution affiliations. - You cannot add institutions through this endpoint—use the user-institutions list endpoint for reading full records.\n#### Returns\nReturns a `204 No Content` response if the removal is successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).\n#### Example Request Payload\n```json {\n  \"data\": [\n    { \"type\": \"institutions\", \"id\": \"mit\" },\n    { \"type\": \"institutions\", \"id\": \"cambridge\" }\n  ]\n} ```",
        "tags": [
          "Users"
        ],
        "operationId": "user_institutions_relationship_delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user. Example: `abc123`"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "List of institution relationships to remove.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "type",
                      "id"
                    ],
                    "properties": {
                      "type": {
                        "type": "string",
                        "enum": [
                          "institutions"
                        ]
                      },
                      "id": {
                        "type": "string",
                        "example": "mit"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed institutions from user's affiliations."
          },
          "400": {
            "description": "Bad request. Possible reasons include: - Institution `type` does not match `institutions`. - Institution ID is invalid or not affiliated with the user."
          },
          "403": {
            "description": "Permission denied. You do not have permission to modify these affiliations."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/users/{user_id}/settings/": {
      "get": {
        "summary": "Retrieve a User's Settings",
        "description": "Retrieves a user's settings, including two-factor authentication status, email subscriptions, and deactivation status.\nOnly the authenticated user can access their settings.\n#### Returns\nReturns a JSON object with a `data` key containing the user's settings.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Users"
        ],
        "operationId": "user_settings_read",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user.\nExample: `abc123`"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the user's settings.",
            "examples": {
              "application/json": {
                "data": {
                  "id": "abc123",
                  "type": "user-settings",
                  "attributes": {
                    "two_factor_enabled": true,
                    "two_factor_confirmed": true,
                    "subscribe_osf_general_email": true,
                    "subscribe_osf_help_email": false,
                    "deactivation_requested": false,
                    "contacted_deactivation": false
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied. You do not have permission to view these settings."
          }
        }
      },
      "patch": {
        "summary": "Update a User's Settings",
        "description": "Updates a user's settings, including email subscriptions, two-factor authentication setup, and account deactivation status.\nOnly the authenticated user can modify their settings.\n## Editable Attributes\n\n - `two_factor_enabled` (boolean): Enables or disables two-factor authentication.\n - `two_factor_verification` (integer): Verification code for two-factor setup.\n - `subscribe_osf_general_email` (boolean): Subscribe/unsubscribe from OSF general communications.\n - `subscribe_osf_help_email` (boolean): Subscribe/unsubscribe from OSF help communications.\n - `deactivation_requested` (boolean): Request deactivation of your OSF account.\n\n#### Returns\nReturns the updated user's settings in a JSON object with a `data` key.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Users"
        ],
        "operationId": "user_settings_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user.\nExample: `abc123`"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "JSON API representation of the updates to the user's settings.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "user-settings"
                      ],
                      "example": "user-settings"
                    },
                    "id": {
                      "type": "string",
                      "description": "The user ID for the settings update.",
                      "example": "abc123"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "two_factor_enabled": {
                          "type": "boolean",
                          "description": "Enable or disable two-factor authentication.",
                          "example": true
                        },
                        "two_factor_verification": {
                          "type": "integer",
                          "description": "Verification code for two-factor authentication.",
                          "example": 123456
                        },
                        "subscribe_osf_general_email": {
                          "type": "boolean",
                          "description": "Subscribe or unsubscribe from OSF general emails.",
                          "example": true
                        },
                        "subscribe_osf_help_email": {
                          "type": "boolean",
                          "description": "Subscribe or unsubscribe from OSF help emails.",
                          "example": false
                        },
                        "deactivation_requested": {
                          "type": "boolean",
                          "description": "Request deactivation of your OSF account.",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "data": {
                  "type": "user-settings",
                  "id": "abc123",
                  "attributes": {
                    "two_factor_enabled": true,
                    "two_factor_verification": 123456,
                    "subscribe_osf_general_email": true,
                    "subscribe_osf_help_email": false,
                    "deactivation_requested": false
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the user's settings."
          },
          "400": {
            "description": "Bad request. This can occur if the two-factor verification code is invalid, or subscription values are incorrect."
          },
          "403": {
            "description": "Permission denied. You do not have permission to update these settings."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },
    "/users/{user_id}/settings/emails/": {
      "get": {
        "summary": "List User Email Addresses",
        "description": "Retrieves a list of all confirmed and unconfirmed email addresses associated with the user.\nThe authenticated user can view their own email addresses.\n#### Returns\nReturns a JSON object with a `data` key containing a list of email addresses associated with the user.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "tags": [
          "Users"
        ],
        "operationId": "user_emails_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user whose emails are being listed.\nExample: `abc123`"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of confirmed and unconfirmed email addresses for the user.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "User",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the user entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the user entity (`users`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": false,
                        "description": "The properties of the user entity.",
                        "required": [
                          "active",
                          "date_registered",
                          "full_name"
                        ],
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the user is an active user."
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                          },
                          "family_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The family name of the user, used for bibliographic citations."
                          },
                          "full_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The full name of the user, used for display on the OSF."
                          },
                          "given_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The given name of the user, used for bibliographic citations."
                          },
                          "middle_names": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The middle names of the user, used for bibliographic citations."
                          },
                          "suffix": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The suffix of the user, used for bibliographic citations."
                          },
                          "locale": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's locale, e.g. 'en_US'."
                          },
                          "timezone": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's timezone, e.g. 'Etc/UTC'."
                          },
                          "social": {
                            "type": "object",
                            "readOnly": false,
                            "additionalProperties": true,
                            "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                          },
                          "employment": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's employment history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          },
                          "education": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's educational history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "degree": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                        "properties": {
                          "institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions the user is affiliated with."
                          },
                          "nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes the user is a contributor to."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the user entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile page on the OSF."
                          },
                          "profile_image": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile image."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "users",
                        "id": "{user_id}",
                        "attributes": {
                          "full_name": "Casey M. Rollins",
                          "middle_names": "Marie",
                          "social": {
                            "github": [
                              "https://github.com/caseyrollins"
                            ],
                            "twitter": [
                              "https://twitter.com/crollins"
                            ]
                          },
                          "employment": [
                            {
                              "title": "Data Scientist",
                              "institution": "Open Science Framework",
                              "department": "Engineering",
                              "startYear": 2018,
                              "startMonth": 5,
                              "ongoing": true
                            }
                          ],
                          "education": [
                            {
                              "degree": "MS in Computer Science",
                              "institution": "University of Somewhere",
                              "department": "Computer Science",
                              "startYear": 2014,
                              "startMonth": 9,
                              "endYear": 2016,
                              "endMonth": 6,
                              "ongoing": false
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "1a2b3c",
                    "type": "user-emails",
                    "attributes": {
                      "email_address": "user@example.com",
                      "confirmed": true,
                      "verified": true,
                      "primary": true,
                      "is_merge": false
                    }
                  },
                  {
                    "id": "unconfirmed_token",
                    "type": "user-emails",
                    "attributes": {
                      "email_address": "another@example.com",
                      "confirmed": false,
                      "verified": false,
                      "primary": false,
                      "is_merge": false
                    }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to view email addresses for this user."
          }
        }
      },
      "post": {
        "summary": "Add a New Email Address",
        "description": "Adds a new unconfirmed email address to the user's account.\nOnce added, the system will send a confirmation email to the specified address.\n#### Returns\nReturns a JSON object with a `data` key containing the newly added (unconfirmed) email address.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "tags": [
          "Users"
        ],
        "operationId": "user_email_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user to whom the email will be added.\nExample: `abc123`"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "A JSON API representation of the new email address to add.\nYou must provide an `email_address` in the attributes object.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "user-emails"
                      ],
                      "example": "user-emails"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "email_address": {
                          "type": "string",
                          "description": "The new email address to add.",
                          "example": "newemail@example.com"
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "x-examples": {
              "application/json": {
                "data": {
                  "type": "user-emails",
                  "attributes": {
                    "email_address": "newemail@example.com"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The email address was successfully added and is pending confirmation.",
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    },
                    "social": {
                      "type": "object",
                      "readOnly": false,
                      "additionalProperties": true,
                      "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                    },
                    "employment": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's employment history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "education": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's educational history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "degree": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie",
                    "social": {
                      "github": [
                        "https://github.com/caseyrollins"
                      ],
                      "twitter": [
                        "https://twitter.com/crollins"
                      ]
                    },
                    "employment": [
                      {
                        "title": "Data Scientist",
                        "institution": "Open Science Framework",
                        "department": "Engineering",
                        "startYear": 2018,
                        "startMonth": 5,
                        "ongoing": true
                      }
                    ],
                    "education": [
                      {
                        "degree": "MS in Computer Science",
                        "institution": "University of Somewhere",
                        "department": "Computer Science",
                        "startYear": 2014,
                        "startMonth": 9,
                        "endYear": 2016,
                        "endMonth": 6,
                        "ongoing": false
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "unconfirmed_token_123",
                  "type": "user-emails",
                  "attributes": {
                    "email_address": "newemail@example.com",
                    "confirmed": false,
                    "verified": false,
                    "primary": false,
                    "is_merge": false
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\nThe email address is invalid or already exists on this user."
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to add an email for this user."
          },
          "429": {
            "description": "Too many requests.\nYou have exceeded the allowed number of email additions. Please wait and try again later."
          }
        }
      }
    },
    "/users/{user_id}/settings/emails/{email_id}/": {
      "get": {
        "summary": "Retrieve a User's Email Address",
        "description": "Retrieves detailed information about a specific email address linked to the user.\nOnly the authenticated user can view their own email addresses.\n#### Query Parameters\n- `resend_confirmation=true` -- Optional. If the email address is unconfirmed, this query param will resend the confirmation email.\n#### Returns\nReturns a JSON object with a `data` key containing the details of the requested email address.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "tags": [
          "Users"
        ],
        "operationId": "user_email_detail_read",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user. Example: `abc123`"
          },
          {
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the email address (either a hashed ID or unconfirmed token). Example: `1a2b3c`"
          },
          {
            "in": "query",
            "name": "resend_confirmation",
            "required": false,
            "type": "boolean",
            "description": "If true, resend a confirmation email to the unconfirmed address (if applicable)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the email address.",
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    },
                    "social": {
                      "type": "object",
                      "readOnly": false,
                      "additionalProperties": true,
                      "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                    },
                    "employment": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's employment history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "education": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's educational history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "degree": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie",
                    "social": {
                      "github": [
                        "https://github.com/caseyrollins"
                      ],
                      "twitter": [
                        "https://twitter.com/crollins"
                      ]
                    },
                    "employment": [
                      {
                        "title": "Data Scientist",
                        "institution": "Open Science Framework",
                        "department": "Engineering",
                        "startYear": 2018,
                        "startMonth": 5,
                        "ongoing": true
                      }
                    ],
                    "education": [
                      {
                        "degree": "MS in Computer Science",
                        "institution": "University of Somewhere",
                        "department": "Computer Science",
                        "startYear": 2014,
                        "startMonth": 9,
                        "endYear": 2016,
                        "endMonth": 6,
                        "ongoing": false
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "1a2b3c",
                  "type": "user-emails",
                  "attributes": {
                    "email_address": "user@example.com",
                    "confirmed": true,
                    "verified": true,
                    "primary": true,
                    "is_merge": false
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied. You do not have permission to view this email."
          },
          "404": {
            "description": "Email address not found."
          }
        }
      },
      "patch": {
        "summary": "Update a User's Email Address",
        "description": "Updates attributes of a user's email address.\n#### Allowed Updates\n- Set an email address as `primary` (must already be confirmed). - Mark an email as `verified` (must already be confirmed).\n#### Returns\nReturns the updated email address in a JSON object with a `data` key.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Users"
        ],
        "operationId": "user_email_detail_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user. Example: `abc123`"
          },
          {
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the email address. Example: `1a2b3c`"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "JSON API representation of the updates to the email address.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "user-emails"
                      ],
                      "example": "user-emails"
                    },
                    "id": {
                      "type": "string",
                      "description": "The email ID to update. Example: `1a2b3c`"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "primary": {
                          "type": "boolean",
                          "description": "Whether this email should be set as primary."
                        },
                        "verified": {
                          "type": "boolean",
                          "description": "Whether this email should be marked as verified (requires confirmation first)."
                        }
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "data": {
                  "type": "user-emails",
                  "id": "1a2b3c",
                  "attributes": {
                    "primary": true
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the email address.",
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    },
                    "social": {
                      "type": "object",
                      "readOnly": false,
                      "additionalProperties": true,
                      "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                    },
                    "employment": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's employment history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "education": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's educational history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "degree": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie",
                    "social": {
                      "github": [
                        "https://github.com/caseyrollins"
                      ],
                      "twitter": [
                        "https://twitter.com/crollins"
                      ]
                    },
                    "employment": [
                      {
                        "title": "Data Scientist",
                        "institution": "Open Science Framework",
                        "department": "Engineering",
                        "startYear": 2018,
                        "startMonth": 5,
                        "ongoing": true
                      }
                    ],
                    "education": [
                      {
                        "degree": "MS in Computer Science",
                        "institution": "University of Somewhere",
                        "department": "Computer Science",
                        "startYear": 2014,
                        "startMonth": 9,
                        "endYear": 2016,
                        "endMonth": 6,
                        "ongoing": false
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. This can occur if trying to set an unconfirmed email as primary or verify an unconfirmed email."
          },
          "403": {
            "description": "Permission denied."
          },
          "404": {
            "description": "Email address not found."
          }
        }
      },
      "delete": {
        "summary": "Remove a User's Email Address",
        "description": "Deletes an email address from the user's account.\n- If the email is confirmed and verified, it will be removed. - If the email is unconfirmed, it will be removed from unconfirmed emails. - Cannot delete the primary email address.\n#### Returns\nReturns a `204 No Content` response if the email was successfully removed.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Users"
        ],
        "operationId": "user_email_detail_delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user. Example: `abc123`"
          },
          {
            "in": "path",
            "name": "email_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the email address. Example: `1a2b3c`"
          }
        ],
        "responses": {
          "204": {
            "description": "Email address successfully removed."
          },
          "400": {
            "description": "Bad request. Cannot delete the primary email address."
          },
          "403": {
            "description": "Permission denied."
          },
          "404": {
            "description": "Email address not found."
          }
        }
      }
    },
    "/users/{user_id}/settings/export/": {
      "post": {
        "summary": "Request User Account Export",
        "description": "Initiates an export of the user's account data.\nThis endpoint triggers an email to OSF support requesting an export of the user's account data. Only the authenticated user can request their own account export.\n## Returns\nReturns a `204 No Content` response if the export request was successfully submitted.\n## Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\nSome common error cases:\n - `403 Forbidden`: You do not have permission to request an export for this user.\n - `429 Too Many Requests`: Export requests are throttled. You may need to wait before trying again.",
        "tags": [
          "Users"
        ],
        "operationId": "user_account_export_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user requesting the export.\nExample: `abc123`"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "A JSON API representation of the export request.\nNo additional attributes are required in the request payload.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "user-account-export-form"
                      ],
                      "example": "user-account-export-form"
                    }
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "x-examples": {
              "application/json": {
                "data": {
                  "type": "user-account-export-form"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Export request successfully submitted.\nThe user will receive confirmation once the export process is completed."
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to request an export for this user."
          },
          "429": {
            "description": "Too many requests.\nYou have exceeded the allowed number of export requests. Please wait and try again later."
          }
        }
      }
    },
    "/users/{user_id}/settings/identities/": {
      "get": {
        "summary": "List User External Identities",
        "description": "Retrieves a list of external identities connected to the user.\nExternal identities represent accounts linked from external services or identity providers (e.g., ORCID, institutions).\nOnly the authenticated user can view their own external identities.\n#### Returns\nReturns a JSON object with a `data` key containing a list of external identities associated with the user.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "tags": [
          "Users"
        ],
        "operationId": "user_identities_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user whose external identities are being listed.\nExample: `abc123`"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of external identities associated with the user.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "User",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships",
                      "links"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The unique identifier of the user entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the user entity (`users`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": false,
                        "description": "The properties of the user entity.",
                        "required": [
                          "active",
                          "date_registered",
                          "full_name"
                        ],
                        "properties": {
                          "active": {
                            "type": "boolean",
                            "readOnly": true,
                            "description": "Whether or not the user is an active user."
                          },
                          "date_registered": {
                            "type": "string",
                            "format": "date-time",
                            "readOnly": true,
                            "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                          },
                          "family_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The family name of the user, used for bibliographic citations."
                          },
                          "full_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The full name of the user, used for display on the OSF."
                          },
                          "given_name": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The given name of the user, used for bibliographic citations."
                          },
                          "middle_names": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The middle names of the user, used for bibliographic citations."
                          },
                          "suffix": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The suffix of the user, used for bibliographic citations."
                          },
                          "locale": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's locale, e.g. 'en_US'."
                          },
                          "timezone": {
                            "type": "string",
                            "readOnly": false,
                            "description": "The user's timezone, e.g. 'Etc/UTC'."
                          },
                          "social": {
                            "type": "object",
                            "readOnly": false,
                            "additionalProperties": true,
                            "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                          },
                          "employment": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's employment history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          },
                          "education": {
                            "type": "array",
                            "readOnly": false,
                            "description": "A list of the user's educational history records.",
                            "items": {
                              "type": "object",
                              "required": [
                                "institution",
                                "startYear",
                                "startMonth",
                                "ongoing"
                              ],
                              "properties": {
                                "degree": {
                                  "type": "string"
                                },
                                "institution": {
                                  "type": "string"
                                },
                                "department": {
                                  "type": "string"
                                },
                                "startYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "startMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "endYear": {
                                  "type": "integer",
                                  "minimum": 1900
                                },
                                "endMonth": {
                                  "type": "integer",
                                  "minimum": 1,
                                  "maximum": 12
                                },
                                "ongoing": {
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "title": "Relationships",
                        "readOnly": true,
                        "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                        "properties": {
                          "institutions": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of institutions the user is affiliated with."
                          },
                          "nodes": {
                            "type": "string",
                            "readOnly": true,
                            "description": "A link to the list of nodes the user is a contributor to."
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the user entity.",
                        "properties": {
                          "html": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile page on the OSF."
                          },
                          "profile_image": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the user's profile image."
                          }
                        }
                      }
                    },
                    "example": {
                      "data": {
                        "type": "users",
                        "id": "{user_id}",
                        "attributes": {
                          "full_name": "Casey M. Rollins",
                          "middle_names": "Marie",
                          "social": {
                            "github": [
                              "https://github.com/caseyrollins"
                            ],
                            "twitter": [
                              "https://twitter.com/crollins"
                            ]
                          },
                          "employment": [
                            {
                              "title": "Data Scientist",
                              "institution": "Open Science Framework",
                              "department": "Engineering",
                              "startYear": 2018,
                              "startMonth": 5,
                              "ongoing": true
                            }
                          ],
                          "education": [
                            {
                              "degree": "MS in Computer Science",
                              "institution": "University of Somewhere",
                              "department": "Computer Science",
                              "startYear": 2014,
                              "startMonth": 9,
                              "endYear": 2016,
                              "endMonth": 6,
                              "ongoing": false
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "orcid",
                    "type": "external-identities",
                    "attributes": {
                      "external_id": "0000-0002-1825-0097",
                      "status": "VERIFIED"
                    }
                  },
                  {
                    "id": "institution-abc",
                    "type": "external-identities",
                    "attributes": {
                      "external_id": "example-university.edu",
                      "status": "LINKED"
                    }
                  }
                ]
              }
            }
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to view external identities for this user."
          }
        }
      }
    },
    "/users/{user_id}/settings/identities/{identity_id}": {
      "get": {
        "summary": "Retrieve a User's External Identity",
        "description": "Retrieves detailed information about a single external identity linked to the user.\nExternal identities represent accounts linked from external services or identity providers (e.g., ORCID, institutions).\nOnly the authenticated user can view their own external identities.\n#### Returns\nReturns a JSON object with a `data` key containing the details of the requested external identity.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "tags": [
          "Users"
        ],
        "operationId": "user_identity_detail_read",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user whose external identity is being retrieved.\nExample: `abc123`"
          },
          {
            "in": "path",
            "name": "identity_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the external identity to retrieve.\nExample: `orcid`"
          }
        ],
        "responses": {
          "200": {
            "description": "A single external identity for the user.",
            "schema": {
              "type": "object",
              "title": "User",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships",
                "links"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the user entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the user entity (`users`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the user entity.",
                  "required": [
                    "active",
                    "date_registered",
                    "full_name"
                  ],
                  "properties": {
                    "active": {
                      "type": "boolean",
                      "readOnly": true,
                      "description": "Whether or not the user is an active user."
                    },
                    "date_registered": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the user registered their account, as an iso8601 formatted timestamp."
                    },
                    "family_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The family name of the user, used for bibliographic citations."
                    },
                    "full_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The full name of the user, used for display on the OSF."
                    },
                    "given_name": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The given name of the user, used for bibliographic citations."
                    },
                    "middle_names": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The middle names of the user, used for bibliographic citations."
                    },
                    "suffix": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The suffix of the user, used for bibliographic citations."
                    },
                    "locale": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's locale, e.g. 'en_US'."
                    },
                    "timezone": {
                      "type": "string",
                      "readOnly": false,
                      "description": "The user's timezone, e.g. 'Etc/UTC'."
                    },
                    "social": {
                      "type": "object",
                      "readOnly": false,
                      "additionalProperties": true,
                      "description": "A dictionary of the user's social and academic profile links. \nFields may include:\n- `github`, `twitter`, `linkedIn`: List of profile URLs (strings)\n- `scholar`, `orcid`, `researcherId`, `impactStory`, etc.: Single URL string\n- `profileWebsites`: List of personal website URLs (strings)\n"
                    },
                    "employment": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's employment history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "education": {
                      "type": "array",
                      "readOnly": false,
                      "description": "A list of the user's educational history records.",
                      "items": {
                        "type": "object",
                        "required": [
                          "institution",
                          "startYear",
                          "startMonth",
                          "ongoing"
                        ],
                        "properties": {
                          "degree": {
                            "type": "string"
                          },
                          "institution": {
                            "type": "string"
                          },
                          "department": {
                            "type": "string"
                          },
                          "startYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "startMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "endYear": {
                            "type": "integer",
                            "minimum": 1900
                          },
                          "endMonth": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 12
                          },
                          "ongoing": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the user entity.",
                  "properties": {
                    "institutions": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of institutions the user is affiliated with."
                    },
                    "nodes": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A link to the list of nodes the user is a contributor to."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the user entity.",
                  "properties": {
                    "html": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile page on the OSF."
                    },
                    "profile_image": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the user's profile image."
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "users",
                  "id": "{user_id}",
                  "attributes": {
                    "full_name": "Casey M. Rollins",
                    "middle_names": "Marie",
                    "social": {
                      "github": [
                        "https://github.com/caseyrollins"
                      ],
                      "twitter": [
                        "https://twitter.com/crollins"
                      ]
                    },
                    "employment": [
                      {
                        "title": "Data Scientist",
                        "institution": "Open Science Framework",
                        "department": "Engineering",
                        "startYear": 2018,
                        "startMonth": 5,
                        "ongoing": true
                      }
                    ],
                    "education": [
                      {
                        "degree": "MS in Computer Science",
                        "institution": "University of Somewhere",
                        "department": "Computer Science",
                        "startYear": 2014,
                        "startMonth": 9,
                        "endYear": 2016,
                        "endMonth": 6,
                        "ongoing": false
                      }
                    ]
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "orcid",
                  "type": "external-identities",
                  "attributes": {
                    "external_id": "0000-0002-1825-0097",
                    "status": "VERIFIED"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to view external identities for this user."
          },
          "404": {
            "description": "External identity not found.\nNo identity with the given ID exists for this user."
          }
        }
      },
      "delete": {
        "summary": "Remove a User's External Identity",
        "description": "Deletes (removes) an external identity from the user's account.\nOnly the authenticated user can delete their own external identities.\n#### Returns\nReturns a `204 No Content` response if the external identity was successfully removed.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "tags": [
          "Users"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user whose external identity is being deleted.\nExample: `abc123`"
          },
          {
            "in": "path",
            "name": "identity_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the external identity to delete.\nExample: `orcid`"
          }
        ],
        "responses": {
          "204": {
            "description": "External identity successfully removed."
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to remove external identities for this user."
          },
          "404": {
            "description": "External identity not found.\nNo identity with the given ID exists for this user."
          }
        }
      }
    },
    "/users/{user_id}/settings/password/": {
      "post": {
        "summary": "Change a User's Password",
        "description": "Change the password for the specified user.\nOnly the current authenticated user can change their own password using this endpoint.\n#### Returns\nReturns a `204 No Content` response if the password change was successful.\n#### Errors\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.\nSome common error cases: - `400 Bad Request`: Invalid or missing password fields. - `403 Forbidden`: You are not authorized to change this user's password. - `429 Too Many Requests`: Too many failed attempts; try again later.",
        "tags": [
          "Users"
        ],
        "operationId": "user_password_change",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user_id",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the user whose password is being changed.\nExample: `abc123`"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "A JSON API representation of the password change request.\nYou must provide both the existing password and the new password.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "user_passwords"
                      ],
                      "example": "user_passwords"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "existing_password": {
                          "type": "string",
                          "description": "The user's current password.",
                          "example": "current_password_123"
                        },
                        "new_password": {
                          "type": "string",
                          "description": "The new password to set for the user.",
                          "example": "new_secure_password_456"
                        }
                      }
                    }
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "x-examples": {
              "application/json": {
                "data": {
                  "type": "user_passwords",
                  "attributes": {
                    "existing_password": "current_password_123",
                    "new_password": "new_secure_password_456"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Password successfully changed.\nAll sessions for the user will be logged out and must be re-authenticated."
          },
          "400": {
            "description": "Bad request.\nThe existing password is incorrect, or the new password is invalid."
          },
          "403": {
            "description": "Permission denied.\nYou do not have permission to change this user's password."
          },
          "429": {
            "description": "Too many failed attempts.\nPlease wait before trying again."
          }
        }
      }
    },
    "/view_only_links/{link_id}/": {
      "get": {
        "summary": "Retrieve a view only link",
        "description": "Retrieves details about a specific view only link.\n#### Permissions\nOnly project administrators may retrieve the details of a view only link. Attempting to retrieve a view only link without appropriate permissions will result in a 403 Forbidden response.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested view only link, if the request is successful.\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "View Only Links"
        ],
        "operationId": "view_only_links_read",
        "x-response-schema": "View Only Link",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "view-only-links",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the view only link."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The type identifier of the view only link ('view-only-links')."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "The properties of the view only link entity.",
                  "properties": {
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The time at which the view only link was created, as an iso8601 formatted timestamp."
                    },
                    "anonymous": {
                      "type": "boolean",
                      "default": true,
                      "readOnly": false,
                      "description": "Whether or not the view only link has anonymized contributors"
                    },
                    "name": {
                      "type": "string",
                      "default": "Shared project link",
                      "readOnly": false,
                      "description": "The name of the view only link"
                    },
                    "key": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The view only key"
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "URLs to other entities or entity collections that have a relationship to the view only link entity.",
                  "required": [
                    "nodes",
                    "creator"
                  ],
                  "properties": {
                    "nodes": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": false,
                      "description": "A relationship to the nodes which this view only link gives read-only access to."
                    },
                    "creator": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A relationship to the user who created this view only link."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "nodes": {
                      "links": {
                        "self": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/relationships/nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "http://api.osf.io/v2/view_only_links/<link_id>/nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "creator": {
                      "links": {
                        "related": {
                          "href": "http://api.osf.io/v2/users/<user_id>/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "attributes": {
                    "date_created": "2017-03-20T20:11:01.603851",
                    "anonymous": false,
                    "key": "<view_only_link_key>",
                    "name": "Test View Only Link"
                  },
                  "type": "view-only-links",
                  "id": "<link_id>"
                }
              }
            }
          }
        }
      }
    },
    "/view_only_links/{link_id}/nodes/": {
      "get": {
        "summary": "List all nodes",
        "description": "\nThe list of nodes which this view only link gives read-only access to.\n#### Permissions\nOnly project administrators may retrieve the nodes of a view only link. Attempting to retrieve a view only link without appropriate permissions will result in a 403 Forbidden response.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object and contains the full representation of the node, meaning additional requests to a node's detail view are not necessary.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "link_id",
            "required": true,
            "description": "The unique identifier of the view only link."
          }
        ],
        "tags": [
          "View Only Links"
        ],
        "operationId": "view_only_links_node_list",
        "x-response-schema": "Node",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Node",
                "required": [
                  "type",
                  "attributes"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the node entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the node entity (`nodes`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the node entity.",
                    "required": [
                      "title",
                      "category"
                    ],
                    "properties": {
                      "category": {
                        "type": "string",
                        "readOnly": false,
                        "enum": [
                          "analysis",
                          "communication",
                          "data",
                          "hypothesis",
                          "instrumentation",
                          "methods and measures",
                          "procedure",
                          "project",
                          "software",
                          "other"
                        ],
                        "description": "The category of the node, as selected by project contributors."
                      },
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the node."
                      },
                      "collection": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a collection. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "current_user_can_comment": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the current user has permission to post comments on this node. Comments on nodes can be set to allow all users to comment (if public) or restricted to only allow comments from contributors."
                      },
                      "current_user_permissions": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of strings representing the permissions for the current user on this node. Valid permissions are \"admin\", \"read\", and \"write\"."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the node was last modified, as an iso8601 formatted timestamp."
                      },
                      "description": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The description of the node."
                      },
                      "fork": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not this node represents a fork of another node."
                      },
                      "forked_date": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "If this node is a fork of another node, the time at which the node was created, as an iso8601 formatted timestamp."
                      },
                      "node_license": {
                        "type": "string",
                        "readOnly": false,
                        "description": "A dictionary containing the metadata (copyright year and holder) associated with the node license (required for certain license types)."
                      },
                      "preprint": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not a preprint has been created from this node, or if this node was created for a preprint."
                      },
                      "public": {
                        "type": "boolean",
                        "readOnly": false,
                        "description": "Whether or not the node is publicly visible. This field is only editable by project administrators."
                      },
                      "registration": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "Whether or not the node represents a registration. This value should always be `false`. This field may be deprecated in future versions."
                      },
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": false,
                        "description": "A list of strings that describe this node, as entered by project contributors."
                      },
                      "template_from": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The unique ID of the node from which this node was templated, if this node was created from a template."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "affiliated_institutions": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of institutions this node is affiliated with."
                      },
                      "children": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of this node's children (components)."
                      },
                      "citation": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the citation details of this node."
                      },
                      "comments": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of comments on this node."
                      },
                      "contributors": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of contributors on this node."
                      },
                      "draft_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been initiated from this node and are still in a draft state."
                      },
                      "files": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of storage providers that have been enabled on this node."
                      },
                      "forked_from": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node which this node was forked from, if this node is a fork."
                      },
                      "forks": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are forks of this node."
                      },
                      "identifiers": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of identifiers for this node (i.e. ARK and DOI identifiers)."
                      },
                      "license": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the license that has been applied to this node."
                      },
                      "logs": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of log actions pertaining to this node."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current node. This field is deprecated as of verson 2.1; use the linked_nodes link instead."
                      },
                      "parent": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the direct parent of the current node, if the current node is a child node."
                      },
                      "preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that have been created from this node."
                      },
                      "root": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that is the top-level parent of the current node. If the current node is the top-level node, the root is the current node."
                      },
                      "template_node": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the node that the current node was templated from, if the current node was created from a template."
                      },
                      "view_only_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of view only links that have been created for this node."
                      },
                      "wikis": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of wiki pages for this node."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the node entity.",
                    "properties": {
                      "html": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the node's page on the OSF."
                      },
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this node."
                      }
                    }
                  }
                },
                "example": {
                  "data": {
                    "type": "nodes",
                    "attributes": {
                      "title": "An Excellent Project Title",
                      "category": "software"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/comments/?filter%5Btarget%5D=bifc7",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/bifc7/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/bifc7/",
                      "html": "https://osf.io/bifc7/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": "This is an independent replication as part of the Reproducibility Project: Psychology.",
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2017-03-03T05:00:31.512000",
                      "title": "Replication of WA Cunningham, JJ Van Bavel, IR Johnsen (2008, PS 19(2))",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-07-28T13:53:04.508000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "bifc7"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/kxhz5/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/comments/?filter%5Btarget%5D=73pnd",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/draft_registrations/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/73pnd/",
                      "html": "https://osf.io/73pnd/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": true,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-10-02T19:50:23.605000",
                      "title": "Replication of Hajcak &amp; Foti (2008, PS, Study 1)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2012-10-31T18:50:46.111000",
                      "current_user_can_comment": false,
                      "node_license": {
                        "copyright_holders": [
                          ""
                        ],
                        "year": "2016"
                      },
                      "public": true,
                      "tags": [
                        "anxiety",
                        "EMG",
                        "EEG",
                        "motivation",
                        "ERN"
                      ]
                    },
                    "type": "nodes",
                    "id": "73pnd"
                  },
                  {
                    "relationships": {
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/files/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/citation/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "template_node": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/3mqkb/",
                            "meta": {}
                          }
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/",
                            "meta": {}
                          }
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/comments/?filter%5Btarget%5D=mjasz",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/relationships/institutions/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/children/",
                            "meta": {}
                          }
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/mjasz/logs/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/nodes/mjasz/",
                      "html": "https://osf.io/mjasz/"
                    },
                    "attributes": {
                      "category": "project",
                      "fork": false,
                      "preprint": false,
                      "description": null,
                      "current_user_permissions": [
                        "read"
                      ],
                      "date_modified": "2016-08-31T18:16:25.056000",
                      "title": "Replication of Winawer, Huk, & Boroditsky (Psychological Science, 2008)",
                      "collection": false,
                      "registration": false,
                      "date_created": "2014-09-23T18:58:54.915000",
                      "current_user_can_comment": false,
                      "node_license": null,
                      "public": true,
                      "tags": []
                    },
                    "type": "nodes",
                    "id": "mjasz"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 3,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/wikis/{wiki_id}/": {
      "get": {
        "summary": "Retrieve a Wiki",
        "description": "Retrieves the details about a specific wiki.\nA wiki is a collection of markdown text pages that can be used to describe the project or dataset of contained in the attached node.\n#### Returns\nReturns a JSON object with a `data` key containing the representation of the requested wiki, if the request was successful.\n\nIf the request is unsuccessful, an `errors` key containing information about the failure will be returned. Refer to the [list of error codes](#tag/Errors-and-Error-Codes) to understand why this request may have failed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "wiki_id",
            "description": "The unique identifier of the wiki."
          }
        ],
        "tags": [
          "Wikis"
        ],
        "operationId": "wiki_read",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Wiki",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the wiki."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the wiki (`wikis`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the wiki.",
                  "required": [
                    "kind",
                    "name",
                    "date_modified",
                    "extra",
                    "content_type",
                    "path",
                    "current_user_can_comment",
                    "materialized_path",
                    "size"
                  ],
                  "properties": {
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The type of object."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name/title of the wiki page."
                    },
                    "extra": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing additional metadata about this wiki, including version information."
                    },
                    "content_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Content type of the wiki (`text/markdown`)."
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Path to the wiki object."
                    },
                    "current_user_can_comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Whether the current user is allowed to post comments on this wiki."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Materialized path to the wiki object."
                    },
                    "size": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Size of the wiki."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                  "required": [
                    "node",
                    "user",
                    "comments"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the associated node."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the user associated with this wiki."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the comments related to this wiki."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the wiki.",
                  "properties": {
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL to download the content of the wiki."
                    },
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "relationships": {
                    "node": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/tvyxz/",
                          "meta": {}
                        }
                      }
                    },
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/users/5k3hq/",
                          "meta": {}
                        }
                      }
                    },
                    "comments": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/tvyxz/comments/?filter%5Btarget%5D=zveyb",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "info": "https://api.osf.io/v2/wikis/zveyb/",
                    "download": "https://api.osf.io/v2/wikis/zveyb/content/",
                    "self": "https://api.osf.io/v2/wikis/zveyb/"
                  },
                  "attributes": {
                    "kind": "file",
                    "name": "home",
                    "date_modified": "2017-02-16T15:45:57.671957",
                    "extra": {
                      "version": 47
                    },
                    "content_type": "text/markdown",
                    "path": "/zveyb",
                    "current_user_can_comment": true,
                    "materialized_path": "/zveyb",
                    "size": 552
                  },
                  "type": "wikis",
                  "id": "xu77p"
                }
              }
            }
          }
        }
      }
    },
    "/wikis/{wiki_id}/content/": {
      "get": {
        "summary": "Retrieve the Content of a Wiki",
        "description": "Retrieves the plaintext content of a wiki in markdown format.\n#### Returns\nReturns `text/markdown` of the wiki content itself.\nIf the request is unsuccessful, plaintext with the error message will be displayed.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "wiki_id",
            "description": "The unique identifier of the wiki."
          }
        ],
        "tags": [
          "Wikis"
        ],
        "operationId": "wiki_content",
        "x-response-schema": "Wiki",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/wikis/{wiki_id}/versions/": {
      "post": {
        "summary": "Create a new version of a wiki page",
        "description": "Create a new version of a wiki page by submitting updated content.\n\nThis will store the updated content as a new version, incrementing the version number.\n\n### Permissions\n- Only contributors with write access can create new wiki versions.\n- Withdrawn registrations: Cannot create new wiki versions.\n",
        "tags": [
          "Wikis"
        ],
        "operationId": "create_wiki_version",
        "consumes": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "wiki_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the wiki page."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "The content to save in the new wiki version.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "wiki-versions"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "content"
                      ],
                      "properties": {
                        "content": {
                          "type": "string",
                          "description": "The new content for the wiki.",
                          "example": "This is an updated wiki page."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Wiki version created successfully.",
            "schema": {
              "type": "object",
              "title": "Wiki",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the wiki."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the wiki (`wikis`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the wiki.",
                  "required": [
                    "kind",
                    "name",
                    "date_modified",
                    "extra",
                    "content_type",
                    "path",
                    "current_user_can_comment",
                    "materialized_path",
                    "size"
                  ],
                  "properties": {
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The type of object."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name/title of the wiki page."
                    },
                    "extra": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing additional metadata about this wiki, including version information."
                    },
                    "content_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Content type of the wiki (`text/markdown`)."
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Path to the wiki object."
                    },
                    "current_user_can_comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Whether the current user is allowed to post comments on this wiki."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Materialized path to the wiki object."
                    },
                    "size": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Size of the wiki."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                  "required": [
                    "node",
                    "user",
                    "comments"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the associated node."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the user associated with this wiki."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the comments related to this wiki."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the wiki.",
                  "properties": {
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL to download the content of the wiki."
                    },
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to update this wiki page."
          },
          "404": {
            "description": "Wiki page not found."
          }
        }
      }
    },
    "/wikis/{wiki_id}/versions/{version_id}/": {
      "get": {
        "summary": "Retrieve details for a specific wiki version",
        "description": "Retrieve metadata and basic details about a specific version of a wiki page.\n\nWiki versions store the history of content changes and are immutable snapshots of the wiki page content at that version.\n\n### Permissions\n- Public nodes: Anyone can view wiki versions.\n- Private nodes: Only contributors can view wiki versions.\n- Withdrawn registrations: Wiki versions are not accessible.\n",
        "tags": [
          "Wikis"
        ],
        "operationId": "retrieve_wiki_version",
        "parameters": [
          {
            "name": "wiki_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the wiki page."
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version identifier for the specific wiki version."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the wiki version.",
            "schema": {
              "type": "object",
              "title": "Wiki",
              "required": [
                "type",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The identifier of the wiki."
                },
                "type": {
                  "type": "string",
                  "readOnly": false,
                  "description": "The type identifier of the wiki (`wikis`)."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": false,
                  "description": "The properties of the wiki.",
                  "required": [
                    "kind",
                    "name",
                    "date_modified",
                    "extra",
                    "content_type",
                    "path",
                    "current_user_can_comment",
                    "materialized_path",
                    "size"
                  ],
                  "properties": {
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "readOnly": true,
                      "description": "The date and time at which the wiki was last modified, as an iso8601 formatted timestamp."
                    },
                    "kind": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The type of object."
                    },
                    "name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name/title of the wiki page."
                    },
                    "extra": {
                      "type": "string",
                      "readOnly": true,
                      "description": "A dictionary containing additional metadata about this wiki, including version information."
                    },
                    "content_type": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Content type of the wiki (`text/markdown`)."
                    },
                    "path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Path to the wiki object."
                    },
                    "current_user_can_comment": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Whether the current user is allowed to post comments on this wiki."
                    },
                    "materialized_path": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Materialized path to the wiki object."
                    },
                    "size": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Size of the wiki."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": false,
                  "description": "URLs to other entities or entity collections that have a relationship to the wiki.",
                  "required": [
                    "node",
                    "user",
                    "comments"
                  ],
                  "properties": {
                    "node": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the associated node."
                    },
                    "user": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the user associated with this wiki."
                    },
                    "comments": {
                      "type": "string",
                      "readOnly": false,
                      "description": "A relationship to the comments related to this wiki."
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "URLs to alternative representations of the wiki.",
                  "properties": {
                    "download": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "The URL to download the content of the wiki."
                    },
                    "info": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    },
                    "self": {
                      "type": "string",
                      "format": "URL",
                      "readOnly": true,
                      "description": "A link to the detail page for the wiki."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "4",
                  "type": "wiki-versions",
                  "attributes": {
                    "date_created": "2024-03-10T12:00:00Z",
                    "size": 1024,
                    "content_type": "text/markdown"
                  },
                  "relationships": {
                    "wiki_page": {
                      "data": {
                        "id": "abc12",
                        "type": "wikis"
                      }
                    },
                    "user": {
                      "data": {
                        "id": "user456",
                        "type": "users"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view this wiki version."
          },
          "404": {
            "description": "Wiki version not found."
          }
        }
      }
    },
    "/wikis/{wiki_id}/versions/{version_id}/content/": {
      "get": {
        "summary": "Retrieve the raw content of a specific wiki version",
        "description": "Retrieve the plain text content of a specific version of a wiki page.\n\nThis endpoint returns the actual content stored in the wiki page for the specified version.  \nThe response is returned as plain text (`text/plain`).\n\n### Permissions\n- Public nodes: Anyone can view wiki version content.\n- Private nodes: Only contributors can view wiki version content.\n- Withdrawn registrations: Wiki version content is not accessible.\n",
        "tags": [
          "Wikis"
        ],
        "operationId": "retrieve_wiki_version_content",
        "parameters": [
          {
            "name": "wiki_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the wiki page."
          },
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The version identifier for the specific wiki version."
          }
        ],
        "produces": [
          "text/plain"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved raw wiki content.",
            "schema": {
              "type": "string",
              "example": "# My Wiki Page  \nThis is the content of my wiki page in version 4.\n"
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view this wiki version content."
          },
          "404": {
            "description": "Wiki version not found."
          }
        }
      }
    },
    "/collections/": {
      "get": {
        "summary": "List all Collections",
        "description": "Retrieves a list collections, either public or related to the user\n#### Permissions\nAnonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.\n\nComments on private nodes are only visible to contributors and administrators on the parent node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "tags": [
          "Collections"
        ],
        "operationId": "collections_list",
        "x-response-schema": "Collection",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Collection",
                "required": [
                  "type"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the collection."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the entity (`collections`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the collection.",
                    "properties": {
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the collection."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was last modified, as an iso8601 formatted timestamp."
                      },
                      "bookmarks": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection."
                      },
                      "is_promoted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "???"
                      },
                      "is_public": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is viewable to a user with no special permissions."
                      },
                      "status_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection."
                      },
                      "collected_type_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection."
                      },
                      "volume_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection."
                      },
                      "issue_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection."
                      },
                      "program_area_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of ."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that are linked to the current collection."
                      },
                      "linked_preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that are linked to the current collection."
                      },
                      "collected_metadata": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of metadata entries that are linked to the current collections."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this collection."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "attributes": {
                      "title": "Metascience's Collection",
                      "date_created": "2019-09-18T19:24:28.751486Z",
                      "date_modified": "2019-09-18T19:24:28.886438Z",
                      "bookmarks\"": false,
                      "is_promoted\"": true,
                      "is_public": true,
                      "status_choices": [
                        "Proposed",
                        "Active",
                        "Completed",
                        "Archived"
                      ],
                      "collected_type_choices": [
                        "Research",
                        "Teaching",
                        "Community Activity",
                        "Meeting",
                        "Other"
                      ],
                      "volume_choices": [],
                      "issue_choices\"": [],
                      "program_area_choices": []
                    },
                    "relationships": {
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/collections/metascience/",
                            "meta": {}
                          }
                        }
                      },
                      "node_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/node_links/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_nodes/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_registrations": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_registrations/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/linked_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_preprints": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_preprints/",
                            "meta": {}
                          },
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/linked_preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "collected_metadata": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ezcuj/collected_metadata/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/collections/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/",
                  "first": null,
                  "last": "https://api.osf.io/v2/collections/?page=2",
                  "next": "https://api.osf.io/v2/collections/?page=2",
                  "prev": null
                },
                "meta": {
                  "total": 11,
                  "per_page": 10,
                  "version": 2.2
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a Collection",
        "description": "Retrieves a list collections, either public or related to the user\n#### Permissions\nAnonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.\n\nComments on private nodes are only visible to contributors and administrators on the parent node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "collections",
                  "attributes": {
                    "title": "An Excellent Collection Title"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_create",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/collections/{collection_id}/": {
      "get": {
        "summary": "Retrieve a Collection",
        "description": "Retrieves a collection, if the user has appropriate permissions.\n\n#### Permissions\nAnonymous users are able to see all public collections at this endpoint. Logged in users will only be able to see their own content.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_detail",
        "x-response-schema": "Collection",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Collection",
                "required": [
                  "type"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "The unique identifier of the collection."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": false,
                    "description": "The type identifier of the entity (`collections`)."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": false,
                    "description": "The properties of the collection.",
                    "properties": {
                      "title": {
                        "type": "string",
                        "readOnly": false,
                        "description": "The title of the collection."
                      },
                      "date_created": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was created, as an iso8601 formatted timestamp."
                      },
                      "date_modified": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true,
                        "description": "The time at which the collection was last modified, as an iso8601 formatted timestamp."
                      },
                      "bookmarks": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is being used as part of the bookmarking feature that allows each user to create a personal collection."
                      },
                      "is_promoted": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "???"
                      },
                      "is_public": {
                        "type": "boolean",
                        "readOnly": true,
                        "description": "This attribute indicates if a collection is viewable to a user with no special permissions."
                      },
                      "status_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `status` metadata options acceptable for entities in the a collection. This indicates the status of a entity within a collection."
                      },
                      "collected_type_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `collected_type` metadata options acceptable for entities in the a collection. This indicates the collected types of entities within a collection."
                      },
                      "volume_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `volume` metadata options acceptable for entities in the a collection.  This indicates what volumes exist of a multi-volume collection."
                      },
                      "issue_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `issue` metadata options acceptable for entities in the a collection.  This indicates what issues exist of a multi-issue collection."
                      },
                      "program_area_choices": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true,
                        "description": "A list of the acceptable entity `program_area` metadata options acceptable for entities in the a collection.  This indicates what program areas a collection is composed of ."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": false,
                    "description": "URLs to other entities or entity collections that have a relationship to the node entity.",
                    "properties": {
                      "provider": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that this node relates to."
                      },
                      "node_links": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_nodes": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of nodes that are linked to the current collection."
                      },
                      "linked_registrations": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of registrations that are linked to the current collection."
                      },
                      "linked_preprints": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of preprints that are linked to the current collection."
                      },
                      "collected_metadata": {
                        "type": "string",
                        "readOnly": true,
                        "description": "A link to the list of metadata entries that are linked to the current collections."
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "URLs to alternative representations of the entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "URL",
                        "readOnly": true,
                        "description": "A link to the canonical API endpoint of this collection."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "type": "collections",
                "data": {
                  "attributes": {
                    "title": "Metascience's Collection",
                    "date_created": "2019-09-18T19:24:28.751486Z",
                    "date_modified": "2019-09-18T19:24:28.886438Z",
                    "bookmarks\"": false,
                    "is_promoted\"": true,
                    "is_public": true,
                    "status_choices": [
                      "Proposed",
                      "Active",
                      "Completed",
                      "Archived"
                    ],
                    "collected_type_choices": [
                      "Research",
                      "Teaching",
                      "Community Activity",
                      "Meeting",
                      "Other"
                    ],
                    "volume_choices": [],
                    "issue_choices\"": [],
                    "program_area_choices": []
                  },
                  "relationships": {
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/providers/collections/metascience/",
                          "meta": {}
                        }
                      }
                    },
                    "node_links": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/node_links/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_nodes": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_nodes/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/linked_nodes/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_registrations": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_registrations/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/linked_registrations/",
                          "meta": {}
                        }
                      }
                    },
                    "linked_preprints": {
                      "links": {
                        "self": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/relationships/linked_preprints/",
                          "meta": {}
                        },
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/linked_preprints/",
                          "meta": {}
                        }
                      }
                    },
                    "collected_metadata": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/collections/ezcuj/collected_metadata/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/collections/"
                  }
                },
                "meta": {
                  "version": 2.2
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Collection",
        "description": "Deletes a collection, if the user has appropriate permissions.\n#### Permissions\nUsers must have write permissions on a collection in order to delete it\n#### Returns\nNothing is returned in the body",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_delete",
        "x-response-schema": "Collection",
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/collections/{collection_id}/linked_nodes": {
      "get": {
        "summary": "List All Linked Nodes for a Collection",
        "description": "List of all nodes linked to the given collection.\n#### Permissions\nThis returns all public nodes associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "2vewn",
                    "type": "nodes",
                    "attributes": {
                      "title": "A Good Node Title",
                      "description": "A good Node description.",
                      "category": "project",
                      "custom_citation": null,
                      "date_created": "2020-05-11T17:57:58.725950Z",
                      "date_modified": "2020-11-20T14:31:59.946554Z",
                      "registration": false,
                      "preprint": false,
                      "fork": false,
                      "collection": false,
                      "tags": [],
                      "node_license": {
                        "copyright_holders": [
                          "Test User"
                        ],
                        "year": "2020"
                      },
                      "analytics_key": "c438e67a7680113ee310cad8121e520bab632f3df95d443a4fadb0cbf3af890acc0d91ab6499297ec622bb827979c6005f13a80b3eddcf87a081667e6b2ac3da6eff414dc659b19e3a473f8bf7ef295bff3c036c955c8313fa6ce1da1253e74592e0b399940ca9f099b36923df8c11622d0a1768ae53f79a6061da76007061207f299a0e507f1ff47baeb902f2c403f0",
                      "current_user_can_comment": false,
                      "current_user_permissions": [],
                      "current_user_is_contributor": false,
                      "current_user_is_contributor_or_group_member": false,
                      "wiki_enabled": true,
                      "public": true
                    },
                    "relationships": {
                      "license": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e965/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "563c1cf88c5e4a3877f9e965",
                          "type": "licenses"
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/children/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/comments/?filter%5Btarget%5D=2vewn",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "implicit_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/implicit_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/files/",
                            "meta": {}
                          }
                        }
                      },
                      "settings": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/settings/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "data": null
                      },
                      "template_node": {
                        "data": null
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "groups": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/groups/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "data": null
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/institutions/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "draft_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/draft_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "region": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/regions/us/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "us",
                          "type": "regions"
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_nodes/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/linked_registrations/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/citation/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "preprints": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/preprints/",
                            "meta": {}
                          }
                        }
                      },
                      "storage": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/storage/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "2vewn",
                          "type": "nodes"
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/nodes/2vewn/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "html": "https://osf.io/2vewn/",
                      "self": "https://api.osf.io/v2/nodes/2vewn/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/collections/ux3nq/linked_nodes/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_nodes/relationships/": {
      "post": {
        "summary": "Link Nodes to Collection",
        "description": "This endpoint allow users to a add a node to a collection by issuing a POST request.\n#### Permissions\nThis returns all public nodes associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_nodes",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "newid"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "test2"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_relationships",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "examples": {
              "application/json": null
            }
          }
        }
      },
      "get": {
        "summary": "Give a Sparse List of Node Ids",
        "description": "List of all the node ids linked to the given collection.\n#### Permissions\nThis returns all public nodes associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_relationships_create",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "nodes",
                    "id": "guid0"
                  },
                  {
                    "type": "nodes",
                    "id": "newid"
                  },
                  {
                    "type": "nodes",
                    "id": "test2"
                  },
                  {
                    "type": "nodes",
                    "id": "guid4"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/dse23/relationships/linked_nodes/",
                  "html": "https://api.osf.io/v2/collections/dse23/linked_nodes/"
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Nodes From Collection",
        "description": "\nThis removes associated nodes from a collection\n#### Permissions\nAny user with write permissions on this collection should be to remove nodes from this collection.\n#### Returns\nNothing in the response body.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_nodes",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "newid"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "test2"
                  },
                  {
                    "type": "linked_nodes",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_nodes_relationships_delete",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_registrations/": {
      "get": {
        "summary": "List All Linked Registrations for a Collection",
        "description": "List of all registrations linked to the given collection.\n#### Permissions\nThis returns all public registrations associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "qrwhu",
                    "type": "registrations",
                    "attributes": {
                      "title": "A Good Registration Title",
                      "description": "Half believe though on significant.",
                      "category": "project",
                      "custom_citation": "",
                      "date_created": "2020-12-10T14:36:42.195364Z",
                      "date_modified": "2020-12-10T14:36:39.925278Z",
                      "registration": true,
                      "preprint": false,
                      "fork": false,
                      "collection": false,
                      "tags": [],
                      "access_requests_enabled": false,
                      "node_license": null,
                      "analytics_key": null,
                      "current_user_can_comment": true,
                      "current_user_permissions": [],
                      "current_user_is_contributor": false,
                      "current_user_is_contributor_or_group_member": false,
                      "wiki_enabled": true,
                      "public": true,
                      "reviews_state": "initial",
                      "article_doi": null,
                      "pending_embargo_approval": false,
                      "pending_embargo_termination_approval": false,
                      "embargoed": false,
                      "pending_registration_approval": false,
                      "archiving": false,
                      "pending_withdrawal": false,
                      "withdrawn": false,
                      "date_registered": "2020-12-10T14:36:42.166193Z",
                      "date_withdrawn": null,
                      "embargo_end_date": null,
                      "withdrawal_justification": null,
                      "registration_supplement": "Open-Ended Registration",
                      "registered_meta": {},
                      "registration_responses": {
                        "summary": ""
                      }
                    },
                    "relationships": {
                      "license": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/children/",
                            "meta": {}
                          }
                        }
                      },
                      "comments": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/comments/?filter%5Btarget%5D=qrwhu",
                            "meta": {}
                          }
                        }
                      },
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "implicit_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/implicit_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/files/",
                            "meta": {}
                          }
                        }
                      },
                      "wikis": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/wikis/",
                            "meta": {}
                          }
                        }
                      },
                      "forked_from": {
                        "data": null
                      },
                      "template_node": {
                        "data": null
                      },
                      "forks": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/forks/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_by_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_by_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_by_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "parent": {
                        "data": null
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "affiliated_institutions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/institutions/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/institutions/",
                            "meta": {}
                          }
                        }
                      },
                      "region": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/regions/us/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "us",
                          "type": "regions"
                        }
                      },
                      "root": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "qrwhu",
                          "type": "registrations"
                        }
                      },
                      "logs": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/logs/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_nodes": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_nodes/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/linked_nodes/",
                            "meta": {}
                          }
                        }
                      },
                      "linked_registrations": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/linked_registrations/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/linked_registrations/",
                            "meta": {}
                          }
                        }
                      },
                      "view_only_links": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/view_only_links/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/citation/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "qrwhu",
                          "type": "registrations"
                        }
                      },
                      "storage": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/qrwhu/storage/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "qrwhu",
                          "type": "nodes"
                        }
                      },
                      "registered_by": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/9hr6c/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "9hr6c",
                          "type": "users"
                        }
                      },
                      "registered_from": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/4gnbx/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "4gnbx",
                          "type": "nodes"
                        }
                      },
                      "registration_schema": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/schemas/registrations/5fa1bb678ccd39001e96c32b/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5fa1bb678ccd39001e96c32b",
                          "type": "registration-schemas"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/registrations/osf/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "osf",
                          "type": "registration-providers"
                        }
                      },
                      "review_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "requests": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/requests/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.osf.io/v2/registrations/qrwhu/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "html": "https://osf.io/qrwhu/",
                      "self": "https://api.osf.io/v2/registrations/qrwhu/"
                    }
                  }
                ]
              },
              "meta": {
                "total": 1,
                "per_page": 10,
                "version": "2.20"
              },
              "links": {
                "self": "https://api.osf.io/v2/collections/nywr6/linked_registrations/",
                "first": null,
                "last": null,
                "prev": null,
                "next": null
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_registrations/relationships/": {
      "post": {
        "summary": "Link Registrations to Collection",
        "description": "This endpoint allow users to a add a registration to a collection by issuing a POST request.\n#### Permissions\nThis returns all public registrations associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of comment objects. Each resource in the array is a separate comment object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_registrations",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "newid"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "test2"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_relationships",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "examples": {
              "application/json": null
            }
          }
        }
      },
      "get": {
        "summary": "Give a Sparse List of Registrations Ids",
        "description": "List of all the registration ids linked to the given collection.\n#### Permissions\nThis returns all public registrations associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_relationships_create",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "registrations",
                    "id": "guid0"
                  },
                  {
                    "type": "registrations",
                    "id": "newid"
                  },
                  {
                    "type": "registrations",
                    "id": "test2"
                  },
                  {
                    "type": "registrations",
                    "id": "guid4"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/dse23/relationships/linked_registrations/",
                  "html": "https://api.osf.io/v2/collections/dse23/linked_registrations/"
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Registrations From Collection",
        "description": "\nThis removes associated registrations from a collection\n#### Permissions\nAny user with write permissions on this collection should be to remove registrations from this collection.\n#### Returns\nNothing in the response body.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": [
                  {
                    "type": "linked_registrations",
                    "id": "guid0"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "newid"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "test2"
                  },
                  {
                    "type": "linked_registrations",
                    "id": "guid4"
                  }
                ]
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_registrations_relationships_delete",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": null
            }
          }
        }
      }
    },
    "/collections/{collection_id}/linked_preprints/": {
      "get": {
        "summary": "List All Linked Preprints for a Collection",
        "description": "List of all preprints linked to the given collection.\n#### Permissions\nThis returns all public preprints associated with this collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of up to 10 nodes. Each resource in the array is a separate node object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_linked_preprints_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "zjxhs",
                    "type": "preprints",
                    "attributes": {
                      "date_created": "2020-12-10T13:55:03.994648Z",
                      "date_modified": "2020-12-10T13:55:05.252565Z",
                      "date_published": "2020-12-10T13:55:05.046084Z",
                      "original_publication_date": null,
                      "doi": "10.123/0",
                      "title": "A Good Preprint Title",
                      "description": "Research physical language morning consumer front population.",
                      "is_published": true,
                      "is_preprint_orphan": false,
                      "license_record": null,
                      "tags": [],
                      "preprint_doi_created": "2020-12-10T13:55:05.230155Z",
                      "date_withdrawn": null,
                      "current_user_permissions": [],
                      "public": true,
                      "reviews_state": "accepted",
                      "date_last_transitioned": "2020-12-10T13:55:05.046084Z"
                    },
                    "relationships": {
                      "contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "bibliographic_contributors": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/bibliographic_contributors/",
                            "meta": {}
                          }
                        }
                      },
                      "citation": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/citation/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "zjxhs",
                          "type": "preprints"
                        }
                      },
                      "identifiers": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/identifiers/",
                            "meta": {}
                          }
                        }
                      },
                      "node": {
                        "links": {
                          "self": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/relationships/node/",
                            "meta": {}
                          }
                        }
                      },
                      "license": {
                        "data": null
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/providers/preprints/slug1/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "slug1",
                          "type": "preprint-providers"
                        }
                      },
                      "files": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/files/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_file": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/files/5fd228b8e64e1300aa99ee17/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5fd228b8e64e1300aa99ee17",
                          "type": "files"
                        }
                      },
                      "review_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/review_actions/",
                            "meta": {}
                          }
                        }
                      },
                      "requests": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/requests/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/preprints/zjxhs/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/preprints/zjxhs/",
                      "html": "https://osf.io/preprints/slug1/zjxhs/",
                      "doi": "https://doi.org/10.123/0",
                      "preprint_doi": "https://doi.org/None/FK2osf.io/zjxhs"
                    }
                  }
                ]
              },
              "meta": {
                "total": 1,
                "per_page": 10,
                "version": "2.20"
              },
              "links": {
                "self": "https://api.osf.io/v2/collections/nywr6/linked_preprints/",
                "first": null,
                "last": null,
                "prev": null,
                "next": null
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/": {
      "get": {
        "summary": "Retrieve a list of collected metadata for a collection",
        "description": "List of user created metadata for entities within a collection.\n#### Permissions\nIn order to view this metadata it must be public or a user must have read permissions for collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_registrations_list",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "2vewn",
                    "type": "collected-metadata",
                    "attributes": {
                      "collected_type": "Document Analysis",
                      "status": "",
                      "volume": "",
                      "issue": "",
                      "program_area": "N/A",
                      "subjects": []
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/users/794j8/?format=json",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "794j8",
                          "type": "users"
                        }
                      },
                      "collection": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/collections/ux3nq/?format=json",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "ux3nq",
                          "type": "collections"
                        }
                      },
                      "guid": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/guids/2vewn/?format=json",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "guid": {
                        "data": {
                          "id": "2vewn",
                          "type": "nodes",
                          "attributes": {
                            "title": "A Good Node Title",
                            "description": "A Good Node Description",
                            "category": "project",
                            "custom_citation": null,
                            "date_created": "2020-05-11T17:57:58.725950",
                            "date_modified": "2020-11-20T14:31:59.946554",
                            "registration": false,
                            "preprint": false,
                            "fork": false,
                            "collection": false,
                            "tags": [],
                            "access_requests_enabled": true,
                            "node_license": {
                              "copyright_holders": [
                                "Test User"
                              ],
                              "year": "2020"
                            },
                            "analytics_key": "c438e67a7680113ee310cad8121e520bab632f3df95d443a4fadb0cbf3af890acc0d91ab6499297ec622bb827979c6005f13a80b3eddcf87a081667e6b2ac3da6eff414dc659b19e3a473f8bf7ef295bff3c036c955c8313fa6ce1da1253e74592e0b399940ca9f099b36923df8c11622d0a1768ae53f79a6061da76007061207f299a0e507f1ff47baeb902f2c403f0",
                            "current_user_can_comment": false,
                            "current_user_permissions": [
                              "read"
                            ],
                            "current_user_is_contributor": false,
                            "current_user_is_contributor_or_group_member": false,
                            "wiki_enabled": true,
                            "public": true,
                            "subjects": []
                          },
                          "relationships": {
                            "license": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e965/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "563c1cf88c5e4a3877f9e965",
                                "type": "licenses"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/children/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "comments": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/comments/?format=json&filter%5Btarget%5D=2vewn",
                                  "meta": {}
                                }
                              }
                            },
                            "contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/contributors/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "bibliographic_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/bibliographic_contributors/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "implicit_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/implicit_contributors/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "files": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/files/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/settings/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            },
                            "wikis": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/wikis/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "forks": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/forks/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/groups/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "node_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/node_links/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_nodes/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_by_registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "identifiers": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/identifiers/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "affiliated_institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/institutions/?format=json",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/relationships/institutions/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "draft_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/draft_registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "region": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/regions/us/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "root": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            },
                            "logs": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/logs/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_nodes/?format=json",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_nodes/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/linked_registrations/?format=json",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/relationships/linked_registrations/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "view_only_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/view_only_links/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "citation": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/citation/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/preprints/?format=json",
                                  "meta": {}
                                }
                              }
                            },
                            "storage": {
                              "links": {
                                "related": {
                                  "href": "https://api.osf.io/v2/nodes/2vewn/storage/?format=json",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "2vewn",
                                "type": "nodes"
                              }
                            }
                          },
                          "links": {
                            "html": "https://osf.io/2vewn/",
                            "self": "https://api.osf.io/v2/nodes/2vewn/"
                          }
                        }
                      }
                    },
                    "links": {}
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": {
                    "total": 1,
                    "per_page": 10
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Metadata or Subjects to a Entity in a Collection",
        "description": "List of user created metadata for entities within a collection.\n#### Permissions\nTo edit this collection a user must have collections write permissions\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "application/json": {
                  "data": {
                    "type": "collected-metadata",
                    "attributes": {
                      "volume": "test",
                      "guid": "test0",
                      "subjects": "5fd228b7e64e1300aa99ee15"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_add_metadata",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/{cgm_id}": {
      "get": {
        "summary": "Retrieve Specific Metadata for a Collection",
        "description": "\n#### Permissions\nIn order to view this metadata it must be public or a user must have read permissions for collection.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_registrations_detail",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "data": {
                "id": "zw4sh",
                "type": "collected-metadata",
                "attributes": {
                  "collected_type": "Action Research",
                  "status": "",
                  "volume": "",
                  "issue": "",
                  "program_area": "Child Welfare"
                },
                "relationships": {
                  "creator": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/users/nsx26/",
                        "meta": {}
                      }
                    },
                    "data": {
                      "id": "nsx26",
                      "type": "users"
                    }
                  },
                  "collection": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/collections/ux3nq/",
                        "meta": {}
                      }
                    },
                    "data": {
                      "id": "ux3nq",
                      "type": "collections"
                    }
                  },
                  "guid": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/guids/zw4sh/",
                        "meta": {}
                      }
                    }
                  },
                  "subjects": {
                    "links": {
                      "related": {
                        "href": "https://api.osf.io/v2/collections/ux3nq/collected_metadata/zw4sh/subjects/",
                        "meta": {}
                      },
                      "self": {
                        "href": "https://api.osf.io/v2/collections/ux3nq/collected_metadata/zw4sh/relationships/subjects/",
                        "meta": {}
                      }
                    }
                  }
                },
                "embeds": {
                  "guid": {
                    "data": {
                      "id": "zw4sh",
                      "type": "nodes",
                      "attributes": {
                        "title": "test",
                        "description": "flaksdjfasdlkfj lkjdf aslkdfj sdlfkj",
                        "category": "project",
                        "custom_citation": null,
                        "date_created": "2020-06-05T18:02:28.254638Z",
                        "date_modified": "2020-10-21T15:47:17.646448Z",
                        "registration": false,
                        "preprint": false,
                        "fork": false,
                        "collection": false,
                        "tags": [],
                        "node_license": {
                          "copyright_holders": [],
                          "year": null
                        },
                        "analytics_key": "",
                        "current_user_can_comment": false,
                        "current_user_permissions": [],
                        "current_user_is_contributor": false,
                        "current_user_is_contributor_or_group_member": false,
                        "wiki_enabled": true,
                        "public": false
                      },
                      "relationships": {
                        "license": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/licenses/563c1cf88c5e4a3877f9e96a/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "563c1cf88c5e4a3877f9e96a",
                            "type": "licenses"
                          }
                        },
                        "children": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/children/",
                              "meta": {}
                            }
                          }
                        },
                        "comments": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/comments/?filter%5Btarget%5D=zw4sh",
                              "meta": {}
                            }
                          }
                        },
                        "contributors": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/contributors/",
                              "meta": {}
                            }
                          }
                        },
                        "bibliographic_contributors": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/bibliographic_contributors/",
                              "meta": {}
                            }
                          }
                        },
                        "implicit_contributors": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/implicit_contributors/",
                              "meta": {}
                            }
                          }
                        },
                        "files": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/files/",
                              "meta": {}
                            }
                          }
                        },
                        "settings": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/settings/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "wikis": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/wikis/",
                              "meta": {}
                            }
                          }
                        },
                        "forked_from": {
                          "data": null
                        },
                        "template_node": {
                          "data": null
                        },
                        "forks": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/forks/",
                              "meta": {}
                            }
                          }
                        },
                        "groups": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/groups/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_by_nodes": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_by_nodes/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_by_registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_by_registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "parent": {
                          "data": null
                        },
                        "identifiers": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/identifiers/",
                              "meta": {}
                            }
                          }
                        },
                        "affiliated_institutions": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/institutions/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/institutions/",
                              "meta": {}
                            }
                          }
                        },
                        "draft_registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/draft_registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "region": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/regions/us/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "us",
                            "type": "regions"
                          }
                        },
                        "root": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "logs": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/logs/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_nodes": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_nodes/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/linked_nodes/",
                              "meta": {}
                            }
                          }
                        },
                        "linked_registrations": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/linked_registrations/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/linked_registrations/",
                              "meta": {}
                            }
                          }
                        },
                        "view_only_links": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/view_only_links/",
                              "meta": {}
                            }
                          }
                        },
                        "citation": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/citation/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "preprints": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/preprints/",
                              "meta": {}
                            }
                          }
                        },
                        "storage": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/storage/",
                              "meta": {}
                            }
                          },
                          "data": {
                            "id": "zw4sh",
                            "type": "nodes"
                          }
                        },
                        "subjects": {
                          "links": {
                            "related": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/subjects/",
                              "meta": {}
                            },
                            "self": {
                              "href": "https://api.osf.io/v2/nodes/zw4sh/relationships/subjects/",
                              "meta": {}
                            }
                          }
                        }
                      },
                      "links": {
                        "html": "https://osf.io/zw4sh/",
                        "self": "https://api.osf.io/v2/nodes/zw4sh/"
                      }
                    }
                  }
                },
                "links": {}
              },
              "meta": {
                "version": "2.20"
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add Metadata or Subjects to an Entity in a Collection",
        "description": "List of user created metadata for entities within a collection.\n#### Permissions\nTo edit this collection a user must have collections write permissions\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "application/json": {
                  "data": {
                    "type": "collected-metadata",
                    "attributes": {
                      "volume": "test",
                      "guid": "test0",
                      "subjects": "5fd228b7e64e1300aa99ee15"
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_detail",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "summary": "Delete Collection Metadata from entitiy",
        "description": "\n#### Permissions\nOnly a user with collection admin permissions can delete collected metadata\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_delete",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT"
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/{cgm_id}/subjects/": {
      "get": {
        "summary": "Retrieve subject data for a specific piece of metadata info for a collection",
        "description": "\n#### Permissions\nIn order to view these subject it must be a public collection or a user must have read permissions for collection.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Errors\nThis request should never return an error, other then permissions errors.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_collected_metadata",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5fd228b7e64e1300aa99ee15",
                    "type": "subjects",
                    "attributes": {
                      "text": "Example Subject #0",
                      "taxonomy_name": ""
                    },
                    "relationships": {
                      "parent": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/subjects/5fd228b7e64e1300aa99ee15/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "errors": [
                          {
                            "detail": "Not found."
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/subjects/5fd228b7e64e1300aa99ee15/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.osf.io/v2/collections/nywr6/collected_metadata/zjxhs/subjects/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/collections/{collection_id}/collected_metadata/{cgm_id}/relationships/subjects/": {
      "get": {
        "summary": "Retrieve subject metadata for a specific piece of metadata in a collection",
        "description": "\n#### Permissions\nThis is public for a logged out user when an entity is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_subjects_relationships",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "type": "subjects",
                    "id": "5fd228b7e64e1300aa99ee15"
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/collections/nywr6/collected_metadata/zjxhs/relationships/subjects/",
                  "html": "https://api.osf.io/v2/collections/nywr6/collected_metadata/zjxhs/subjects/"
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Update subjects for a specific piece of metadata in a collection",
        "description": "\n#### Permissions\nThis is editable for a user with a write permission for this collection.\n\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "cgm_id",
            "description": "A short id for that piece of metadata"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "application/json": {
                  "data": {
                    "type": "subjects",
                    "id": "5fd228b7e64e1300aa99ee15"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collections"
        ],
        "operationId": "collections_metadata_subjects_relationships_update",
        "x-response-schema": "Collection",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "OK"
          }
        }
      }
    },
    "/providers/collections/": {
      "get": {
        "summary": "List Collections Providers",
        "description": "\nThis returns a list of the Collections Providers.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of collection provider ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_list",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "testlab",
                    "type": "collection-providers",
                    "attributes": {
                      "name": "Test Lab (Stage1)",
                      "description": "<p><span>&lt;p style=\"background-color:;color:</span><span>070539</span><span>;\"&gt;</span><span><span>Character Lab was founded in 2013 by a scientist and two educators: Angela Duckworth, author of </span></span><em>Grit: The Power of Passion and Perseverance</em><span><span> and Rosa Lee and Egbert Chang Professor at the University of Pennsylvania; Dave Levin, co-founder of KIPP public charter schools; and Dominic Randolph, Head of School at Riverdale Country School. </span><span>&lt;/p&gt;</span></span></p>\n<span> </span>\n<p>Dave and Dominic met Angela on a field trip. The two educators were visiting leading researchers around the world, eager to find scientific insights that might help young people lead lives that were good for others as well as themselves. These conversations revealed a problem: because research involving kids and educators was so much more time-consuming and expensive than research with adults, the pace of scientific discovery was frustratingly slow. What’s more, insights that had been uncovered by scientists remained hidden from educators and parents, buried in academic articles filled with technical jargon. </p>",
                      "advisory_board": "",
                      "example": null,
                      "domain": "",
                      "domain_redirect_enabled": false,
                      "footer_links": "",
                      "email_support": null,
                      "facebook_app_id": null,
                      "allow_submissions": true,
                      "allow_commenting": false,
                      "assets": {
                        "square_color_no_transparent": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlabmain_l39QL66.png",
                        "style": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlab_YwvMKWW.css"
                      },
                      "share_source": "",
                      "share_publish_type": "Thesis",
                      "permissions": [],
                      "reviews_workflow": "pre-moderation"
                    },
                    "relationships": {
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/",
                            "meta": {}
                          }
                        }
                      },
                      "highlighted_subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/highlighted/",
                            "meta": {
                              "has_highlighted_subjects": false
                            }
                          }
                        }
                      },
                      "licenses_acceptable": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/licenses/",
                            "meta": {}
                          }
                        }
                      },
                      "schemas": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/registrations/characterlab/schemas/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/9g8hx/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "9g8hx",
                          "type": "collections"
                        }
                      },
                      "moderators": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/moderators/",
                            "meta": {}
                          }
                        }
                      },
                      "subscriptions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subscriptions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/characterlab/"
                    }
                  },
                  {
                    "id": "colmod",
                    "type": "collection-providers",
                    "attributes": {
                      "name": "Collections Moderation Project",
                      "description": "A Collection created specifically for use by the Collections Moderation Project. For testing or experimentation or whatever.",
                      "advisory_board": "",
                      "example": null,
                      "domain": "",
                      "domain_redirect_enabled": false,
                      "footer_links": "",
                      "email_support": null,
                      "facebook_app_id": null,
                      "allow_submissions": true,
                      "allow_commenting": false,
                      "assets": {
                        "square_color_no_transparent": "https://storage.googleapis.com/cos-osf-stage-cdn-us/assets/moderation_icon_owfYLnO.png",
                        "favicon": "https://storage.googleapis.com/cos-osf-stage-cdn-us/assets/moderation_icon_lPhz315.png"
                      },
                      "share_source": "",
                      "share_publish_type": "Thesis",
                      "permissions": [],
                      "reviews_workflow": "pre-moderation"
                    },
                    "relationships": {
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/subjects/",
                            "meta": {}
                          }
                        }
                      },
                      "highlighted_subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/subjects/highlighted/",
                            "meta": {
                              "has_highlighted_subjects": false
                            }
                          }
                        }
                      },
                      "licenses_acceptable": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/licenses/",
                            "meta": {}
                          }
                        }
                      },
                      "schemas": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/registrations/colmod/schemas/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/3vpkf/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "3vpkf",
                          "type": "collections"
                        }
                      },
                      "moderators": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/",
                            "meta": {}
                          }
                        }
                      },
                      "subscriptions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/subscriptions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/colmod/"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/providers/collections/{provider_id}/": {
      "get": {
        "summary": "Collections Providers Detail",
        "description": "\nThis returns a single Collections Provider entity.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nReturns a JSON object with a `data` key containing the representation of the requested collection provider object, if the request is successful.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "testlab",
                  "type": "collection-providers",
                  "attributes": {
                    "name": "Test Lab (Stage1)",
                    "description": "<p>Test Description Data</p>",
                    "advisory_board": "",
                    "example": null,
                    "domain": "",
                    "domain_redirect_enabled": false,
                    "footer_links": "",
                    "email_support": null,
                    "facebook_app_id": null,
                    "allow_submissions": true,
                    "allow_commenting": false,
                    "assets": {
                      "square_color_no_transparent": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlabmain_l39QL66.png",
                      "style": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlab_YwvMKWW.css"
                    },
                    "share_source": "",
                    "share_publish_type": "Thesis",
                    "permissions": [],
                    "reviews_workflow": "pre-moderation"
                  },
                  "relationships": {
                    "subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/",
                          "meta": {}
                        }
                      }
                    },
                    "highlighted_subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/highlighted/",
                          "meta": {
                            "has_highlighted_subjects": false
                          }
                        }
                      }
                    },
                    "licenses_acceptable": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/licenses/",
                          "meta": {}
                        }
                      }
                    },
                    "schemas": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/registrations/characterlab/schemas/",
                          "meta": {}
                        }
                      }
                    },
                    "primary_collection": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/collections/9g8hx/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "9g8hx",
                        "type": "collections"
                      }
                    },
                    "moderators": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/moderators/",
                          "meta": {}
                        }
                      }
                    },
                    "subscriptions": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subscriptions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.staging.osf.io/v2/providers/collections/characterlab/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/providers/collections/{provider_id}/licenses/": {
      "get": {
        "summary": "Collections Providers Licenses List",
        "description": "\nThis returns the lists of possible licenses for a Collection.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of license ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5c252c8e0989e100220edb73",
                    "type": "licenses",
                    "attributes": {
                      "name": "CC-By Attribution 4.0 International",
                      "text": "Creative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\nSection 2 – Scope.\n\nLicense grant.\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\nSection 3 – License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\nSection 4 – Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n",
                      "url": "https://creativecommons.org/licenses/by/4.0/legalcode",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb73/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb74",
                    "type": "licenses",
                    "attributes": {
                      "name": "Artistic License 2.0",
                      "text": "\t\t       The Artistic License 2.0\n\n\t    Copyright (c) 2000-2006, The Perl Foundation.\n\n     Everyone is permitted to copy and distribute verbatim copies\n      of this license document, but changing it is not allowed.\n\nPreamble\n\nThis license establishes the terms under which a given free software\nPackage may be copied, modified, distributed, and/or redistributed.\nThe intent is that the Copyright Holder maintains some artistic\ncontrol over the development of that Package while still keeping the\nPackage available as open source and free software.\n\nYou are always permitted to make arrangements wholly outside of this\nlicense directly with the Copyright Holder of a given Package.  If the\nterms of this license do not permit the full use that you propose to\nmake of the Package, you should contact the Copyright Holder and seek\na different licensing arrangement. \n\nDefinitions\n\n    \"Copyright Holder\" means the individual(s) or organization(s)\n    named in the copyright notice for the entire Package.\n\n    \"Contributor\" means any party that has contributed code or other\n    material to the Package, in accordance with the Copyright Holder's\n    procedures.\n\n    \"You\" and \"your\" means any person who would like to copy,\n    distribute, or modify the Package.\n\n    \"Package\" means the collection of files distributed by the\n    Copyright Holder, and derivatives of that collection and/or of\n    those files. A given Package may consist of either the Standard\n    Version, or a Modified Version.\n\n    \"Distribute\" means providing a copy of the Package or making it\n    accessible to anyone else, or in the case of a company or\n    organization, to others outside of your company or organization.\n\n    \"Distributor Fee\" means any fee that you charge for Distributing\n    this Package or providing support for this Package to another\n    party.  It does not mean licensing fees.\n\n    \"Standard Version\" refers to the Package if it has not been\n    modified, or has been modified only in ways explicitly requested\n    by the Copyright Holder.\n\n    \"Modified Version\" means the Package, if it has been changed, and\n    such changes were not explicitly requested by the Copyright\n    Holder. \n\n    \"Original License\" means this Artistic License as Distributed with\n    the Standard Version of the Package, in its current version or as\n    it may be modified by The Perl Foundation in the future.\n\n    \"Source\" form means the source code, documentation source, and\n    configuration files for the Package.\n\n    \"Compiled\" form means the compiled bytecode, object code, binary,\n    or any other form resulting from mechanical transformation or\n    translation of the Source form.\n\n\nPermission for Use and Modification Without Distribution\n\n(1)  You are permitted to use the Standard Version and create and use\nModified Versions for any purpose without restriction, provided that\nyou do not Distribute the Modified Version.\n\n\nPermissions for Redistribution of the Standard Version\n\n(2)  You may Distribute verbatim copies of the Source form of the\nStandard Version of this Package in any medium without restriction,\neither gratis or for a Distributor Fee, provided that you duplicate\nall of the original copyright notices and associated disclaimers.  At\nyour discretion, such verbatim copies may or may not include a\nCompiled form of the Package.\n\n(3)  You may apply any bug fixes, portability changes, and other\nmodifications made available from the Copyright Holder.  The resulting\nPackage will still be considered the Standard Version, and as such\nwill be subject to the Original License.\n\n\nDistribution of Modified Versions of the Package as Source \n\n(4)  You may Distribute your Modified Version as Source (either gratis\nor for a Distributor Fee, and with or without a Compiled form of the\nModified Version) provided that you clearly document how it differs\nfrom the Standard Version, including, but not limited to, documenting\nany non-standard features, executables, or modules, and provided that\nyou do at least ONE of the following:\n\n    (a)  make the Modified Version available to the Copyright Holder\n    of the Standard Version, under the Original License, so that the\n    Copyright Holder may include your modifications in the Standard\n    Version.\n\n    (b)  ensure that installation of your Modified Version does not\n    prevent the user installing or running the Standard Version. In\n    addition, the Modified Version must bear a name that is different\n    from the name of the Standard Version.\n\n    (c)  allow anyone who receives a copy of the Modified Version to\n    make the Source form of the Modified Version available to others\n    under\n\t\t\n\t(i)  the Original License or\n\n\t(ii)  a license that permits the licensee to freely copy,\n\tmodify and redistribute the Modified Version using the same\n\tlicensing terms that apply to the copy that the licensee\n\treceived, and requires that the Source form of the Modified\n\tVersion, and of any works derived from it, be made freely\n\tavailable in that license fees are prohibited but Distributor\n\tFees are allowed.\n\n\nDistribution of Compiled Forms of the Standard Version \nor Modified Versions without the Source\n\n(5)  You may Distribute Compiled forms of the Standard Version without\nthe Source, provided that you include complete instructions on how to\nget the Source of the Standard Version.  Such instructions must be\nvalid at the time of your distribution.  If these instructions, at any\ntime while you are carrying out such distribution, become invalid, you\nmust provide new instructions on demand or cease further distribution.\nIf you provide valid instructions or cease distribution within thirty\ndays after you become aware that the instructions are invalid, then\nyou do not forfeit any of your rights under this license.\n\n(6)  You may Distribute a Modified Version in Compiled form without\nthe Source, provided that you comply with Section 4 with respect to\nthe Source of the Modified Version.\n\n\nAggregating or Linking the Package \n\n(7)  You may aggregate the Package (either the Standard Version or\nModified Version) with other packages and Distribute the resulting\naggregation provided that you do not charge a licensing fee for the\nPackage.  Distributor Fees are permitted, and licensing fees for other\ncomponents in the aggregation are permitted. The terms of this license\napply to the use and Distribution of the Standard or Modified Versions\nas included in the aggregation.\n\n(8) You are permitted to link Modified and Standard Versions with\nother works, to embed the Package in a larger work of your own, or to\nbuild stand-alone binary or bytecode versions of applications that\ninclude the Package, and Distribute the result without restriction,\nprovided the result does not expose a direct interface to the Package.\n\n\nItems That are Not Considered Part of a Modified Version \n\n(9) Works (including, but not limited to, modules and scripts) that\nmerely extend or make use of the Package, do not, by themselves, cause\nthe Package to be a Modified Version.  In addition, such works are not\nconsidered parts of the Package itself, and are not subject to the\nterms of this license.\n\n\nGeneral Provisions\n\n(10)  Any use, modification, and distribution of the Standard or\nModified Versions is governed by this Artistic License. By using,\nmodifying or distributing the Package, you accept this license. Do not\nuse, modify, or distribute the Package, if you do not accept this\nlicense.\n\n(11)  If your Modified Version has been derived from a Modified\nVersion made by someone other than you, you are nevertheless required\nto ensure that your Modified Version complies with the requirements of\nthis license.\n\n(12)  This license does not grant you the right to use any trademark,\nservice mark, tradename, or logo of the Copyright Holder.\n\n(13)  This license includes the non-exclusive, worldwide,\nfree-of-charge patent license to make, have made, use, offer to sell,\nsell, import and otherwise transfer the Package with respect to any\npatent claims licensable by the Copyright Holder that are necessarily\ninfringed by the Package. If you institute patent litigation\n(including a cross-claim or counterclaim) against any party alleging\nthat the Package constitutes direct or contributory patent\ninfringement, then this Artistic License to you shall terminate on the\ndate that such litigation is filed.\n\n(14)  Disclaimer of Warranty:\nTHE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS \"AS\nIS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR\nNON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL\nLAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
                      "url": "http://www.perlfoundation.org/attachment/legal/artistic-2_0.txt",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb74/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb75",
                    "type": "licenses",
                    "attributes": {
                      "name": "CC0 1.0 Universal",
                      "text": "Statement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an \"owner\") of an original work of authorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (\"Commons\") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (\"Copyright and Related Rights\"). Copyright and Related Rights include, but are not limited to, the following:\n\nthe right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work;\nmoral rights retained by the original author(s) and/or performer(s);\npublicity and privacy rights pertaining to a person's image or likeness depicted in a Work;\nrights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below;\nrights protecting the extraction, dissemination, use and reuse of data in a Work;\ndatabase rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and\nother similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof.\n2. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"License\"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\nNo trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.\nAffirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law.\nAffirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work.\nAffirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.\n",
                      "url": "https://creativecommons.org/publicdomain/zero/1.0/legalcode",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb75/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb7b",
                    "type": "licenses",
                    "attributes": {
                      "name": "Eclipse Public License 1.0",
                      "text": "Eclipse Public License - v 1.0\n\nTHE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n\n1. DEFINITIONS\n\n\"Contribution\" means:\n\na) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and\nb) in the case of each subsequent Contributor:\ni) changes to the Program, and\nii) additions to the Program;\nwhere such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.\n\"Contributor\" means any person or entity that distributes the Program.\n\n\"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.\n\n\"Program\" means the Contributions distributed in accordance with this Agreement.\n\n\"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors.\n\n2. GRANT OF RIGHTS\n\na) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.\nb) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.\nc) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.\nd) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.\n3. REQUIREMENTS\n\nA Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:\n\na) it complies with the terms and conditions of this Agreement; and\nb) its license agreement:\ni) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;\nii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;\niii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and\niv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.\nWhen the Program is made available in source code form:\n\na) it must be made available under this Agreement; and\nb) a copy of this Agreement must be included with each copy of the Program.\nContributors may not remove or alter any copyright notices contained within the Program.\n\nEach Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.\n\n4. COMMERCIAL DISTRIBUTION\n\nCommercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.\n\nFor example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.\n\n5. NO WARRANTY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.\n\n6. DISCLAIMER OF LIABILITY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n7. GENERAL\n\nIf any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.\n\nIf Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.\n\nAll Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.\n\nEveryone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.\n\nThis Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.\n",
                      "url": "http://www.eclipse.org/legal/epl-v10.html",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb7b/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb7c",
                    "type": "licenses",
                    "attributes": {
                      "name": "Mozilla Public License 2.0",
                      "text": "Mozilla Public License\nVersion 2.0\n\n1. Definitions\n\n1.1. “Contributor”\nmeans each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n\n1.2. “Contributor Version”\nmeans the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n\n1.3. “Contribution”\nmeans Covered Software of a particular Contributor.\n\n1.4. “Covered Software”\nmeans Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n\n1.5. “Incompatible With Secondary Licenses”\nmeans\n\nthat the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or\n\nthat the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License.\n\n1.6. “Executable Form”\nmeans any form of the work other than Source Code Form.\n\n1.7. “Larger Work”\nmeans a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n\n1.8. “License”\nmeans this document.\n\n1.9. “Licensable”\nmeans having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n\n1.10. “Modifications”\nmeans any of the following:\n\nany file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or\n\nany new file in Source Code Form that contains any Covered Software.\n\n1.11. “Patent Claims” of a Contributor\nmeans any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n\n1.12. “Secondary License”\nmeans either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n\n1.13. “Source Code Form”\nmeans the form of the work preferred for making modifications.\n\n1.14. “You” (or “Your”)\nmeans an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n\n2. License Grants and Conditions\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\n\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\n\nfor any code that a Contributor has removed from Covered Software; or\n\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\n\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.\n\n3. Responsibilities\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\n\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n\nIf it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.\n\n5. Termination\n\n5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n\n6. Disclaimer of Warranty\n\nCovered Software is provided under this License on an “as is” basis, without warranty of any kind, either expressed, implied, or statutory, including, without limitation, warranties that the Covered Software is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the Covered Software is with You. Should any Covered Software prove defective in any respect, You (not any Contributor) assume the cost of any necessary servicing, repair, or correction. This disclaimer of warranty constitutes an essential part of this License. No use of any Covered Software is authorized under this License except under this disclaimer.\n\n7. Limitation of Liability\n\nUnder no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall any Contributor, or anyone who distributes Covered Software as permitted above, be liable to You for any direct, indirect, special, incidental, or consequential damages of any character including, without limitation, damages for lost profits, loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party’s negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to You.\n\n8. Litigation\n\nAny litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims.\n\n9. Miscellaneous\n\nThis License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - “Incompatible With Secondary Licenses” Notice\n\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.\n",
                      "url": "https://www.mozilla.org/MPL/2.0/",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb7c/"
                    }
                  }
                ],
                "meta": {
                  "total": 5,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/temp/licenses/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/providers/collections/{provider_id}/taxonomies/": {
      "get": {
        "operationId": "collection_provider_taxonomies_list",
        "summary": "List Taxonomies for a Collection Provider (Deprecated)",
        "description": "Retrieve the full taxonomy for a specific Collection Provider.\n\n**Deprecated:** Use `subjects` endpoints instead.\n",
        "deprecated": true,
        "produces": [
          "application/vnd.api+json"
        ],
        "tags": [
          "Collection Providers"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string",
            "description": "The unique ID of the collection provider."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of taxonomies.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Taxonomy",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the taxonomy entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the taxonomy entity.",
                        "properties": {
                          "text": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The text name of the taxonomy"
                          },
                          "child_count": {
                            "type": "integer",
                            "readOnly": true,
                            "description": "The number of children this taxonomy contains."
                          },
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the taxonomy entity.",
                        "properties": {
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the taxonomy."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/vnd.api+json": {
                "data": [
                  {
                    "id": "abc-subject",
                    "type": "taxonomies",
                    "attributes": {
                      "text": "Psychology",
                      "parents": []
                    }
                  },
                  {
                    "id": "def-subject",
                    "type": "taxonomies",
                    "attributes": {
                      "text": "Cognitive Psychology",
                      "parents": [
                        "abc-subject"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view taxonomies for this provider."
          },
          "404": {
            "description": "Collection provider not found."
          }
        }
      }
    },
    "/providers/collections/{provider_id}/taxonomies/highlighted/": {
      "get": {
        "operationId": "collection_provider_taxonomies_highlighted_list",
        "summary": "List Highlighted Taxonomies for a Collection Provider (Deprecated)",
        "description": "Retrieve the list of highlighted taxonomies for a Collection Provider.\n\n**Deprecated:** Use the `highlighted subjects` endpoint instead.\n",
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "required": true,
            "type": "string",
            "description": "The unique ID of the collection provider."
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "responses": {
          "200": {
            "description": "A list of highlighted taxonomies.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "title": "Taxonomy",
                    "properties": {
                      "id": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The identifier of the taxonomy entity."
                      },
                      "type": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The type identifier of the taxonomy entity (`taxonomies`)."
                      },
                      "attributes": {
                        "type": "object",
                        "title": "Attributes",
                        "readOnly": true,
                        "description": "The properties of the taxonomy entity.",
                        "properties": {
                          "text": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The text name of the taxonomy"
                          },
                          "child_count": {
                            "type": "integer",
                            "readOnly": true,
                            "description": "The number of children this taxonomy contains."
                          },
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of JSON objects containing keys for `text` (name) and `id` (unique identifier) of this taxonomy's parents"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "title": "Links",
                        "readOnly": true,
                        "description": "URLs to alternative representations of the taxonomy entity.",
                        "properties": {
                          "parents": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "readOnly": true,
                            "description": "An array of links to to this taxonomy's parents. This field is deprecated as of verson 2.4."
                          },
                          "self": {
                            "type": "string",
                            "format": "URL",
                            "readOnly": true,
                            "description": "A link to the detail page for the taxonomy."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "xyz-highlighted",
                    "type": "taxonomies",
                    "attributes": {
                      "text": "Open Science",
                      "parents": []
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view taxonomies for this provider."
          },
          "404": {
            "description": "Collection provider not found."
          }
        }
      }
    },
    "/providers/collections/{provider_id}/submissions/": {
      "get": {
        "summary": "Collections Providers Submissions List",
        "description": "\nThis returns a list of all submissions to a Collections Provider entity.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of node and preprint ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "uwnqs",
                    "type": "collected-metadata",
                    "attributes": {
                      "reviews_state": "accepted",
                      "date_created": "2022-01-03T20:12:25.315870Z",
                      "date_modified": "2022-01-03T20:12:25.329533Z",
                      "collected_type": "automation",
                      "status": "",
                      "volume": "",
                      "issue": "",
                      "program_area": "",
                      "school_type": "",
                      "study_design": ""
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/rmq6z/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rmq6z",
                          "type": "users"
                        }
                      },
                      "collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rju4d",
                          "type": "collections"
                        }
                      },
                      "guid": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/guids/uwnqs/",
                            "meta": {}
                          }
                        }
                      },
                      "collection_submission_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collection_submissions/uwnqs-rju4d/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/uwnqs/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/uwnqs/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "guid": {
                        "data": {
                          "id": "uwnqs",
                          "type": "nodes",
                          "attributes": {
                            "title": "OSF Test Project",
                            "description": "QA Selenium Testing",
                            "category": "project",
                            "custom_citation": null,
                            "date_created": "2022-01-03T20:12:02.942101Z",
                            "date_modified": "2022-01-03T20:12:29.977480Z",
                            "registration": false,
                            "preprint": false,
                            "fork": false,
                            "collection": false,
                            "tags": [
                              "qatest",
                              "selenium",
                              "tests/test_collections.py::TestCollectionSubmission::()::test_add_to_collection (setup)"
                            ],
                            "node_license": {
                              "copyright_holders": [],
                              "year": null
                            },
                            "analytics_key": "",
                            "current_user_can_comment": false,
                            "current_user_permissions": [],
                            "current_user_is_contributor": false,
                            "current_user_is_contributor_or_group_member": false,
                            "wiki_enabled": true,
                            "public": false
                          },
                          "relationships": {
                            "license": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb75/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "5c252c8e0989e100220edb75",
                                "type": "licenses"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/children/",
                                  "meta": {}
                                }
                              }
                            },
                            "comments": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/comments/?filter%5Btarget%5D=uwnqs",
                                  "meta": {}
                                }
                              }
                            },
                            "contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "bibliographic_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/bibliographic_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "implicit_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/implicit_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "files": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/files/",
                                  "meta": {}
                                }
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/settings/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "node-setting"
                              }
                            },
                            "wikis": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/wikis/",
                                  "meta": {}
                                }
                              }
                            },
                            "forked_from": {
                              "data": null
                            },
                            "template_node": {
                              "data": null
                            },
                            "forks": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/forks/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_by_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_by_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "parent": {
                              "data": null
                            },
                            "identifiers": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/identifiers/",
                                  "meta": {}
                                }
                              }
                            },
                            "affiliated_institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "draft_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/draft_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "region": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/regions/us/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "root": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "nodes"
                              }
                            },
                            "logs": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/logs/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_nodes/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/linked_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_registrations/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/linked_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "view_only_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/view_only_links/",
                                  "meta": {}
                                }
                              }
                            },
                            "citation": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/citation/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "citation"
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/preprints/",
                                  "meta": {}
                                }
                              }
                            },
                            "storage": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/storage/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "node-storage"
                              }
                            },
                            "subjects": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/subjects/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/subjects/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/uwnqs/",
                            "self": "https://api.staging.osf.io/v2/nodes/uwnqs/"
                          }
                        }
                      }
                    },
                    "links": {}
                  },
                  {
                    "id": "a3prf",
                    "type": "collected-metadata",
                    "attributes": {
                      "reviews_state": "accepted",
                      "date_created": "2022-01-03T20:20:13.539361Z",
                      "date_modified": "2022-01-03T20:20:13.547825Z",
                      "collected_type": "automation",
                      "status": "",
                      "volume": "",
                      "issue": "",
                      "program_area": "",
                      "school_type": "",
                      "study_design": ""
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/rmq6z/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rmq6z",
                          "type": "users"
                        }
                      },
                      "collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rju4d",
                          "type": "collections"
                        }
                      },
                      "guid": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/guids/a3prf/",
                            "meta": {}
                          }
                        }
                      },
                      "collection_submission_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collection_submissions/a3prf-rju4d/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/a3prf/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/a3prf/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "guid": {
                        "data": {
                          "id": "a3prf",
                          "type": "nodes",
                          "attributes": {
                            "title": "OSF Test Project",
                            "description": "QA Selenium Testing",
                            "category": "project",
                            "custom_citation": null,
                            "date_created": "2022-01-03T20:18:24.925774Z",
                            "date_modified": "2022-01-03T20:20:26.832995Z",
                            "registration": false,
                            "preprint": false,
                            "fork": false,
                            "collection": false,
                            "tags": [
                              "qatest",
                              "selenium",
                              "tests/test_collections.py::TestCollectionSubmission::()::test_add_to_collection (setup)"
                            ],
                            "node_license": {
                              "copyright_holders": [],
                              "year": null
                            },
                            "analytics_key": "",
                            "current_user_can_comment": false,
                            "current_user_permissions": [],
                            "current_user_is_contributor": false,
                            "current_user_is_contributor_or_group_member": false,
                            "wiki_enabled": true,
                            "public": false
                          },
                          "relationships": {
                            "license": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb75/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "5c252c8e0989e100220edb75",
                                "type": "licenses"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/children/",
                                  "meta": {}
                                }
                              }
                            },
                            "comments": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/comments/?filter%5Btarget%5D=a3prf",
                                  "meta": {}
                                }
                              }
                            },
                            "contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "bibliographic_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/bibliographic_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "implicit_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/implicit_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "files": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/files/",
                                  "meta": {}
                                }
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/settings/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "node-setting"
                              }
                            },
                            "wikis": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/wikis/",
                                  "meta": {}
                                }
                              }
                            },
                            "forked_from": {
                              "data": null
                            },
                            "template_node": {
                              "data": null
                            },
                            "forks": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/forks/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_by_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_by_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "parent": {
                              "data": null
                            },
                            "identifiers": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/identifiers/",
                                  "meta": {}
                                }
                              }
                            },
                            "affiliated_institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "draft_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/draft_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "region": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/regions/us/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "root": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "nodes"
                              }
                            },
                            "logs": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/logs/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_nodes/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/linked_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_registrations/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/linked_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "view_only_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/view_only_links/",
                                  "meta": {}
                                }
                              }
                            },
                            "citation": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/citation/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "citation"
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/preprints/",
                                  "meta": {}
                                }
                              }
                            },
                            "storage": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/storage/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "node-storage"
                              }
                            },
                            "subjects": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/subjects/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/subjects/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/a3prf/",
                            "self": "https://api.staging.osf.io/v2/nodes/a3prf/"
                          }
                        }
                      }
                    },
                    "links": {}
                  }
                ],
                "meta": {
                  "total": 53,
                  "per_page": 2,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/temp/submissions/?page%5Bsize%5D=2",
                  "first": null,
                  "last": "https://api.staging.osf.io/v2/providers/collections/temp/submissions/?page=27&page%5Bsize%5D=2",
                  "prev": null,
                  "next": "https://api.staging.osf.io/v2/providers/collections/temp/submissions/?page=2&page%5Bsize%5D=2"
                }
              }
            }
          }
        }
      }
    },
    "/providers/collections/{provider_id}/subjects/highlighted/": {
      "get": {
        "summary": "Collections Providers Highlighted Subject List",
        "description": "\nThis returns a list of highlighted subjects for a Collections Provider.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of subject ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5c252d520989e100220edc4f",
                    "type": "subjects",
                    "attributes": {
                      "text": "Architecture",
                      "taxonomy_name": "bepress"
                    },
                    "relationships": {
                      "parent": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c252d520989e100220edc4f/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "errors": [
                          {
                            "detail": "Not found."
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/subjects/5c252d520989e100220edc4f/"
                    }
                  },
                  {
                    "id": "5c252d510989e100220edba7",
                    "type": "subjects",
                    "attributes": {
                      "text": "Arts and Humanities",
                      "taxonomy_name": "bepress"
                    },
                    "relationships": {
                      "parent": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edba7/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "errors": [
                          {
                            "detail": "Not found."
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edba7/"
                    }
                  }
                ],
                "meta": {
                  "total": 10,
                  "per_page": 2,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/highlighted/?page%5Bsize%5D=2",
                  "first": null,
                  "last": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/highlighted/?page=5&page%5Bsize%5D=2",
                  "prev": null,
                  "next": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/highlighted/?page=2&page%5Bsize%5D=2"
                }
              }
            }
          }
        }
      }
    },
    "/providers/collections/{provider_id}/moderators/": {
      "get": {
        "summary": "Collections Providers Moderators List",
        "description": "\nThis returns a list of moderators for a Collections Provider.\n#### Permissions\nThis information is only available to Collection Provider moderators or admins.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of moderator ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "nmwt5",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "Blaine Butler",
                      "permission_group": "admin"
                    },
                    "relationships": {
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/nmwt5/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "nmwt5",
                          "type": "users"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "colmod",
                          "type": "collection-providers"
                        }
                      }
                    },
                    "embeds": {
                      "user": {
                        "data": {
                          "id": "nmwt5",
                          "type": "users",
                          "attributes": {
                            "full_name": "Blaine Butler",
                            "given_name": "Blaine",
                            "middle_names": "",
                            "family_name": "Butler",
                            "suffix": "",
                            "date_registered": "2022-11-03T19:23:28.110924Z",
                            "active": false,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/nmwt5/",
                            "profile_image": "https://secure.gravatar.com/avatar/4a1f62c6580a151e5c1c0aec72b7fc2a?d=identicon",
                            "self": "https://api.staging.osf.io/v2/users/nmwt5/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/nmwt5/"
                    }
                  },
                  {
                    "id": "m8ku3",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "DC Test - AMC",
                      "permission_group": "admin"
                    },
                    "relationships": {
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/m8ku3/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "m8ku3",
                          "type": "users"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "colmod",
                          "type": "collection-providers"
                        }
                      }
                    },
                    "embeds": {
                      "user": {
                        "data": {
                          "id": "m8ku3",
                          "type": "users",
                          "attributes": {
                            "full_name": "DC Test - AMC",
                            "given_name": "DC",
                            "middle_names": "Test -",
                            "family_name": "AMC",
                            "suffix": "",
                            "date_registered": "2022-09-14T11:28:08.681787Z",
                            "active": true,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/m8ku3/",
                            "profile_image": "https://secure.gravatar.com/avatar/ce38ca4e4a1361446468960716f57b5e?d=identicon",
                            "self": "https://api.staging.osf.io/v2/users/m8ku3/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/m8ku3/"
                    }
                  }
                ],
                "meta": {
                  "total": 8,
                  "per_page": 2,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/?page%5Bsize%5D=2",
                  "first": null,
                  "last": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/?page=4&page%5Bsize%5D=2",
                  "prev": null,
                  "next": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/?page=2&page%5Bsize%5D=2"
                }
              }
            }
          }
        }
      }
    },
    "/providers/collections/{provider_id}/moderators/{moderator_id}/": {
      "get": {
        "summary": "Collections Providers Moderators Detail",
        "description": "\nThis returns details for a moderator of a Collections Provider.\n#### Permissions\nThis information is only available to Collection Provider moderators or admins.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nReturns a JSON object with a `data` key containing the representation of the requested collection provider moderator object, if the request is successful.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "moderator_id",
            "description": "A short id for that moderator"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "m8ku3",
                  "type": "moderators",
                  "attributes": {
                    "full_name": "DC Test - AMC",
                    "permission_group": "admin"
                  },
                  "relationships": {
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/users/m8ku3/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "m8ku3",
                        "type": "users"
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/colmod/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "colmod",
                        "type": "collection-providers"
                      }
                    }
                  },
                  "embeds": {
                    "user": {
                      "data": {
                        "id": "m8ku3",
                        "type": "users",
                        "attributes": {
                          "full_name": "DC Test - AMC",
                          "given_name": "DC",
                          "middle_names": "Test -",
                          "family_name": "AMC",
                          "suffix": "",
                          "date_registered": "2022-09-14T11:28:08.681787Z",
                          "active": true,
                          "timezone": "Etc/UTC",
                          "locale": "en_US",
                          "social": {},
                          "employment": [],
                          "education": []
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/preprints/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://staging.osf.io/m8ku3/",
                          "profile_image": "https://secure.gravatar.com/avatar/ce38ca4e4a1361446468960716f57b5e?d=identicon",
                          "self": "https://api.staging.osf.io/v2/users/m8ku3/"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/m8ku3/"
                  }
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      }
    },
    "/collection_submissions/{collection_submission_id}/actions/": {
      "get": {
        "summary": "Get a list of Collection Submission Actions for a Collection Submission",
        "description": "\nThis returns a list of the actions that have changed the Collection Submission moderation state.\n#### Permissions\nThis information is only available to an admin or moderator of a Collection when it is private, however if the Collection is public the data is available to all.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of nodes ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_submission_id",
            "description": "A short id for that collection submission"
          }
        ],
        "tags": [
          "Collection Submissions"
        ],
        "operationId": "collection_submission_list",
        "x-response-schema": "Collection Submissions",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "63bc18c66f4506000abae96f",
                    "type": "collection-submission-actions",
                    "attributes": {
                      "trigger": "remove",
                      "from_state": "accepted",
                      "to_state": "removed",
                      "comment": "test remove!",
                      "date_created": "2023-01-09T13:38:14.598839Z",
                      "date_modified": "2023-01-09T13:38:14.598867Z"
                    },
                    "relationships": {
                      "collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/3vpkf/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "3vpkf",
                          "type": "collections"
                        }
                      },
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/zpw9n/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "zpw9n",
                          "type": "users"
                        }
                      },
                      "target": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/3vpkf/collection_submissions/xhwz7/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "xhwz7-3vpkf",
                          "type": "collection-submission"
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/actions/63bc18c66f4506000abae96f/"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/collection_submission_actions/{collection_submission_id}/": {
      "get": {
        "summary": "Retrieve a Collection Submission Action",
        "description": "\n#### Permissions\nThis information is only available to an admin on the Collection Submission in question.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nReturns a JSON object with a `data` key containing the representation of the requested collection submission action object, if the request is successful. ",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "collection_submission_id",
            "description": "A short id for that collection submission"
          }
        ],
        "tags": [
          "Collection Submission Actions"
        ],
        "operationId": "collection_submission_actions",
        "x-response-schema": "Collection Submission Action",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "63bc18c66f4506000abae96f",
                  "type": "collection-submission-actions",
                  "attributes": {
                    "trigger": "remove",
                    "from_state": "accepted",
                    "to_state": "removed",
                    "comment": "test remove!",
                    "date_created": "2023-01-09T13:38:14.598839Z",
                    "date_modified": "2023-01-09T13:38:14.598867Z"
                  },
                  "relationships": {
                    "collection": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/collections/3vpkf/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "3vpkf",
                        "type": "collections"
                      }
                    },
                    "creator": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/users/zpw9n/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "zpw9n",
                        "type": "users"
                      }
                    },
                    "target": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/collections/3vpkf/collection_submissions/xhwz7/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "xhwz7-3vpkf",
                        "type": "collection-submission"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.staging.osf.io/v2/actions/63bc18c66f4506000abae96f/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/collection_submission_actions/": {
      "post": {
        "summary": "Creates a Collection Submission Action",
        "description": "\nThis adds a Collection Submission Action to the Collection, causing the Collection state machine to perform a transition.\n#### Permissions\nThis action is only available to an admin on the Collection Submission, or a moderator for the Collection Provider in question.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nReturns a JSON object with a `data` key containing the representation of the requested collection submission action object, if the request is successful.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "collection-submission-actions",
                  "attributes": {
                    "comment": "some comment",
                    "trigger": "remove"
                  },
                  "relationships": {
                    "target": {
                      "data": {
                        "id": "{node_id}-{collection_id}",
                        "type": "collection-submission"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Collection Submission Actions"
        ],
        "operationId": "collection_submission_actions",
        "x-response-schema": "Collection Submission Action",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "63bc18c66f4506000abae96f",
                  "type": "collection-submission-actions",
                  "attributes": {
                    "trigger": "remove",
                    "from_state": "accepted",
                    "to_state": "removed",
                    "comment": "test remove!",
                    "date_created": "2023-01-09T13:38:14.598839Z",
                    "date_modified": "2023-01-09T13:38:14.598867Z"
                  },
                  "relationships": {
                    "collection": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/collections/3vpkf/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "3vpkf",
                        "type": "collections"
                      }
                    },
                    "creator": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/users/zpw9n/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "zpw9n",
                        "type": "users"
                      }
                    },
                    "target": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/collections/3vpkf/collection_submissions/xhwz7/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "xhwz7-3vpkf",
                        "type": "collection-submission"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.staging.osf.io/v2/actions/63bc18c66f4506000abae96f/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provider/collections/": {
      "get": {
        "summary": "List Collections Providers",
        "description": "\nThis returns a list of the Collections Providers.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of collection provider ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_list",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "testlab",
                    "type": "collection-providers",
                    "attributes": {
                      "name": "Test Lab (Stage1)",
                      "description": "<p><span>&lt;p style=\"background-color:;color:</span><span>070539</span><span>;\"&gt;</span><span><span>Character Lab was founded in 2013 by a scientist and two educators: Angela Duckworth, author of </span></span><em>Grit: The Power of Passion and Perseverance</em><span><span> and Rosa Lee and Egbert Chang Professor at the University of Pennsylvania; Dave Levin, co-founder of KIPP public charter schools; and Dominic Randolph, Head of School at Riverdale Country School. </span><span>&lt;/p&gt;</span></span></p>\n<span> </span>\n<p>Dave and Dominic met Angela on a field trip. The two educators were visiting leading researchers around the world, eager to find scientific insights that might help young people lead lives that were good for others as well as themselves. These conversations revealed a problem: because research involving kids and educators was so much more time-consuming and expensive than research with adults, the pace of scientific discovery was frustratingly slow. What’s more, insights that had been uncovered by scientists remained hidden from educators and parents, buried in academic articles filled with technical jargon. </p>",
                      "advisory_board": "",
                      "example": null,
                      "domain": "",
                      "domain_redirect_enabled": false,
                      "footer_links": "",
                      "email_support": null,
                      "facebook_app_id": null,
                      "allow_submissions": true,
                      "allow_commenting": false,
                      "assets": {
                        "square_color_no_transparent": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlabmain_l39QL66.png",
                        "style": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlab_YwvMKWW.css"
                      },
                      "share_source": "",
                      "share_publish_type": "Thesis",
                      "permissions": [],
                      "reviews_workflow": "pre-moderation"
                    },
                    "relationships": {
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/",
                            "meta": {}
                          }
                        }
                      },
                      "highlighted_subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/highlighted/",
                            "meta": {
                              "has_highlighted_subjects": false
                            }
                          }
                        }
                      },
                      "licenses_acceptable": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/licenses/",
                            "meta": {}
                          }
                        }
                      },
                      "schemas": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/registrations/characterlab/schemas/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/9g8hx/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "9g8hx",
                          "type": "collections"
                        }
                      },
                      "moderators": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/moderators/",
                            "meta": {}
                          }
                        }
                      },
                      "subscriptions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subscriptions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/characterlab/"
                    }
                  },
                  {
                    "id": "colmod",
                    "type": "collection-providers",
                    "attributes": {
                      "name": "Collections Moderation Project",
                      "description": "A Collection created specifically for use by the Collections Moderation Project. For testing or experimentation or whatever.",
                      "advisory_board": "",
                      "example": null,
                      "domain": "",
                      "domain_redirect_enabled": false,
                      "footer_links": "",
                      "email_support": null,
                      "facebook_app_id": null,
                      "allow_submissions": true,
                      "allow_commenting": false,
                      "assets": {
                        "square_color_no_transparent": "https://storage.googleapis.com/cos-osf-stage-cdn-us/assets/moderation_icon_owfYLnO.png",
                        "favicon": "https://storage.googleapis.com/cos-osf-stage-cdn-us/assets/moderation_icon_lPhz315.png"
                      },
                      "share_source": "",
                      "share_publish_type": "Thesis",
                      "permissions": [],
                      "reviews_workflow": "pre-moderation"
                    },
                    "relationships": {
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/subjects/",
                            "meta": {}
                          }
                        }
                      },
                      "highlighted_subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/subjects/highlighted/",
                            "meta": {
                              "has_highlighted_subjects": false
                            }
                          }
                        }
                      },
                      "licenses_acceptable": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/licenses/",
                            "meta": {}
                          }
                        }
                      },
                      "schemas": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/registrations/colmod/schemas/",
                            "meta": {}
                          }
                        }
                      },
                      "primary_collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/3vpkf/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "3vpkf",
                          "type": "collections"
                        }
                      },
                      "moderators": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/",
                            "meta": {}
                          }
                        }
                      },
                      "subscriptions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/subscriptions/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/colmod/"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/provider/collections/{provider_id}/": {
      "get": {
        "summary": "Collections Providers Detail",
        "description": "\nThis returns a single Collections Provider entity.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nReturns a JSON object with a `data` key containing the representation of the requested collection provider object, if the request is successful.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "testlab",
                  "type": "collection-providers",
                  "attributes": {
                    "name": "Test Lab (Stage1)",
                    "description": "<p>Test Description Data</p>",
                    "advisory_board": "",
                    "example": null,
                    "domain": "",
                    "domain_redirect_enabled": false,
                    "footer_links": "",
                    "email_support": null,
                    "facebook_app_id": null,
                    "allow_submissions": true,
                    "allow_commenting": false,
                    "assets": {
                      "square_color_no_transparent": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlabmain_l39QL66.png",
                      "style": "https://test.storage.googleapis.com/cos-osf-stage-cdn-us/assets/characterlab_YwvMKWW.css"
                    },
                    "share_source": "",
                    "share_publish_type": "Thesis",
                    "permissions": [],
                    "reviews_workflow": "pre-moderation"
                  },
                  "relationships": {
                    "subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/",
                          "meta": {}
                        }
                      }
                    },
                    "highlighted_subjects": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subjects/highlighted/",
                          "meta": {
                            "has_highlighted_subjects": false
                          }
                        }
                      }
                    },
                    "licenses_acceptable": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/licenses/",
                          "meta": {}
                        }
                      }
                    },
                    "schemas": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/registrations/characterlab/schemas/",
                          "meta": {}
                        }
                      }
                    },
                    "primary_collection": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/collections/9g8hx/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "9g8hx",
                        "type": "collections"
                      }
                    },
                    "moderators": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/moderators/",
                          "meta": {}
                        }
                      }
                    },
                    "subscriptions": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/characterlab/subscriptions/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.staging.osf.io/v2/providers/collections/characterlab/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provider/collections/{provider_id}/licenses/": {
      "get": {
        "summary": "Collections Providers Licenses List",
        "description": "\nThis returns the lists of possible licenses for a Collection.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of license ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5c252c8e0989e100220edb73",
                    "type": "licenses",
                    "attributes": {
                      "name": "CC-By Attribution 4.0 International",
                      "text": "Creative Commons Attribution 4.0 International Public License\n\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\n\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\nSection 2 – Scope.\n\nLicense grant.\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material.\nDownstream recipients.\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\nSection 3 – License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter's License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\nSection 4 – Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUnless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You.\nTo the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n",
                      "url": "https://creativecommons.org/licenses/by/4.0/legalcode",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb73/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb74",
                    "type": "licenses",
                    "attributes": {
                      "name": "Artistic License 2.0",
                      "text": "\t\t       The Artistic License 2.0\n\n\t    Copyright (c) 2000-2006, The Perl Foundation.\n\n     Everyone is permitted to copy and distribute verbatim copies\n      of this license document, but changing it is not allowed.\n\nPreamble\n\nThis license establishes the terms under which a given free software\nPackage may be copied, modified, distributed, and/or redistributed.\nThe intent is that the Copyright Holder maintains some artistic\ncontrol over the development of that Package while still keeping the\nPackage available as open source and free software.\n\nYou are always permitted to make arrangements wholly outside of this\nlicense directly with the Copyright Holder of a given Package.  If the\nterms of this license do not permit the full use that you propose to\nmake of the Package, you should contact the Copyright Holder and seek\na different licensing arrangement. \n\nDefinitions\n\n    \"Copyright Holder\" means the individual(s) or organization(s)\n    named in the copyright notice for the entire Package.\n\n    \"Contributor\" means any party that has contributed code or other\n    material to the Package, in accordance with the Copyright Holder's\n    procedures.\n\n    \"You\" and \"your\" means any person who would like to copy,\n    distribute, or modify the Package.\n\n    \"Package\" means the collection of files distributed by the\n    Copyright Holder, and derivatives of that collection and/or of\n    those files. A given Package may consist of either the Standard\n    Version, or a Modified Version.\n\n    \"Distribute\" means providing a copy of the Package or making it\n    accessible to anyone else, or in the case of a company or\n    organization, to others outside of your company or organization.\n\n    \"Distributor Fee\" means any fee that you charge for Distributing\n    this Package or providing support for this Package to another\n    party.  It does not mean licensing fees.\n\n    \"Standard Version\" refers to the Package if it has not been\n    modified, or has been modified only in ways explicitly requested\n    by the Copyright Holder.\n\n    \"Modified Version\" means the Package, if it has been changed, and\n    such changes were not explicitly requested by the Copyright\n    Holder. \n\n    \"Original License\" means this Artistic License as Distributed with\n    the Standard Version of the Package, in its current version or as\n    it may be modified by The Perl Foundation in the future.\n\n    \"Source\" form means the source code, documentation source, and\n    configuration files for the Package.\n\n    \"Compiled\" form means the compiled bytecode, object code, binary,\n    or any other form resulting from mechanical transformation or\n    translation of the Source form.\n\n\nPermission for Use and Modification Without Distribution\n\n(1)  You are permitted to use the Standard Version and create and use\nModified Versions for any purpose without restriction, provided that\nyou do not Distribute the Modified Version.\n\n\nPermissions for Redistribution of the Standard Version\n\n(2)  You may Distribute verbatim copies of the Source form of the\nStandard Version of this Package in any medium without restriction,\neither gratis or for a Distributor Fee, provided that you duplicate\nall of the original copyright notices and associated disclaimers.  At\nyour discretion, such verbatim copies may or may not include a\nCompiled form of the Package.\n\n(3)  You may apply any bug fixes, portability changes, and other\nmodifications made available from the Copyright Holder.  The resulting\nPackage will still be considered the Standard Version, and as such\nwill be subject to the Original License.\n\n\nDistribution of Modified Versions of the Package as Source \n\n(4)  You may Distribute your Modified Version as Source (either gratis\nor for a Distributor Fee, and with or without a Compiled form of the\nModified Version) provided that you clearly document how it differs\nfrom the Standard Version, including, but not limited to, documenting\nany non-standard features, executables, or modules, and provided that\nyou do at least ONE of the following:\n\n    (a)  make the Modified Version available to the Copyright Holder\n    of the Standard Version, under the Original License, so that the\n    Copyright Holder may include your modifications in the Standard\n    Version.\n\n    (b)  ensure that installation of your Modified Version does not\n    prevent the user installing or running the Standard Version. In\n    addition, the Modified Version must bear a name that is different\n    from the name of the Standard Version.\n\n    (c)  allow anyone who receives a copy of the Modified Version to\n    make the Source form of the Modified Version available to others\n    under\n\t\t\n\t(i)  the Original License or\n\n\t(ii)  a license that permits the licensee to freely copy,\n\tmodify and redistribute the Modified Version using the same\n\tlicensing terms that apply to the copy that the licensee\n\treceived, and requires that the Source form of the Modified\n\tVersion, and of any works derived from it, be made freely\n\tavailable in that license fees are prohibited but Distributor\n\tFees are allowed.\n\n\nDistribution of Compiled Forms of the Standard Version \nor Modified Versions without the Source\n\n(5)  You may Distribute Compiled forms of the Standard Version without\nthe Source, provided that you include complete instructions on how to\nget the Source of the Standard Version.  Such instructions must be\nvalid at the time of your distribution.  If these instructions, at any\ntime while you are carrying out such distribution, become invalid, you\nmust provide new instructions on demand or cease further distribution.\nIf you provide valid instructions or cease distribution within thirty\ndays after you become aware that the instructions are invalid, then\nyou do not forfeit any of your rights under this license.\n\n(6)  You may Distribute a Modified Version in Compiled form without\nthe Source, provided that you comply with Section 4 with respect to\nthe Source of the Modified Version.\n\n\nAggregating or Linking the Package \n\n(7)  You may aggregate the Package (either the Standard Version or\nModified Version) with other packages and Distribute the resulting\naggregation provided that you do not charge a licensing fee for the\nPackage.  Distributor Fees are permitted, and licensing fees for other\ncomponents in the aggregation are permitted. The terms of this license\napply to the use and Distribution of the Standard or Modified Versions\nas included in the aggregation.\n\n(8) You are permitted to link Modified and Standard Versions with\nother works, to embed the Package in a larger work of your own, or to\nbuild stand-alone binary or bytecode versions of applications that\ninclude the Package, and Distribute the result without restriction,\nprovided the result does not expose a direct interface to the Package.\n\n\nItems That are Not Considered Part of a Modified Version \n\n(9) Works (including, but not limited to, modules and scripts) that\nmerely extend or make use of the Package, do not, by themselves, cause\nthe Package to be a Modified Version.  In addition, such works are not\nconsidered parts of the Package itself, and are not subject to the\nterms of this license.\n\n\nGeneral Provisions\n\n(10)  Any use, modification, and distribution of the Standard or\nModified Versions is governed by this Artistic License. By using,\nmodifying or distributing the Package, you accept this license. Do not\nuse, modify, or distribute the Package, if you do not accept this\nlicense.\n\n(11)  If your Modified Version has been derived from a Modified\nVersion made by someone other than you, you are nevertheless required\nto ensure that your Modified Version complies with the requirements of\nthis license.\n\n(12)  This license does not grant you the right to use any trademark,\nservice mark, tradename, or logo of the Copyright Holder.\n\n(13)  This license includes the non-exclusive, worldwide,\nfree-of-charge patent license to make, have made, use, offer to sell,\nsell, import and otherwise transfer the Package with respect to any\npatent claims licensable by the Copyright Holder that are necessarily\ninfringed by the Package. If you institute patent litigation\n(including a cross-claim or counterclaim) against any party alleging\nthat the Package constitutes direct or contributory patent\ninfringement, then this Artistic License to you shall terminate on the\ndate that such litigation is filed.\n\n(14)  Disclaimer of Warranty:\nTHE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS \"AS\nIS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES. THE IMPLIED\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR\nNON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY YOUR LOCAL\nLAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR CONTRIBUTOR WILL\nBE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
                      "url": "http://www.perlfoundation.org/attachment/legal/artistic-2_0.txt",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb74/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb75",
                    "type": "licenses",
                    "attributes": {
                      "name": "CC0 1.0 Universal",
                      "text": "Statement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an \"owner\") of an original work of authorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works (\"Commons\") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the \"Affirmer\"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be protected by copyright and related or neighboring rights (\"Copyright and Related Rights\"). Copyright and Related Rights include, but are not limited to, the following:\n\nthe right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work;\nmoral rights retained by the original author(s) and/or performer(s);\npublicity and privacy rights pertaining to a person's image or likeness depicted in a Work;\nrights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below;\nrights protecting the extraction, dissemination, use and reuse of data in a Work;\ndatabase rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and\nother similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof.\n2. Waiver. To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the \"License\"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\nNo trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.\nAffirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law.\nAffirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work.\nAffirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.\n",
                      "url": "https://creativecommons.org/publicdomain/zero/1.0/legalcode",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb75/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb7b",
                    "type": "licenses",
                    "attributes": {
                      "name": "Eclipse Public License 1.0",
                      "text": "Eclipse Public License - v 1.0\n\nTHE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\n\n1. DEFINITIONS\n\n\"Contribution\" means:\n\na) in the case of the initial Contributor, the initial code and documentation distributed under this Agreement, and\nb) in the case of each subsequent Contributor:\ni) changes to the Program, and\nii) additions to the Program;\nwhere such changes and/or additions to the Program originate from and are distributed by that particular Contributor. A Contribution 'originates' from a Contributor if it was added to the Program by such Contributor itself or anyone acting on such Contributor's behalf. Contributions do not include additions to the Program which: (i) are separate modules of software distributed in conjunction with the Program under their own license agreement, and (ii) are not derivative works of the Program.\n\"Contributor\" means any person or entity that distributes the Program.\n\n\"Licensed Patents\" mean patent claims licensable by a Contributor which are necessarily infringed by the use or sale of its Contribution alone or when combined with the Program.\n\n\"Program\" means the Contributions distributed in accordance with this Agreement.\n\n\"Recipient\" means anyone who receives the Program under this Agreement, including all Contributors.\n\n2. GRANT OF RIGHTS\n\na) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense the Contribution of such Contributor, if any, and such derivative works, in source code and object code form.\nb) Subject to the terms of this Agreement, each Contributor hereby grants Recipient a non-exclusive, worldwide, royalty-free patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Contribution of such Contributor, if any, in source code and object code form. This patent license shall apply to the combination of the Contribution and the Program if, at the time the Contribution is added by the Contributor, such addition of the Contribution causes such combination to be covered by the Licensed Patents. The patent license shall not apply to any other combinations which include the Contribution. No hardware per se is licensed hereunder.\nc) Recipient understands that although each Contributor grants the licenses to its Contributions set forth herein, no assurances are provided by any Contributor that the Program does not infringe the patent or other intellectual property rights of any other entity. Each Contributor disclaims any liability to Recipient for claims brought by any other entity based on infringement of intellectual property rights or otherwise. As a condition to exercising the rights and licenses granted hereunder, each Recipient hereby assumes sole responsibility to secure any other intellectual property rights needed, if any. For example, if a third party patent license is required to allow Recipient to distribute the Program, it is Recipient's responsibility to acquire that license before distributing the Program.\nd) Each Contributor represents that to its knowledge it has sufficient copyright rights in its Contribution, if any, to grant the copyright license set forth in this Agreement.\n3. REQUIREMENTS\n\nA Contributor may choose to distribute the Program in object code form under its own license agreement, provided that:\n\na) it complies with the terms and conditions of this Agreement; and\nb) its license agreement:\ni) effectively disclaims on behalf of all Contributors all warranties and conditions, express and implied, including warranties or conditions of title and non-infringement, and implied warranties or conditions of merchantability and fitness for a particular purpose;\nii) effectively excludes on behalf of all Contributors all liability for damages, including direct, indirect, special, incidental and consequential damages, such as lost profits;\niii) states that any provisions which differ from this Agreement are offered by that Contributor alone and not by any other party; and\niv) states that source code for the Program is available from such Contributor, and informs licensees how to obtain it in a reasonable manner on or through a medium customarily used for software exchange.\nWhen the Program is made available in source code form:\n\na) it must be made available under this Agreement; and\nb) a copy of this Agreement must be included with each copy of the Program.\nContributors may not remove or alter any copyright notices contained within the Program.\n\nEach Contributor must identify itself as the originator of its Contribution, if any, in a manner that reasonably allows subsequent Recipients to identify the originator of the Contribution.\n\n4. COMMERCIAL DISTRIBUTION\n\nCommercial distributors of software may accept certain responsibilities with respect to end users, business partners and the like. While this license is intended to facilitate the commercial use of the Program, the Contributor who includes the Program in a commercial product offering should do so in a manner which does not create potential liability for other Contributors. Therefore, if a Contributor includes the Program in a commercial product offering, such Contributor (\"Commercial Contributor\") hereby agrees to defend and indemnify every other Contributor (\"Indemnified Contributor\") against any losses, damages and costs (collectively \"Losses\") arising from claims, lawsuits and other legal actions brought by a third party against the Indemnified Contributor to the extent caused by the acts or omissions of such Commercial Contributor in connection with its distribution of the Program in a commercial product offering. The obligations in this section do not apply to any claims or Losses relating to any actual or alleged intellectual property infringement. In order to qualify, an Indemnified Contributor must: a) promptly notify the Commercial Contributor in writing of such claim, and b) allow the Commercial Contributor to control, and cooperate with the Commercial Contributor in, the defense and any related settlement negotiations. The Indemnified Contributor may participate in any such claim at its own expense.\n\nFor example, a Contributor might include the Program in a commercial product offering, Product X. That Contributor is then a Commercial Contributor. If that Commercial Contributor then makes performance claims, or offers warranties related to Product X, those performance claims and warranties are such Commercial Contributor's responsibility alone. Under this section, the Commercial Contributor would have to defend claims against the other Contributors related to those performance claims and warranties, and if a court requires any other Contributor to pay any damages as a result, the Commercial Contributor must pay those damages.\n\n5. NO WARRANTY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, THE PROGRAM IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is solely responsible for determining the appropriateness of using and distributing the Program and assumes all risks associated with its exercise of rights under this Agreement , including but not limited to the risks and costs of program errors, compliance with applicable laws, damage to or loss of data, programs or equipment, and unavailability or interruption of operations.\n\n6. DISCLAIMER OF LIABILITY\n\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n7. GENERAL\n\nIf any provision of this Agreement is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this Agreement, and without further action by the parties hereto, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.\n\nIf Recipient institutes patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Program itself (excluding combinations of the Program with other software or hardware) infringes such Recipient's patent(s), then such Recipient's rights granted under Section 2(b) shall terminate as of the date such litigation is filed.\n\nAll Recipient's rights under this Agreement shall terminate if it fails to comply with any of the material terms or conditions of this Agreement and does not cure such failure in a reasonable period of time after becoming aware of such noncompliance. If all Recipient's rights under this Agreement terminate, Recipient agrees to cease use and distribution of the Program as soon as reasonably practicable. However, Recipient's obligations under this Agreement and any licenses granted by Recipient relating to the Program shall continue and survive.\n\nEveryone is permitted to copy and distribute copies of this Agreement, but in order to avoid inconsistency the Agreement is copyrighted and may only be modified in the following manner. The Agreement Steward reserves the right to publish new versions (including revisions) of this Agreement from time to time. No one other than the Agreement Steward has the right to modify this Agreement. The Eclipse Foundation is the initial Agreement Steward. The Eclipse Foundation may assign the responsibility to serve as the Agreement Steward to a suitable separate entity. Each new version of the Agreement will be given a distinguishing version number. The Program (including Contributions) may always be distributed subject to the version of the Agreement under which it was received. In addition, after a new version of the Agreement is published, Contributor may elect to distribute the Program (including its Contributions) under the new version. Except as expressly stated in Sections 2(a) and 2(b) above, Recipient receives no rights or licenses to the intellectual property of any Contributor under this Agreement, whether expressly, by implication, estoppel or otherwise. All rights in the Program not expressly granted under this Agreement are reserved.\n\nThis Agreement is governed by the laws of the State of New York and the intellectual property laws of the United States of America. No party to this Agreement will bring a legal action under this Agreement more than one year after the cause of action arose. Each party waives its rights to a jury trial in any resulting litigation.\n",
                      "url": "http://www.eclipse.org/legal/epl-v10.html",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb7b/"
                    }
                  },
                  {
                    "id": "5c252c8e0989e100220edb7c",
                    "type": "licenses",
                    "attributes": {
                      "name": "Mozilla Public License 2.0",
                      "text": "Mozilla Public License\nVersion 2.0\n\n1. Definitions\n\n1.1. “Contributor”\nmeans each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n\n1.2. “Contributor Version”\nmeans the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n\n1.3. “Contribution”\nmeans Covered Software of a particular Contributor.\n\n1.4. “Covered Software”\nmeans Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n\n1.5. “Incompatible With Secondary Licenses”\nmeans\n\nthat the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or\n\nthat the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License.\n\n1.6. “Executable Form”\nmeans any form of the work other than Source Code Form.\n\n1.7. “Larger Work”\nmeans a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n\n1.8. “License”\nmeans this document.\n\n1.9. “Licensable”\nmeans having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n\n1.10. “Modifications”\nmeans any of the following:\n\nany file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or\n\nany new file in Source Code Form that contains any Covered Software.\n\n1.11. “Patent Claims” of a Contributor\nmeans any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n\n1.12. “Secondary License”\nmeans either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n\n1.13. “Source Code Form”\nmeans the form of the work preferred for making modifications.\n\n1.14. “You” (or “Your”)\nmeans an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n\n2. License Grants and Conditions\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\n\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\n\nfor any code that a Contributor has removed from Covered Software; or\n\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\n\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.\n\n3. Responsibilities\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\n\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n\nIf it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.\n\n5. Termination\n\n5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n\n6. Disclaimer of Warranty\n\nCovered Software is provided under this License on an “as is” basis, without warranty of any kind, either expressed, implied, or statutory, including, without limitation, warranties that the Covered Software is free of defects, merchantable, fit for a particular purpose or non-infringing. The entire risk as to the quality and performance of the Covered Software is with You. Should any Covered Software prove defective in any respect, You (not any Contributor) assume the cost of any necessary servicing, repair, or correction. This disclaimer of warranty constitutes an essential part of this License. No use of any Covered Software is authorized under this License except under this disclaimer.\n\n7. Limitation of Liability\n\nUnder no circumstances and under no legal theory, whether tort (including negligence), contract, or otherwise, shall any Contributor, or anyone who distributes Covered Software as permitted above, be liable to You for any direct, indirect, special, incidental, or consequential damages of any character including, without limitation, damages for lost profits, loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses, even if such party shall have been informed of the possibility of such damages. This limitation of liability shall not apply to liability for death or personal injury resulting from such party’s negligence to the extent applicable law prohibits such limitation. Some jurisdictions do not allow the exclusion or limitation of incidental or consequential damages, so this exclusion and limitation may not apply to You.\n\n8. Litigation\n\nAny litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims.\n\n9. Miscellaneous\n\nThis License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - “Incompatible With Secondary Licenses” Notice\n\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.\n",
                      "url": "https://www.mozilla.org/MPL/2.0/",
                      "required_fields": []
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb7c/"
                    }
                  }
                ],
                "meta": {
                  "total": 5,
                  "per_page": 10,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/temp/licenses/",
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null
                }
              }
            }
          }
        }
      }
    },
    "/provider/collections/{provider_id}/submissions/": {
      "get": {
        "summary": "Collections Providers Submissions List",
        "description": "\nThis returns a list of all submissions to a Collections Provider entity.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of node and preprint ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "uwnqs",
                    "type": "collected-metadata",
                    "attributes": {
                      "reviews_state": "accepted",
                      "date_created": "2022-01-03T20:12:25.315870Z",
                      "date_modified": "2022-01-03T20:12:25.329533Z",
                      "collected_type": "automation",
                      "status": "",
                      "volume": "",
                      "issue": "",
                      "program_area": "",
                      "school_type": "",
                      "study_design": ""
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/rmq6z/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rmq6z",
                          "type": "users"
                        }
                      },
                      "collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rju4d",
                          "type": "collections"
                        }
                      },
                      "guid": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/guids/uwnqs/",
                            "meta": {}
                          }
                        }
                      },
                      "collection_submission_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collection_submissions/uwnqs-rju4d/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/uwnqs/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/uwnqs/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "guid": {
                        "data": {
                          "id": "uwnqs",
                          "type": "nodes",
                          "attributes": {
                            "title": "OSF Test Project",
                            "description": "QA Selenium Testing",
                            "category": "project",
                            "custom_citation": null,
                            "date_created": "2022-01-03T20:12:02.942101Z",
                            "date_modified": "2022-01-03T20:12:29.977480Z",
                            "registration": false,
                            "preprint": false,
                            "fork": false,
                            "collection": false,
                            "tags": [
                              "qatest",
                              "selenium",
                              "tests/test_collections.py::TestCollectionSubmission::()::test_add_to_collection (setup)"
                            ],
                            "node_license": {
                              "copyright_holders": [],
                              "year": null
                            },
                            "analytics_key": "",
                            "current_user_can_comment": false,
                            "current_user_permissions": [],
                            "current_user_is_contributor": false,
                            "current_user_is_contributor_or_group_member": false,
                            "wiki_enabled": true,
                            "public": false
                          },
                          "relationships": {
                            "license": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb75/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "5c252c8e0989e100220edb75",
                                "type": "licenses"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/children/",
                                  "meta": {}
                                }
                              }
                            },
                            "comments": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/comments/?filter%5Btarget%5D=uwnqs",
                                  "meta": {}
                                }
                              }
                            },
                            "contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "bibliographic_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/bibliographic_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "implicit_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/implicit_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "files": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/files/",
                                  "meta": {}
                                }
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/settings/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "node-setting"
                              }
                            },
                            "wikis": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/wikis/",
                                  "meta": {}
                                }
                              }
                            },
                            "forked_from": {
                              "data": null
                            },
                            "template_node": {
                              "data": null
                            },
                            "forks": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/forks/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_by_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_by_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "parent": {
                              "data": null
                            },
                            "identifiers": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/identifiers/",
                                  "meta": {}
                                }
                              }
                            },
                            "affiliated_institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "draft_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/draft_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "region": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/regions/us/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "root": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "nodes"
                              }
                            },
                            "logs": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/logs/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_nodes/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/linked_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/linked_registrations/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/linked_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "view_only_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/view_only_links/",
                                  "meta": {}
                                }
                              }
                            },
                            "citation": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/citation/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "citation"
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/preprints/",
                                  "meta": {}
                                }
                              }
                            },
                            "storage": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/storage/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "uwnqs",
                                "type": "node-storage"
                              }
                            },
                            "subjects": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/subjects/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/uwnqs/relationships/subjects/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/uwnqs/",
                            "self": "https://api.staging.osf.io/v2/nodes/uwnqs/"
                          }
                        }
                      }
                    },
                    "links": {}
                  },
                  {
                    "id": "a3prf",
                    "type": "collected-metadata",
                    "attributes": {
                      "reviews_state": "accepted",
                      "date_created": "2022-01-03T20:20:13.539361Z",
                      "date_modified": "2022-01-03T20:20:13.547825Z",
                      "collected_type": "automation",
                      "status": "",
                      "volume": "",
                      "issue": "",
                      "program_area": "",
                      "school_type": "",
                      "study_design": ""
                    },
                    "relationships": {
                      "creator": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/rmq6z/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rmq6z",
                          "type": "users"
                        }
                      },
                      "collection": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "rju4d",
                          "type": "collections"
                        }
                      },
                      "guid": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/guids/a3prf/",
                            "meta": {}
                          }
                        }
                      },
                      "collection_submission_actions": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collection_submissions/a3prf-rju4d/actions/",
                            "meta": {}
                          }
                        }
                      },
                      "subjects": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/a3prf/subjects/",
                            "meta": {}
                          },
                          "self": {
                            "href": "https://api.staging.osf.io/v2/collections/rju4d/collected_metadata/a3prf/relationships/subjects/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "guid": {
                        "data": {
                          "id": "a3prf",
                          "type": "nodes",
                          "attributes": {
                            "title": "OSF Test Project",
                            "description": "QA Selenium Testing",
                            "category": "project",
                            "custom_citation": null,
                            "date_created": "2022-01-03T20:18:24.925774Z",
                            "date_modified": "2022-01-03T20:20:26.832995Z",
                            "registration": false,
                            "preprint": false,
                            "fork": false,
                            "collection": false,
                            "tags": [
                              "qatest",
                              "selenium",
                              "tests/test_collections.py::TestCollectionSubmission::()::test_add_to_collection (setup)"
                            ],
                            "node_license": {
                              "copyright_holders": [],
                              "year": null
                            },
                            "analytics_key": "",
                            "current_user_can_comment": false,
                            "current_user_permissions": [],
                            "current_user_is_contributor": false,
                            "current_user_is_contributor_or_group_member": false,
                            "wiki_enabled": true,
                            "public": false
                          },
                          "relationships": {
                            "license": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/licenses/5c252c8e0989e100220edb75/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "5c252c8e0989e100220edb75",
                                "type": "licenses"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/children/",
                                  "meta": {}
                                }
                              }
                            },
                            "comments": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/comments/?filter%5Btarget%5D=a3prf",
                                  "meta": {}
                                }
                              }
                            },
                            "contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "bibliographic_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/bibliographic_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "implicit_contributors": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/implicit_contributors/",
                                  "meta": {}
                                }
                              }
                            },
                            "files": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/files/",
                                  "meta": {}
                                }
                              }
                            },
                            "settings": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/settings/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "node-setting"
                              }
                            },
                            "wikis": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/wikis/",
                                  "meta": {}
                                }
                              }
                            },
                            "forked_from": {
                              "data": null
                            },
                            "template_node": {
                              "data": null
                            },
                            "forks": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/forks/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_by_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_by_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_by_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "parent": {
                              "data": null
                            },
                            "identifiers": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/identifiers/",
                                  "meta": {}
                                }
                              }
                            },
                            "affiliated_institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "draft_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/draft_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "region": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/regions/us/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "us",
                                "type": "regions"
                              }
                            },
                            "root": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "nodes"
                              }
                            },
                            "logs": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/logs/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_nodes/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/linked_nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "linked_registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/linked_registrations/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/linked_registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "view_only_links": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/view_only_links/",
                                  "meta": {}
                                }
                              }
                            },
                            "citation": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/citation/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "citation"
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/preprints/",
                                  "meta": {}
                                }
                              }
                            },
                            "storage": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/storage/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "a3prf",
                                "type": "node-storage"
                              }
                            },
                            "subjects": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/subjects/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/nodes/a3prf/relationships/subjects/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/a3prf/",
                            "self": "https://api.staging.osf.io/v2/nodes/a3prf/"
                          }
                        }
                      }
                    },
                    "links": {}
                  }
                ],
                "meta": {
                  "total": 53,
                  "per_page": 2,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/temp/submissions/?page%5Bsize%5D=2",
                  "first": null,
                  "last": "https://api.staging.osf.io/v2/providers/collections/temp/submissions/?page=27&page%5Bsize%5D=2",
                  "prev": null,
                  "next": "https://api.staging.osf.io/v2/providers/collections/temp/submissions/?page=2&page%5Bsize%5D=2"
                }
              }
            }
          }
        }
      }
    },
    "/provider/collections/{provider_id}/subjects/": {
      "get": {
        "summary": "Collections Providers Subject List",
        "description": "\nThis returns a list of acceptable subjects for a Collections Provider.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of subject ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5c3e311a0989e101eede6afa",
                    "type": "subjects",
                    "attributes": {
                      "text": "Puppy Studies",
                      "taxonomy_name": "bepress"
                    },
                    "relationships": {
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc16/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5c252d510989e100220edc16",
                          "type": "subjects"
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c3e311a0989e101eede6afa/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "data": {
                          "id": "5c252d510989e100220edc16",
                          "type": "subjects",
                          "attributes": {
                            "text": "Public Affairs, Public Policy and Public Administration",
                            "taxonomy_name": "bepress"
                          },
                          "relationships": {
                            "parent": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc1e/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "5c252d510989e100220edc1e",
                                "type": "subjects"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc16/children/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "embeds": {
                            "parent": {
                              "data": {
                                "id": "5c252d510989e100220edc1e",
                                "type": "subjects",
                                "attributes": {
                                  "text": "Social and Behavioral Sciences",
                                  "taxonomy_name": "bepress"
                                },
                                "relationships": {
                                  "parent": {
                                    "data": null
                                  },
                                  "children": {
                                    "links": {
                                      "related": {
                                        "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc1e/children/",
                                        "meta": {}
                                      }
                                    }
                                  }
                                },
                                "embeds": {
                                  "parent": {
                                    "errors": [
                                      {
                                        "detail": "Not found."
                                      }
                                    ]
                                  }
                                },
                                "links": {
                                  "self": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc1e/"
                                }
                              }
                            }
                          },
                          "links": {
                            "self": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc16/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/subjects/5c3e311a0989e101eede6afa/"
                    }
                  },
                  {
                    "id": "5c3e311a0989e101eede6af9",
                    "type": "subjects",
                    "attributes": {
                      "text": "Transpersonal Psychology",
                      "taxonomy_name": "bepress"
                    },
                    "relationships": {
                      "parent": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edbad/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "5c252d510989e100220edbad",
                          "type": "subjects"
                        }
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c3e311a0989e101eede6af9/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "data": {
                          "id": "5c252d510989e100220edbad",
                          "type": "subjects",
                          "attributes": {
                            "text": "Psychology",
                            "taxonomy_name": "bepress"
                          },
                          "relationships": {
                            "parent": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc1e/",
                                  "meta": {}
                                }
                              },
                              "data": {
                                "id": "5c252d510989e100220edc1e",
                                "type": "subjects"
                              }
                            },
                            "children": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edbad/children/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "embeds": {
                            "parent": {
                              "data": {
                                "id": "5c252d510989e100220edc1e",
                                "type": "subjects",
                                "attributes": {
                                  "text": "Social and Behavioral Sciences",
                                  "taxonomy_name": "bepress"
                                },
                                "relationships": {
                                  "parent": {
                                    "data": null
                                  },
                                  "children": {
                                    "links": {
                                      "related": {
                                        "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc1e/children/",
                                        "meta": {}
                                      }
                                    }
                                  }
                                },
                                "embeds": {
                                  "parent": {
                                    "errors": [
                                      {
                                        "detail": "Not found."
                                      }
                                    ]
                                  }
                                },
                                "links": {
                                  "self": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edc1e/"
                                }
                              }
                            }
                          },
                          "links": {
                            "self": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edbad/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/subjects/5c3e311a0989e101eede6af9/"
                    }
                  }
                ],
                "meta": {
                  "total": 1239,
                  "per_page": 2,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/?page%5Bsize%5D=2",
                  "first": null,
                  "last": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/?page=620&page%5Bsize%5D=2",
                  "prev": null,
                  "next": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/?page=2&page%5Bsize%5D=2"
                }
              }
            }
          }
        }
      }
    },
    "/provider/collections/{provider_id}/subjects/highlighted/": {
      "get": {
        "summary": "Collections Providers Highlighted Subject List",
        "description": "\nThis returns a list of highlighted subjects for a Collections Provider.\n#### Permissions\nThis information is public.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of subject ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "5c252d520989e100220edc4f",
                    "type": "subjects",
                    "attributes": {
                      "text": "Architecture",
                      "taxonomy_name": "bepress"
                    },
                    "relationships": {
                      "parent": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c252d520989e100220edc4f/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "errors": [
                          {
                            "detail": "Not found."
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/subjects/5c252d520989e100220edc4f/"
                    }
                  },
                  {
                    "id": "5c252d510989e100220edba7",
                    "type": "subjects",
                    "attributes": {
                      "text": "Arts and Humanities",
                      "taxonomy_name": "bepress"
                    },
                    "relationships": {
                      "parent": {
                        "data": null
                      },
                      "children": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edba7/children/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "embeds": {
                      "parent": {
                        "errors": [
                          {
                            "detail": "Not found."
                          }
                        ]
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/subjects/5c252d510989e100220edba7/"
                    }
                  }
                ],
                "meta": {
                  "total": 10,
                  "per_page": 2,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/highlighted/?page%5Bsize%5D=2",
                  "first": null,
                  "last": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/highlighted/?page=5&page%5Bsize%5D=2",
                  "prev": null,
                  "next": "https://api.staging.osf.io/v2/providers/collections/temp/subjects/highlighted/?page=2&page%5Bsize%5D=2"
                }
              }
            }
          }
        }
      }
    },
    "/provider/collections/{provider_id}/moderators/": {
      "get": {
        "summary": "Collections Providers Moderators List",
        "description": "\nThis returns a list of moderators for a Collections Provider.\n#### Permissions\nThis information is only available to Collection Provider moderators or admins.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nThe `data` key contains an array of moderator ids.\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "nmwt5",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "Blaine Butler",
                      "permission_group": "admin"
                    },
                    "relationships": {
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/nmwt5/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "nmwt5",
                          "type": "users"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "colmod",
                          "type": "collection-providers"
                        }
                      }
                    },
                    "embeds": {
                      "user": {
                        "data": {
                          "id": "nmwt5",
                          "type": "users",
                          "attributes": {
                            "full_name": "Blaine Butler",
                            "given_name": "Blaine",
                            "middle_names": "",
                            "family_name": "Butler",
                            "suffix": "",
                            "date_registered": "2022-11-03T19:23:28.110924Z",
                            "active": false,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/nmwt5/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/nmwt5/",
                            "profile_image": "https://secure.gravatar.com/avatar/4a1f62c6580a151e5c1c0aec72b7fc2a?d=identicon",
                            "self": "https://api.staging.osf.io/v2/users/nmwt5/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/nmwt5/"
                    }
                  },
                  {
                    "id": "m8ku3",
                    "type": "moderators",
                    "attributes": {
                      "full_name": "DC Test - AMC",
                      "permission_group": "admin"
                    },
                    "relationships": {
                      "user": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/users/m8ku3/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "m8ku3",
                          "type": "users"
                        }
                      },
                      "provider": {
                        "links": {
                          "related": {
                            "href": "https://api.staging.osf.io/v2/providers/collections/colmod/",
                            "meta": {}
                          }
                        },
                        "data": {
                          "id": "colmod",
                          "type": "collection-providers"
                        }
                      }
                    },
                    "embeds": {
                      "user": {
                        "data": {
                          "id": "m8ku3",
                          "type": "users",
                          "attributes": {
                            "full_name": "DC Test - AMC",
                            "given_name": "DC",
                            "middle_names": "Test -",
                            "family_name": "AMC",
                            "suffix": "",
                            "date_registered": "2022-09-14T11:28:08.681787Z",
                            "active": true,
                            "timezone": "Etc/UTC",
                            "locale": "en_US",
                            "social": {},
                            "employment": [],
                            "education": []
                          },
                          "relationships": {
                            "nodes": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/nodes/",
                                  "meta": {}
                                }
                              }
                            },
                            "groups": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/groups/",
                                  "meta": {}
                                }
                              }
                            },
                            "registrations": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/registrations/",
                                  "meta": {}
                                }
                              }
                            },
                            "institutions": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/institutions/",
                                  "meta": {}
                                },
                                "self": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/relationships/institutions/",
                                  "meta": {}
                                }
                              }
                            },
                            "preprints": {
                              "links": {
                                "related": {
                                  "href": "https://api.staging.osf.io/v2/users/m8ku3/preprints/",
                                  "meta": {}
                                }
                              }
                            }
                          },
                          "links": {
                            "html": "https://staging.osf.io/m8ku3/",
                            "profile_image": "https://secure.gravatar.com/avatar/ce38ca4e4a1361446468960716f57b5e?d=identicon",
                            "self": "https://api.staging.osf.io/v2/users/m8ku3/"
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/m8ku3/"
                    }
                  }
                ],
                "meta": {
                  "total": 8,
                  "per_page": 2,
                  "version": "2.20"
                },
                "links": {
                  "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/?page%5Bsize%5D=2",
                  "first": null,
                  "last": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/?page=4&page%5Bsize%5D=2",
                  "prev": null,
                  "next": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/?page=2&page%5Bsize%5D=2"
                }
              }
            }
          }
        }
      }
    },
    "/provider/collections/{provider_id}/moderators/{moderator_id}/": {
      "get": {
        "summary": "Collections Providers Moderators Detail",
        "description": "\nThis returns details for a moderator of a Collections Provider.\n#### Permissions\nThis information is only available to Collection Provider moderators or admins.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\nReturns a JSON object with a `data` key containing the representation of the requested collection provider moderator object, if the request is successful.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "provider_id",
            "description": "A short id for that collection"
          },
          {
            "in": "path",
            "type": "string",
            "required": true,
            "name": "moderator_id",
            "description": "A short id for that moderator"
          }
        ],
        "tags": [
          "Collection Providers"
        ],
        "operationId": "collection_provider_detail",
        "x-response-schema": "Collection Provider",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "examples": {
              "application/json": {
                "data": {
                  "id": "m8ku3",
                  "type": "moderators",
                  "attributes": {
                    "full_name": "DC Test - AMC",
                    "permission_group": "admin"
                  },
                  "relationships": {
                    "user": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/users/m8ku3/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "m8ku3",
                        "type": "users"
                      }
                    },
                    "provider": {
                      "links": {
                        "related": {
                          "href": "https://api.staging.osf.io/v2/providers/collections/colmod/",
                          "meta": {}
                        }
                      },
                      "data": {
                        "id": "colmod",
                        "type": "collection-providers"
                      }
                    }
                  },
                  "embeds": {
                    "user": {
                      "data": {
                        "id": "m8ku3",
                        "type": "users",
                        "attributes": {
                          "full_name": "DC Test - AMC",
                          "given_name": "DC",
                          "middle_names": "Test -",
                          "family_name": "AMC",
                          "suffix": "",
                          "date_registered": "2022-09-14T11:28:08.681787Z",
                          "active": true,
                          "timezone": "Etc/UTC",
                          "locale": "en_US",
                          "social": {},
                          "employment": [],
                          "education": []
                        },
                        "relationships": {
                          "nodes": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/nodes/",
                                "meta": {}
                              }
                            }
                          },
                          "groups": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/groups/",
                                "meta": {}
                              }
                            }
                          },
                          "registrations": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/registrations/",
                                "meta": {}
                              }
                            }
                          },
                          "institutions": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/institutions/",
                                "meta": {}
                              },
                              "self": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/relationships/institutions/",
                                "meta": {}
                              }
                            }
                          },
                          "preprints": {
                            "links": {
                              "related": {
                                "href": "https://api.staging.osf.io/v2/users/m8ku3/preprints/",
                                "meta": {}
                              }
                            }
                          }
                        },
                        "links": {
                          "html": "https://staging.osf.io/m8ku3/",
                          "profile_image": "https://secure.gravatar.com/avatar/ce38ca4e4a1361446468960716f57b5e?d=identicon",
                          "self": "https://api.staging.osf.io/v2/users/m8ku3/"
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.staging.osf.io/v2/providers/collections/colmod/moderators/m8ku3/"
                  }
                },
                "meta": {
                  "version": "2.20"
                }
              }
            }
          }
        }
      }
    },
    "/requests/{request_id}/": {
      "get": {
        "summary": "Retrieve details for a specific request",
        "description": "Retrieve a specific request by ID. Requests can be associated with either a node or a preprint.  Depending on the type, this will return a `node-request` or a `preprint-request` resource.\nA request is a formal submission for actions like access to private content, withdrawal of a preprint,  or institutional affiliation. This endpoint returns details about the request's status, creator, type, and comments.\nPermissions: - Node requests: Viewable by the node's administrators and the request creator. - Preprint requests: Viewable by preprint admins, moderators (for moderated providers), and the request creator.\n",
        "tags": [
          "Requests"
        ],
        "operationId": "retrieve_request",
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the request (either NodeRequest or PreprintRequest)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved request details.",
            "schema": {
              "type": "object",
              "description": "Returns either a node-request or a preprint-request resource, following JSON:API format.\n",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier for the request.",
                      "example": "abc123"
                    },
                    "type": {
                      "type": "string",
                      "description": "Resource type. Will be `node-requests` or `preprint-requests`.",
                      "enum": [
                        "node-requests",
                        "preprint-requests"
                      ]
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "request_type": {
                          "type": "string",
                          "description": "Type of request. Examples: `access`, `withdrawal`, or `institutional_request`.\n",
                          "example": "access"
                        },
                        "machine_state": {
                          "type": "string",
                          "description": "Current workflow state of the request. Examples: `pending`, `accepted`, `rejected`.\n",
                          "example": "pending"
                        },
                        "comment": {
                          "type": "string",
                          "description": "Comment provided with the request.",
                          "example": "Please grant me access."
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "ISO 8601 timestamp of when the request was created.",
                          "example": "2024-06-01T12:00:00Z"
                        },
                        "modified": {
                          "type": "string",
                          "format": "date-time",
                          "description": "ISO 8601 timestamp of the last modification to the request.",
                          "example": "2024-06-02T15:30:00Z"
                        },
                        "date_last_transitioned": {
                          "type": "string",
                          "format": "date-time",
                          "description": "ISO 8601 timestamp of when the request last transitioned to a new workflow state.\n",
                          "example": "2024-06-02T15:30:00Z"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "creator": {
                          "type": "object",
                          "description": "The user who created the request.",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "user123"
                                },
                                "type": {
                                  "type": "string",
                                  "example": "users"
                                }
                              }
                            }
                          }
                        },
                        "target": {
                          "type": "object",
                          "description": "The node or preprint this request is associated with.\n",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "project456"
                                },
                                "type": {
                                  "type": "string",
                                  "example": "nodes"
                                }
                              }
                            }
                          }
                        },
                        "actions": {
                          "type": "object",
                          "description": "Related actions for the request (only for preprint-requests).\n",
                          "properties": {
                            "links": {
                              "type": "object",
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "example": "/v2/requests/abc123/actions/"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "/v2/requests/abc123/"
                        },
                        "target": {
                          "type": "string",
                          "example": "/v2/nodes/project456/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view this request."
          },
          "404": {
            "description": "Request not found."
          }
        }
      }
    },
    "/requests/{request_id}/actions/": {
      "get": {
        "summary": "List actions associated with a request",
        "description": "Retrieve a list of actions performed on a specific request.\nCurrently, actions are supported for `preprint-request` resources, typically related to withdrawal requests. Actions track the workflow of the request, including submission, approvals, rejections, and comments.\n### Permissions: - Request creators can view actions on their requests. - Preprint moderators can view actions for withdrawal requests. - Preprint administrators can view actions on requests for preprints they manage.\n",
        "tags": [
          "Requests"
        ],
        "operationId": "list_request_actions",
        "parameters": [
          {
            "name": "request_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier for the request."
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter actions by attributes.\n\nSupported filters:\n  - `machine_state`: Filter by current state (e.g., `pending`, `accepted`, `rejected`)\n\nExample:\n  - filter[machine_state]=pending\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved actions for the request.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "List of actions related to the request.",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier for the preprint request action.",
                        "example": "actn54321"
                      },
                      "type": {
                        "type": "string",
                        "example": "preprint-request-actions"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "trigger": {
                            "type": "string",
                            "description": "The event that caused this action.",
                            "enum": [
                              "submit",
                              "accept",
                              "reject",
                              "edit_comment"
                            ],
                            "example": "accept"
                          },
                          "comment": {
                            "type": "string",
                            "description": "Optional comment made during the action.",
                            "example": "This withdrawal request has been approved."
                          },
                          "auto": {
                            "type": "boolean",
                            "description": "Whether the action was triggered automatically by the system rather than manually by a user.\n",
                            "example": false
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date and time the action was created."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "creator": {
                            "type": "object",
                            "description": "The user who performed this action.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "user789"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  }
                                }
                              }
                            }
                          },
                          "target": {
                            "type": "object",
                            "description": "The preprint request this action is associated with.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "prrqst67890"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "preprint-requests"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "/v2/requests/{request_id}/actions/?page=1"
                    },
                    "next": {
                      "type": "string",
                      "example": "/v2/requests/{request_id}/actions/?page=2"
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "action123",
                    "type": "preprint-request-actions",
                    "attributes": {
                      "trigger": "accept",
                      "comment": "Withdrawal approved.",
                      "from_state": "pending",
                      "to_state": "accepted",
                      "created": "2024-06-01T12:00:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "id": "user456",
                          "type": "users"
                        }
                      }
                    }
                  },
                  {
                    "id": "action456",
                    "type": "preprint-request-actions",
                    "attributes": {
                      "trigger": "submit",
                      "comment": "Request submitted.",
                      "from_state": "initial",
                      "to_state": "pending",
                      "created": "2024-05-30T08:15:00Z"
                    },
                    "relationships": {
                      "creator": {
                        "data": {
                          "id": "user456",
                          "type": "users"
                        }
                      }
                    }
                  }
                ],
                "links": {
                  "self": "/v2/requests/abc123/actions/?page=1",
                  "next": null,
                  "prev": null
                }
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to view actions on this request."
          },
          "404": {
            "description": "Request not found or no actions are available for the given request."
          }
        }
      }
    },
    "/resources/": {
      "get": {
        "summary": "List resources",
        "description": "Retrieve a list of resources associated with registrations.",
        "tags": [
          "Resources"
        ],
        "operationId": "listResources",
        "responses": {
          "200": {
            "description": "Successful retrieval of resource list",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "description": "Array of resource objects.",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "abc123",
                        "description": "Unique identifier for the resource."
                      },
                      "type": {
                        "type": "string",
                        "example": "resources",
                        "description": "The type of this object: `resources`."
                      },
                      "attributes": {
                        "type": "object",
                        "description": "Resource metadata.",
                        "properties": {
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-01T00:00:00Z",
                            "description": "When the resource was created."
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-02T00:00:00Z",
                            "description": "When the resource was last updated."
                          },
                          "description": {
                            "type": "string",
                            "example": "Dataset resource",
                            "description": "A short summary of the resource."
                          },
                          "resource_type": {
                            "type": "string",
                            "example": "data",
                            "description": "The category of the resource. Valid values include:\n - data\n - analytic_code\n - materials\n - papers\n - supplements\n"
                          },
                          "finalized": {
                            "type": "boolean",
                            "example": true,
                            "description": "Whether the resource is finalized and no longer editable."
                          },
                          "pid": {
                            "type": "string",
                            "example": "10.1234/resource.5678",
                            "description": "A persistent identifier (DOI) assigned to this resource."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "description": "Relationships for the resource.",
                        "properties": {
                          "registration": {
                            "type": "object",
                            "description": "The registration associated with the resource.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "reg123",
                                    "description": "ID of the related registration."
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "registrations",
                                    "description": "Type of the related object."
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "description": "Related API URLs for this resource.",
                        "properties": {
                          "self": {
                            "type": "string",
                            "example": "https://api.osf.io/v2/resources/abc123/",
                            "description": "URL to the resource detail."
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Metadata for pagination.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 1,
                      "description": "Total number of resources."
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10,
                      "description": "Results per page."
                    },
                    "page": {
                      "type": "integer",
                      "example": 1,
                      "description": "Current page number."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required."
          },
          "403": {
            "description": "Permission denied."
          }
        }
      },
      "post": {
        "summary": "Create a new resource",
        "description": "Create a new resource associated with a registration.",
        "tags": [
          "Resources"
        ],
        "operationId": "createResource",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "JSON:API-compliant resource creation payload.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "resources",
                      "description": "Must be `resources`."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "Metadata about the new resource.",
                      "required": [
                        "description",
                        "resource_type"
                      ],
                      "properties": {
                        "description": {
                          "type": "string",
                          "example": "Dataset resource",
                          "description": "Short text describing the resource."
                        },
                        "resource_type": {
                          "type": "string",
                          "example": "data",
                          "description": "Type of resource (e.g., data, materials)."
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "description": "Relationships for the resource.",
                      "properties": {
                        "registration": {
                          "type": "object",
                          "description": "The registration this resource is linked to.",
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "type",
                                "id"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "example": "registrations",
                                  "description": "Must be `registrations`."
                                },
                                "id": {
                                  "type": "string",
                                  "example": "reg123",
                                  "description": "ID of the related registration."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a new resource.",
            "schema": {
              "description": "A resource associated with a registration, such as datasets, materials, code, or papers.",
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the resource.",
                      "example": "abc123"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the resource object.",
                      "example": "resources"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "date_created": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T00:00:00Z",
                          "description": "The date the resource was created."
                        },
                        "date_modified": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-02T00:00:00Z",
                          "description": "The date the resource was last modified."
                        },
                        "description": {
                          "type": "string",
                          "description": "A brief description of the resource.",
                          "example": "Dataset resource for analysis of trial results"
                        },
                        "resource_type": {
                          "type": "string",
                          "description": "The type of the resource. Acceptable values include:\n- data\n- analytic_code\n- materials\n- papers\n- supplements\n",
                          "example": "data"
                        },
                        "finalized": {
                          "type": "boolean",
                          "description": "Indicates whether the resource has been finalized.",
                          "example": true
                        },
                        "pid": {
                          "type": "string",
                          "description": "Persistent Identifier (PID) assigned to the resource.",
                          "example": "10.1234/osf.io/abcde"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "registration": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "reg123",
                                  "description": "The unique identifier of the registration."
                                },
                                "type": {
                                  "type": "string",
                                  "example": "registrations",
                                  "description": "Type for the registration."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "https://api.osf.io/v2/resources/abc123/",
                          "description": "The canonical API endpoint for this resource."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid data."
          },
          "401": {
            "description": "Authentication required."
          },
          "403": {
            "description": "Permission denied."
          }
        }
      }
    },
    "/resources/{resource_id}/": {
      "get": {
        "summary": "Retrieve a resource",
        "description": "Retrieve the full metadata for a specific resource associated with a registration.\n\nA resource may include datasets, materials, code, papers, or supplements.\n",
        "tags": [
          "Resources"
        ],
        "operationId": "getResource",
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the resource."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the resource.",
            "schema": {
              "description": "A resource associated with a registration, such as datasets, materials, code, or papers.",
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the resource.",
                      "example": "abc123"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the resource object.",
                      "example": "resources"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "date_created": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T00:00:00Z",
                          "description": "The date the resource was created."
                        },
                        "date_modified": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-02T00:00:00Z",
                          "description": "The date the resource was last modified."
                        },
                        "description": {
                          "type": "string",
                          "description": "A brief description of the resource.",
                          "example": "Dataset resource for analysis of trial results"
                        },
                        "resource_type": {
                          "type": "string",
                          "description": "The type of the resource. Acceptable values include:\n- data\n- analytic_code\n- materials\n- papers\n- supplements\n",
                          "example": "data"
                        },
                        "finalized": {
                          "type": "boolean",
                          "description": "Indicates whether the resource has been finalized.",
                          "example": true
                        },
                        "pid": {
                          "type": "string",
                          "description": "Persistent Identifier (PID) assigned to the resource.",
                          "example": "10.1234/osf.io/abcde"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "registration": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "reg123",
                                  "description": "The unique identifier of the registration."
                                },
                                "type": {
                                  "type": "string",
                                  "example": "registrations",
                                  "description": "Type for the registration."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "https://api.osf.io/v2/resources/abc123/",
                          "description": "The canonical API endpoint for this resource."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication required."
          },
          "403": {
            "description": "Permission denied."
          },
          "404": {
            "description": "Resource not found."
          }
        }
      },
      "patch": {
        "summary": "Update a resource",
        "description": "Update one or more metadata fields of a specific resource.\n\nOnly the fields provided in the request payload will be updated.\n",
        "tags": [
          "Resources"
        ],
        "operationId": "updateResource",
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the resource to update."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "A JSON:API compliant object describing the updates.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "abc123",
                      "description": "The ID of the resource being updated."
                    },
                    "type": {
                      "type": "string",
                      "example": "resources",
                      "description": "The resource type — must be `\"resources\"`."
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "example": "Updated dataset description.",
                          "description": "A short description of the resource."
                        },
                        "resource_type": {
                          "type": "string",
                          "example": "materials",
                          "description": "Type of the resource. Allowed values:\n- data\n- analytic_code\n- materials\n- papers\n- supplements\n"
                        },
                        "finalized": {
                          "type": "boolean",
                          "example": true,
                          "description": "Whether the resource is finalized (locked for editing)."
                        },
                        "pid": {
                          "type": "string",
                          "example": "10.5678/resource.9012",
                          "description": "A persistent identifier (e.g. DOI) for the resource."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource updated successfully.",
            "schema": {
              "description": "A resource associated with a registration, such as datasets, materials, code, or papers.",
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the resource.",
                      "example": "abc123"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of the resource object.",
                      "example": "resources"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "date_created": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-01T00:00:00Z",
                          "description": "The date the resource was created."
                        },
                        "date_modified": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-01-02T00:00:00Z",
                          "description": "The date the resource was last modified."
                        },
                        "description": {
                          "type": "string",
                          "description": "A brief description of the resource.",
                          "example": "Dataset resource for analysis of trial results"
                        },
                        "resource_type": {
                          "type": "string",
                          "description": "The type of the resource. Acceptable values include:\n- data\n- analytic_code\n- materials\n- papers\n- supplements\n",
                          "example": "data"
                        },
                        "finalized": {
                          "type": "boolean",
                          "description": "Indicates whether the resource has been finalized.",
                          "example": true
                        },
                        "pid": {
                          "type": "string",
                          "description": "Persistent Identifier (PID) assigned to the resource.",
                          "example": "10.1234/osf.io/abcde"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "registration": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "reg123",
                                  "description": "The unique identifier of the registration."
                                },
                                "type": {
                                  "type": "string",
                                  "example": "registrations",
                                  "description": "Type for the registration."
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "https://api.osf.io/v2/resources/abc123/",
                          "description": "The canonical API endpoint for this resource."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or malformed request data."
          },
          "401": {
            "description": "Authentication required."
          },
          "403": {
            "description": "Permission denied."
          },
          "404": {
            "description": "Resource not found."
          }
        }
      },
      "delete": {
        "summary": "Delete a resource",
        "description": "Permanently delete a specific resource.\n\nFinalized resources or those linked to active registrations may not be deletable.\n",
        "tags": [
          "Resources"
        ],
        "operationId": "deleteResource",
        "parameters": [
          {
            "name": "resource_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the resource to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "Resource deleted successfully. No content returned."
          },
          "401": {
            "description": "Authentication required."
          },
          "403": {
            "description": "Permission denied or resource cannot be deleted."
          },
          "404": {
            "description": "Resource not found."
          }
        }
      }
    },
    "/subjects/": {
      "get": {
        "summary": "List available taxonomy subjects",
        "description": "Retrieve a list of taxonomy subjects. Subjects categorize content on the OSF.\nThis endpoint returns top-level subjects (those not linked to bepress subjects).\n\n### Permissions\n- Publicly accessible (no authentication required).\n",
        "operationId": "listSubjects",
        "tags": [
          "Subjects"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "filter[text]",
            "in": "query",
            "description": "Filter subjects by matching text.",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter[parent]",
            "in": "query",
            "description": "Filter subjects by parent subject ID.",
            "required": false,
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for paginated results.",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results per page (no max page size).",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of subjects.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "abc123"
                      },
                      "type": {
                        "type": "string",
                        "example": "subjects"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "example": "Climate Change",
                            "description": "The label for this subject."
                          },
                          "taxonomy_name": {
                            "type": "string",
                            "example": "OSF",
                            "description": "The taxonomy this subject belongs to."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "parent": {
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "parent123"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "subjects"
                                  }
                                }
                              }
                            },
                            "description": "The parent subject, if any."
                          },
                          "children": {
                            "type": "object",
                            "properties": {
                              "data": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "example": "child123"
                                    },
                                    "type": {
                                      "type": "string",
                                      "example": "subjects"
                                    }
                                  }
                                }
                              }
                            },
                            "description": "Array of child subjects."
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/subjects/"
                    },
                    "next": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/subjects/?page=2"
                    },
                    "prev": {
                      "type": "string",
                      "example": null
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 100,
                      "description": "Total number of subjects."
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10,
                      "description": "Number of results per page."
                    },
                    "page": {
                      "type": "integer",
                      "example": 1,
                      "description": "Current page number."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid filter or pagination parameters)"
          }
        }
      }
    },
    "/subjects/{subject_id}/": {
      "get": {
        "summary": "Retrieve a single taxonomy subject",
        "description": "Retrieve detailed information about a specific taxonomy subject by its ID.\n\n### Permissions\n - Publicly accessible (no authentication required).\n",
        "operationId": "retrieveSubject",
        "tags": [
          "Subjects"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "subject_id",
            "in": "path",
            "description": "The unique identifier of the subject.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the subject.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "abc123",
                      "description": "The unique ID of the subject."
                    },
                    "type": {
                      "type": "string",
                      "example": "subjects",
                      "description": "The resource type."
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "text": {
                          "type": "string",
                          "example": "Climate Change",
                          "description": "Human-readable label for the subject."
                        },
                        "taxonomy_name": {
                          "type": "string",
                          "example": "OSF",
                          "description": "The taxonomy classification this subject belongs to."
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "parent": {
                          "type": "object",
                          "description": "The parent subject of this subject (if any).",
                          "properties": {
                            "data": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "example": "parent123",
                                  "description": "ID of the parent subject."
                                },
                                "type": {
                                  "type": "string",
                                  "example": "subjects",
                                  "description": "Resource type (subjects)."
                                }
                              }
                            }
                          }
                        },
                        "children": {
                          "type": "object",
                          "description": "The direct children subjects of this subject.",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "child123",
                                    "description": "ID of the child subject."
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "subjects",
                                    "description": "Resource type (subjects)."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/subjects/abc123/",
                      "description": "Canonical link to this subject resource."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Subject not found."
          }
        }
      }
    },
    "/subjects/{subject_id}/children/": {
      "get": {
        "summary": "List child subjects for a given subject",
        "description": "Retrieve all immediate child taxonomy subjects of the specified parent subject.\n\nTaxonomy subjects are structured hierarchically. This endpoint returns only the direct descendants (children) of the given subject.\n\n### Permissions\n- Publicly accessible (no authentication required).\n",
        "operationId": "listSubjectChildren",
        "tags": [
          "Subjects"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "subject_id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the parent taxonomy subject."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of child subjects.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "child123",
                        "description": "Unique identifier for the subject."
                      },
                      "type": {
                        "type": "string",
                        "example": "subjects",
                        "description": "The resource type."
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "example": "Sub-discipline Example",
                            "description": "Human-readable name of the subject."
                          },
                          "taxonomy_name": {
                            "type": "string",
                            "example": "OSF",
                            "description": "Name of the taxonomy this subject belongs to."
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "parent": {
                            "type": "object",
                            "description": "The parent of this subject.",
                            "properties": {
                              "data": {
                                "type": "object",
                                "required": [
                                  "id",
                                  "type"
                                ],
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "abc123",
                                    "description": "ID of the parent subject."
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "subjects",
                                    "description": "The resource type (subjects)."
                                  }
                                }
                              }
                            }
                          },
                          "children": {
                            "type": "object",
                            "description": "Nested relationship to this subject’s own children.",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "example": "https://api.osf.io/v2/subjects/child123/children/",
                                    "description": "Link to this subject's own children."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "description": "Pagination links.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/subjects/{subject_id}/children/"
                    },
                    "next": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/subjects/{subject_id}/children/?page=2"
                    },
                    "prev": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/subjects/{subject_id}/children/?page=1"
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "description": "Pagination metadata.",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 20,
                      "description": "Total number of child subjects available."
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10,
                      "description": "Number of results returned per page."
                    },
                    "page": {
                      "type": "integer",
                      "example": 1,
                      "description": "Current page number."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Parent subject not found."
          }
        }
      }
    },
    "/guids/{guid_id}/": {
      "get": {
        "summary": "Retrieve a GUID resource or redirect to its referent resource",
        "description": "Retrieve a GUID object or be redirected to the most appropriate resource.\n\nBy default, this endpoint redirects (`302 Found`) to the resource URL associated with the GUID.\nIf `?resolve=false` is passed, it returns the GUID resource object instead of redirecting.\n\nGUIDs may reference nodes, registrations, files, collections, preprints, or users.\n\n### Redirect Behavior\n- If the GUID refers to a supported resource, this will redirect to its detail endpoint.\n- If it refers to an unsupported type (e.g., wiki), `501 Not Implemented` is returned.\n- If the GUID is invalid or deleted, a `404` or `410` is returned.\n\n### JSON Response Behavior\n- If `resolve=false` is used, a `200 OK` is returned with the GUID resource object.\n\n### Permissions\n- Public GUIDs are accessible without authentication.\n- Private GUIDs require appropriate access permissions.\n",
        "operationId": "retrieveGuid",
        "tags": [
          "GUIDs"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "guid_id",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The unique identifier for the GUID."
          },
          {
            "name": "resolve",
            "in": "query",
            "type": "boolean",
            "required": false,
            "description": "If true (default), redirect to the referent resource.\nIf false, return a representation of the GUID resource.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the GUID resource.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "id",
                    "type",
                    "attributes",
                    "relationships",
                    "links"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The GUID string.",
                      "example": "abc123"
                    },
                    "type": {
                      "type": "string",
                      "description": "The type of this resource.",
                      "example": "guids"
                    },
                    "attributes": {
                      "type": "object",
                      "description": "Optional metadata (usually empty).",
                      "example": {}
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "referent": {
                          "type": "object",
                          "description": "The resource this GUID points to.",
                          "properties": {
                            "links": {
                              "type": "object",
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "example": "https://api.osf.io/v2/nodes/abc123/"
                                }
                              }
                            },
                            "meta": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Resource type of the referent.",
                                  "example": "nodes"
                                }
                              }
                            }
                          }
                        },
                        "custom_metadata": {
                          "type": "object",
                          "description": "Link to any associated custom metadata record.",
                          "properties": {
                            "links": {
                              "type": "object",
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "example": "https://api.osf.io/v2/custom_file_metadata_records/abc123/"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "https://api.osf.io/v2/guids/abc123/",
                          "description": "API link to this GUID resource."
                        },
                        "html": {
                          "type": "string",
                          "example": "https://osf.io/abc123/",
                          "description": "Public web URL of this resource."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "302": {
            "description": "Redirects to the referent resource if `resolve=true` or omitted."
          },
          "401": {
            "description": "Authentication required."
          },
          "403": {
            "description": "You do not have permission to view this GUID."
          },
          "404": {
            "description": "GUID not found."
          },
          "410": {
            "description": "The GUID has been deleted."
          }
        }
      }
    },
    "/files/{file_id}/cedar_metadata_records/": {
      "post": {
        "summary": "Create a CEDAR metadata record for a file",
        "description": "Create a new CEDAR metadata record for the specified file. CEDAR metadata records follow structured templates and can include rich metadata for data sharing and reuse.\n",
        "operationId": "createCedarMetadataRecordForFile",
        "tags": [
          "CEDAR Metadata"
        ],
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The unique identifier of the file.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "CEDAR metadata record object to be created.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "cedar-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "metadata",
                        "is_published"
                      ],
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "description": "Metadata fields defined by the CEDAR template.",
                          "example": {
                            "title": "Example Title",
                            "description": "Example Description"
                          }
                        },
                        "is_published": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "required": [
                        "template"
                      ],
                      "properties": {
                        "template": {
                          "type": "object",
                          "description": "The CEDAR template this record uses.",
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "id",
                                "type"
                              ],
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the template.",
                                  "example": "123abc"
                                },
                                "type": {
                                  "type": "string",
                                  "example": "cedar-metadata-templates"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a new CEDAR metadata record.",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "record-abc123"
                },
                "type": {
                  "type": "string",
                  "example": "cedar-metadata-records"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "description": "The metadata object.",
                      "example": {
                        "title": "Example Title",
                        "description": "Example Description"
                      }
                    },
                    "is_published": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "template-abc123"
                            },
                            "type": {
                              "type": "string",
                              "example": "cedar-metadata-templates"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/_/cedar_metadata_records/record-abc123/"
                    },
                    "metadata_download": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/_/cedar_metadata_records/record-abc123/metadata_download/"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid data."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to create metadata for this file."
          },
          "404": {
            "description": "File not found."
          }
        }
      }
    },
    "/nodes/{node_id}/cedar_metadata_records/": {
      "post": {
        "summary": "Create a CEDAR metadata record for a node",
        "description": "Create a new CEDAR metadata record for the specified node. CEDAR metadata records are based on predefined templates and can be associated with nodes or files.\n",
        "operationId": "createCedarMetadataRecordForNode",
        "tags": [
          "CEDAR Metadata"
        ],
        "consumes": [
          "application/vnd.api+json"
        ],
        "produces": [
          "application/vnd.api+json"
        ],
        "parameters": [
          {
            "name": "node_id",
            "in": "path",
            "description": "The unique identifier of the node.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "CEDAR metadata record object to be created.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "cedar-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "metadata",
                        "is_published"
                      ],
                      "properties": {
                        "metadata": {
                          "type": "object",
                          "description": "Metadata fields defined by the CEDAR template.",
                          "example": {
                            "title": "Example Title",
                            "description": "Example Description"
                          }
                        },
                        "is_published": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "required": [
                        "template"
                      ],
                      "properties": {
                        "template": {
                          "type": "object",
                          "description": "The CEDAR template this record uses.",
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "id",
                                "type"
                              ],
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the template.",
                                  "example": "123abc"
                                },
                                "type": {
                                  "type": "string",
                                  "example": "cedar-metadata-templates"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a new CEDAR metadata record.",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "example": "record-abc123"
                },
                "type": {
                  "type": "string",
                  "example": "cedar-metadata-records"
                },
                "attributes": {
                  "type": "object",
                  "properties": {
                    "metadata": {
                      "type": "object",
                      "description": "The metadata object.",
                      "example": {
                        "title": "Example Title",
                        "description": "Example Description"
                      }
                    },
                    "is_published": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "properties": {
                    "template": {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "template-abc123"
                            },
                            "type": {
                              "type": "string",
                              "example": "cedar-metadata-templates"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/_/cedar_metadata_records/record-abc123/"
                    },
                    "metadata_download": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/_/cedar_metadata_records/record-abc123/metadata_download/"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid data."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to create metadata for this node."
          },
          "404": {
            "description": "Node not found."
          }
        }
      }
    },
    "/custom_file_metadata_records/{file_id}/": {
      "get": {
        "summary": "Retrieve custom file metadata for a file",
        "description": "Retrieve a custom file metadata record associated with a specific file by its GUID. Custom file metadata includes fields such as title, description, language, and funding information.\n",
        "operationId": "getCustomFileMetadataRecord",
        "tags": [
          "Custom Metadata"
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The unique identifier of the file.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved custom file metadata record.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The resource type.",
                      "example": "custom-file-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The title of the file.",
                          "example": "My Dataset File"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the file.",
                          "example": "This file contains raw data collected from fieldwork."
                        },
                        "language": {
                          "type": "string",
                          "description": "The language of the content.",
                          "example": "en"
                        },
                        "resource_type_general": {
                          "type": "string",
                          "description": "The general type of the resource.",
                          "example": "Dataset"
                        },
                        "funders": {
                          "type": "array",
                          "description": "Information about funding sources.",
                          "items": {
                            "type": "object",
                            "required": [
                              "funder_name"
                            ],
                            "properties": {
                              "funder_name": {
                                "type": "string",
                                "example": "National Science Foundation"
                              },
                              "funder_identifier": {
                                "type": "string",
                                "example": "123456"
                              },
                              "funder_identifier_type": {
                                "type": "string",
                                "enum": [
                                  "ISNI",
                                  "GRID",
                                  "Crossref Funder ID",
                                  "ROR",
                                  "Other"
                                ],
                                "example": "ROR"
                              },
                              "award_number": {
                                "type": "string",
                                "example": "NSF-1234"
                              },
                              "award_uri": {
                                "type": "string",
                                "example": "https://nsf.gov/awardsearch/showAward?AWD_ID=1234"
                              },
                              "award_title": {
                                "type": "string",
                                "example": "Climate Change Research Grant"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to access this metadata record."
          },
          "404": {
            "description": "Metadata record not found."
          }
        }
      },
      "patch": {
        "summary": "Update custom file metadata for a file",
        "description": "Update an existing custom file metadata record. Editable fields include title, description, language, resource type, and funding information.\n",
        "operationId": "updateCustomFileMetadataRecord",
        "tags": [
          "Custom Metadata"
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "description": "The unique identifier of the file.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Custom file metadata record object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The resource type.",
                      "example": "custom-file-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The title of the file.",
                          "example": "My Dataset File"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the file.",
                          "example": "This file contains raw data collected from fieldwork."
                        },
                        "language": {
                          "type": "string",
                          "description": "The language of the content.",
                          "example": "en"
                        },
                        "resource_type_general": {
                          "type": "string",
                          "description": "The general type of the resource.",
                          "example": "Dataset"
                        },
                        "funders": {
                          "type": "array",
                          "description": "Information about funding sources.",
                          "items": {
                            "type": "object",
                            "required": [
                              "funder_name"
                            ],
                            "properties": {
                              "funder_name": {
                                "type": "string",
                                "example": "National Science Foundation"
                              },
                              "funder_identifier": {
                                "type": "string",
                                "example": "123456"
                              },
                              "funder_identifier_type": {
                                "type": "string",
                                "enum": [
                                  "ISNI",
                                  "GRID",
                                  "Crossref Funder ID",
                                  "ROR",
                                  "Other"
                                ],
                                "example": "ROR"
                              },
                              "award_number": {
                                "type": "string",
                                "example": "NSF-1234"
                              },
                              "award_uri": {
                                "type": "string",
                                "example": "https://nsf.gov/awardsearch/showAward?AWD_ID=1234"
                              },
                              "award_title": {
                                "type": "string",
                                "example": "Climate Change Research Grant"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated custom file metadata record.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The resource type.",
                      "example": "custom-file-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The title of the file.",
                          "example": "My Dataset File"
                        },
                        "description": {
                          "type": "string",
                          "description": "A description of the file.",
                          "example": "This file contains raw data collected from fieldwork."
                        },
                        "language": {
                          "type": "string",
                          "description": "The language of the content.",
                          "example": "en"
                        },
                        "resource_type_general": {
                          "type": "string",
                          "description": "The general type of the resource.",
                          "example": "Dataset"
                        },
                        "funders": {
                          "type": "array",
                          "description": "Information about funding sources.",
                          "items": {
                            "type": "object",
                            "required": [
                              "funder_name"
                            ],
                            "properties": {
                              "funder_name": {
                                "type": "string",
                                "example": "National Science Foundation"
                              },
                              "funder_identifier": {
                                "type": "string",
                                "example": "123456"
                              },
                              "funder_identifier_type": {
                                "type": "string",
                                "enum": [
                                  "ISNI",
                                  "GRID",
                                  "Crossref Funder ID",
                                  "ROR",
                                  "Other"
                                ],
                                "example": "ROR"
                              },
                              "award_number": {
                                "type": "string",
                                "example": "NSF-1234"
                              },
                              "award_uri": {
                                "type": "string",
                                "example": "https://nsf.gov/awardsearch/showAward?AWD_ID=1234"
                              },
                              "award_title": {
                                "type": "string",
                                "example": "Climate Change Research Grant"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid data."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to modify this metadata record."
          },
          "404": {
            "description": "Metadata record not found."
          }
        }
      }
    },
    "/custom_item_metadata_records/{guid_id}/": {
      "get": {
        "summary": "Retrieve custom item metadata for a node or preprint",
        "description": "Retrieve a custom item metadata record associated with a node or preprint by its GUID. Custom item metadata includes fields like language, resource type, and funding information.\n",
        "operationId": "getCustomItemMetadataRecord",
        "tags": [
          "Custom Metadata"
        ],
        "parameters": [
          {
            "name": "guid_id",
            "in": "path",
            "description": "The unique identifier (GUID) of the node or preprint.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved custom item metadata record.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The resource type.",
                      "example": "custom-item-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string",
                          "description": "The language of the content.",
                          "example": "en"
                        },
                        "resource_type_general": {
                          "type": "string",
                          "description": "The general type of the resource.",
                          "example": "Dataset"
                        },
                        "funders": {
                          "type": "array",
                          "description": "Information about funding sources.",
                          "items": {
                            "type": "object",
                            "required": [
                              "funder_name"
                            ],
                            "properties": {
                              "funder_name": {
                                "type": "string",
                                "example": "National Science Foundation"
                              },
                              "funder_identifier": {
                                "type": "string",
                                "example": "123456"
                              },
                              "funder_identifier_type": {
                                "type": "string",
                                "enum": [
                                  "ISNI",
                                  "GRID",
                                  "Crossref Funder ID",
                                  "ROR",
                                  "Other"
                                ],
                                "example": "ROR"
                              },
                              "award_number": {
                                "type": "string",
                                "example": "NSF-1234"
                              },
                              "award_uri": {
                                "type": "string",
                                "example": "https://nsf.gov/awardsearch/showAward?AWD_ID=1234"
                              },
                              "award_title": {
                                "type": "string",
                                "example": "Climate Change Research Grant"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to access this metadata record."
          },
          "404": {
            "description": "Metadata record not found."
          }
        }
      },
      "patch": {
        "summary": "Update custom item metadata for a node or preprint",
        "description": "Update an existing custom item metadata record for a node or preprint. Editable fields include language, resource type, and funding information.\n",
        "operationId": "updateCustomItemMetadataRecord",
        "tags": [
          "Custom Metadata"
        ],
        "parameters": [
          {
            "name": "guid_id",
            "in": "path",
            "description": "The unique identifier (GUID) of the node or preprint.",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Custom item metadata record object.",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The resource type.",
                      "example": "custom-item-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string",
                          "description": "The language of the content.",
                          "example": "en"
                        },
                        "resource_type_general": {
                          "type": "string",
                          "description": "The general type of the resource.",
                          "example": "Dataset"
                        },
                        "funders": {
                          "type": "array",
                          "description": "Information about funding sources.",
                          "items": {
                            "type": "object",
                            "required": [
                              "funder_name"
                            ],
                            "properties": {
                              "funder_name": {
                                "type": "string",
                                "example": "National Science Foundation"
                              },
                              "funder_identifier": {
                                "type": "string",
                                "example": "123456"
                              },
                              "funder_identifier_type": {
                                "type": "string",
                                "enum": [
                                  "ISNI",
                                  "GRID",
                                  "Crossref Funder ID",
                                  "ROR",
                                  "Other"
                                ],
                                "example": "ROR"
                              },
                              "award_number": {
                                "type": "string",
                                "example": "NSF-1234"
                              },
                              "award_uri": {
                                "type": "string",
                                "example": "https://nsf.gov/awardsearch/showAward?AWD_ID=1234"
                              },
                              "award_title": {
                                "type": "string",
                                "example": "Climate Change Research Grant"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated custom item metadata record.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The resource type.",
                      "example": "custom-item-metadata-records"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "language": {
                          "type": "string",
                          "description": "The language of the content.",
                          "example": "en"
                        },
                        "resource_type_general": {
                          "type": "string",
                          "description": "The general type of the resource.",
                          "example": "Dataset"
                        },
                        "funders": {
                          "type": "array",
                          "description": "Information about funding sources.",
                          "items": {
                            "type": "object",
                            "required": [
                              "funder_name"
                            ],
                            "properties": {
                              "funder_name": {
                                "type": "string",
                                "example": "National Science Foundation"
                              },
                              "funder_identifier": {
                                "type": "string",
                                "example": "123456"
                              },
                              "funder_identifier_type": {
                                "type": "string",
                                "enum": [
                                  "ISNI",
                                  "GRID",
                                  "Crossref Funder ID",
                                  "ROR",
                                  "Other"
                                ],
                                "example": "ROR"
                              },
                              "award_number": {
                                "type": "string",
                                "example": "NSF-1234"
                              },
                              "award_uri": {
                                "type": "string",
                                "example": "https://nsf.gov/awardsearch/showAward?AWD_ID=1234"
                              },
                              "award_title": {
                                "type": "string",
                                "example": "Climate Change Research Grant"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error or invalid data."
          },
          "401": {
            "description": "Authentication credentials were not provided or are invalid."
          },
          "403": {
            "description": "You do not have permission to modify this metadata record."
          },
          "404": {
            "description": "Metadata record not found."
          }
        }
      }
    },
    "/subscriptions/": {
      "get": {
        "summary": "Retrieve a List of Notification Subscriptions",
        "description": "Retrieve a paginated list of the authenticated user's notification subscriptions.\nEach subscription describes the user's preferences for receiving notifications about specific events  on OSF resources such as projects, preprints, registrations, or collections.\n## Permissions\n- The authenticated user can only retrieve their own subscriptions. - Authentication is required.\n## Returns\n- A JSON object containing a `data` array of subscription resources, each representing a single subscription. - Each subscription includes details such as the `event_name`, `frequency`, and links to related resources. - The response also includes `links` and `meta` keys for pagination support.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "subscriptions_list",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "The page number of the paginated result set."
          },
          {
            "in": "query",
            "name": "filter[event_name]",
            "type": "string",
            "required": false,
            "description": "Filter subscriptions by `event_name`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the user's notification subscriptions.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "mindrxiv_new_pending_submissions",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "new_pending_submissions",
                      "frequency": "instant"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/mindrxiv_new_pending_submissions/"
                    }
                  },
                  {
                    "id": "eartharxiv_new_pending_submissions",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "new_pending_submissions",
                      "frequency": "instant"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/eartharxiv_new_pending_submissions/"
                    }
                  },
                  {
                    "id": "osf.io/preprints/africar_new_pending_submissions",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "new_pending_submissions",
                      "frequency": "instant"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/osf.io/preprints/africar_new_pending_submissions/"
                    }
                  },
                  {
                    "id": "ydhnf_global_comment_replies",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "global_comment_replies",
                      "frequency": "none"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/ydhnf_global_comment_replies/"
                    }
                  },
                  {
                    "id": "ydhnf_global_comments",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "global_comments",
                      "frequency": "daily"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/ydhnf_global_comments/"
                    }
                  },
                  {
                    "id": "ydhnf_global_file_updated",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "global_file_updated",
                      "frequency": "daily"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/ydhnf_global_file_updated/"
                    }
                  },
                  {
                    "id": "ydhnf_global_mentions",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "global_mentions",
                      "frequency": "instant"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/ydhnf_global_mentions/"
                    }
                  },
                  {
                    "id": "ydhnf_global_reviews",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "global_reviews",
                      "frequency": "daily"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/ydhnf_global_reviews/"
                    }
                  },
                  {
                    "id": "vbks5_file_updated",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "file_updated",
                      "frequency": "instant"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/vbks5_file_updated/"
                    }
                  },
                  {
                    "id": "vbks5_comments",
                    "type": "subscription",
                    "attributes": {
                      "event_name": "comments",
                      "frequency": "instant"
                    },
                    "links": {
                      "self": "https://api.test.osf.io/v2/subscriptions/vbks5_comments/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.test.osf.io/v2/subscriptions/?page=1",
                  "first": "https://api.test.osf.io/v2/subscriptions/?page=1",
                  "prev": null,
                  "next": "https://api.test.osf.io/v2/subscriptions/?page=2",
                  "last": "https://api.test.osf.io/v2/subscriptions/?page=4"
                },
                "meta": {
                  "total": 33,
                  "per_page": 10,
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access these subscriptions."
          },
          "404": {
            "description": "Not Found. No subscriptions found for the user."
          }
        }
      }
    },
    "/subscriptions/{subscription_id}/": {
      "get": {
        "summary": "Retrieve a Notification Subscription",
        "description": "Retrieve the details of a specific notification subscription, including its event name and notification frequency.\n#### Permissions - The authenticated user must be the owner of the subscription.\n#### Returns - A JSON object with a `data` key containing the subscription details. - Each subscription describes the event being subscribed to and the frequency at which notifications are sent.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "subscription_detail",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the subscription.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "{subscription_id}",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "global_mentions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.test.osf.io/v2/subscriptions/{subscription_id}/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access this subscription."
          },
          "404": {
            "description": "Not Found. No subscription matches the given ID."
          }
        }
      },
      "patch": {
        "summary": "Update a Notification Subscription",
        "description": "Update the notification frequency for a specific subscription. Only the frequency attribute can be modified.\n## Permissions\n- The authenticated user must be the owner of the subscription.\n## Request Body\nProvide the `frequency` attribute within the `attributes` object to update the subscription. Available values for `frequency` are:\n  - `instant`: Receive immediate email notifications.\n  - `daily`: Receive a daily summary email.\n  - `none`: Disable email notifications for this subscription.\n\n## Returns\n- A JSON object with the updated subscription details under the `data` key if the update is successful. - If unsuccessful, returns an `errors` object detailing the validation issues.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "subscription_update",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "subscription"
                      ],
                      "description": "Must be `subscription`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the subscription."
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "frequency"
                      ],
                      "properties": {
                        "frequency": {
                          "type": "string",
                          "enum": [
                            "instant",
                            "daily",
                            "none"
                          ],
                          "description": "The notification frequency for this subscription.\n- `instant`: Immediate email notifications.\n- `daily`: Daily summary emails.\n- `none`: No notifications.\n"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "subscription",
                  "id": "{subscription_id}",
                  "attributes": {
                    "frequency": "daily"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription successfully updated.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "{subscription_id}",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "global_mentions",
                    "frequency": "daily"
                  },
                  "links": {
                    "self": "https://api.test.osf.io/v2/subscriptions/{subscription_id}/"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input provided."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify this subscription."
          },
          "404": {
            "description": "Not Found. No subscription matches the given ID."
          }
        }
      }
    },
    "/providers/collections/{provider_id}/subscriptions/": {
      "get": {
        "summary": "List Notification Subscriptions for a Collection Provider",
        "description": "Retrieve a paginated list of notification subscriptions associated with a specific collection provider for the authenticated user.\nEach subscription resource represents the user's notification preferences for specific events (e.g., new pending submissions) within the specified collection provider.\n## Permissions\n - The user must be authenticated.\n - The user must have existing subscriptions for the specified collection provider.\n\n## Response Format\n - Returns a JSON:API compliant response with a `data` array containing subscription resources.\n - Each subscription includes:\n   - `event_name`: The event that triggers notifications (e.g., `new_pending_submissions`).\n   - `frequency`: How often notifications are sent (`instant`, `daily`, `none`).\n   - `provider`: Relationship object linking to the collection provider.\n\n## Pagination\n - Standard JSON:API pagination links (`first`, `last`, `prev`, `next`) and `meta` information\n  (e.g., `total`, `per_page`) are included in the response.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "provider_id",
            "required": true,
            "description": "The unique identifier of the collection provider."
          }
        ],
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "collection_provider_subscription_list",
        "responses": {
          "200": {
            "description": "Successful response with a paginated list of subscriptions.",
            "examples": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Subscription",
                  "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
                  "properties": {
                    "id": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                    },
                    "type": {
                      "type": "string",
                      "readOnly": true,
                      "enum": [
                        "subscription"
                      ],
                      "description": "The type identifier of this resource. Always `subscription`.\n"
                    },
                    "attributes": {
                      "type": "object",
                      "title": "Attributes",
                      "description": "Attributes describing the subscription event and notification frequency.\n",
                      "properties": {
                        "event_name": {
                          "type": "string",
                          "readOnly": true,
                          "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                        },
                        "frequency": {
                          "type": "string",
                          "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                          "enum": [
                            "instant",
                            "daily",
                            "none"
                          ]
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "title": "Relationships",
                      "description": "Links to related resources: the user and (optionally) a provider.\n",
                      "properties": {
                        "user": {
                          "type": "object",
                          "description": "The user associated with this subscription.\n",
                          "properties": {
                            "links": {
                              "type": "object",
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "A link to the user resource.\n"
                                }
                              }
                            },
                            "data": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "users"
                                  ],
                                  "description": "The resource type (`users`).\n"
                                },
                                "id": {
                                  "type": "string",
                                  "description": "The unique identifier of the user.\n"
                                }
                              }
                            }
                          }
                        },
                        "provider": {
                          "type": "object",
                          "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                          "properties": {
                            "links": {
                              "type": "object",
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "format": "uri",
                                  "description": "A link to the provider resource.\n"
                                }
                              }
                            },
                            "data": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "providers"
                                  ],
                                  "description": "The resource type (`providers`).\n"
                                },
                                "id": {
                                  "type": "string",
                                  "description": "The unique identifier of the provider.\n"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "title": "Links",
                      "description": "Links to alternative representations or actions for the Subscription resource.\n",
                      "properties": {
                        "self": {
                          "type": "string",
                          "format": "uri",
                          "description": "A link to the detail page for this subscription.\n"
                        }
                      }
                    }
                  },
                  "example": {
                    "data": {
                      "id": "abcd1234",
                      "type": "subscription",
                      "attributes": {
                        "event_name": "new_pending_submissions",
                        "frequency": "instant"
                      },
                      "relationships": {
                        "user": {
                          "data": {
                            "type": "users",
                            "id": "user_id"
                          },
                          "links": {
                            "related": "https://api.osf.io/v2/users/user_id/"
                          }
                        },
                        "provider": {
                          "data": {
                            "type": "providers",
                            "id": "provider_id"
                          },
                          "links": {
                            "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                          }
                        }
                      },
                      "links": {
                        "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. The user does not have permission to access subscriptions for this provider."
          },
          "404": {
            "description": "Not Found. The specified collection provider does not exist or has no subscriptions for the user."
          }
        }
      }
    },
    "/providers/collections/{provider_id}/subscriptions/{subscription_id}/": {
      "get": {
        "summary": "Retrieve a Collection Provider Notification Subscription",
        "description": "Retrieve the details of a specific notification subscription associated with a collection provider.\n## Permissions\n - The authenticated user must be the owner of the subscription.\n\n## Returns\n - A JSON object with a `data` key containing the subscription details.\n - Each subscription describes the event being subscribed to and the frequency at which notifications are sent.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "collection_provider_subscription_detail",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the collection provider."
          },
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of the subscription.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "collection123_subscription456",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "collection123"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/providers/collections/collection123/subscriptions/collection123_subscription456/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access this subscription."
          },
          "404": {
            "description": "Not Found. No subscription matches the given ID or the collection provider does not exist."
          }
        }
      },
      "patch": {
        "summary": "Update a Collection Provider Notification Subscription",
        "description": "Update the notification frequency for a specific subscription associated with a collection provider.\n#### Permissions - The authenticated user must be the owner of the subscription.\n#### Request Body Provide the `frequency` attribute within the `attributes` object to update the subscription.\n#### Available Frequency Values:\n - `instant`: Immediate email notifications.\n - `daily`: Daily summary emails.\n - `none`: Disable email notifications.\n\n#### Returns - A JSON object with the updated subscription details under the `data` key if the update is successful. - If unsuccessful, returns an `errors` object detailing the validation issues.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "collection_provider_subscription_patch",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the collection provider."
          },
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "subscription"
                      ],
                      "description": "Must be `subscription`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the subscription."
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "frequency"
                      ],
                      "properties": {
                        "frequency": {
                          "type": "string",
                          "enum": [
                            "instant",
                            "daily",
                            "none"
                          ],
                          "description": "The notification frequency for this subscription.\n- `instant`: Immediate email notifications.\n- `daily`: Daily summary emails.\n- `none`: No notifications.\n"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "subscription",
                  "id": "collection123_subscription456",
                  "attributes": {
                    "frequency": "daily"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription successfully updated.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "collection123_subscription456",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "daily"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "collection123"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/providers/collections/collection123/subscriptions/collection123_subscription456/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input provided or missing required fields."
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid."
          },
          "403": {
            "description": "Forbidden. You do not have permission to update this subscription."
          },
          "404": {
            "description": "Not Found. No subscription matches the given ID or the collection provider does not exist."
          }
        }
      }
    },
    "/providers/preprints/{provider_id}/subscriptions/": {
      "get": {
        "summary": "List Preprint Provider Subscriptions",
        "description": "Retrieve a paginated list of notification subscriptions for a specific preprint provider associated with the authenticated user.\n## Permissions\nUser must be authenticated and must have subscriptions for the specified preprint provider.\n## Returns\nA JSON object with a paginated list of notification subscriptions, including subscription frequency, event type, and provider details.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "provider_id",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "query",
            "type": "integer",
            "name": "page",
            "required": false,
            "description": "The page number of results to retrieve."
          }
        ],
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "preprint_provider_subscription_list",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/providers/preprints/{provider_id}/subscriptions/{subscription_id}/": {
      "get": {
        "summary": "Retrieve a Preprint Provider Subscription",
        "description": "Retrieve details of an individual notification subscription associated with a preprint provider.\n## Permissions\nUser must be authenticated and subscribed to the specified preprint provider notification.\n## Returns\nA JSON object containing details about the requested subscription, including frequency, event type, and provider information.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "provider_id",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "path",
            "type": "string",
            "name": "subscription_id",
            "required": true,
            "description": "The unique identifier of the subscription."
          }
        ],
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "preprint_provider_subscription_detail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "provider123_subscription456"
                    },
                    "type": {
                      "type": "string",
                      "example": "notification_subscriptions"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "frequency": {
                          "type": "string",
                          "enum": [
                            "none",
                            "email_digest",
                            "email_transactional"
                          ]
                        },
                        "event_name": {
                          "type": "string",
                          "example": "preprint_added"
                        },
                        "provider_name": {
                          "type": "string",
                          "example": "TestArXiv"
                        },
                        "provider_id": {
                          "type": "string",
                          "example": "testarxiv"
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://api.osf.io/v2/providers/preprints/testarxiv/subscriptions/provider123_subscription456/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "summary": "Update a Preprint Provider Subscription",
        "description": "Updates a preprint provider subscription by setting the values specified in the request body.  Unspecified attributes remain unchanged.\nThe subscription can be updated using a **PATCH** request. The only editable attribute is `frequency`.\n## Permissions\nUser must be authenticated and the owner of the subscription.\n## Returns\nA JSON object containing the updated subscription details.",
        "parameters": [
          {
            "in": "path",
            "type": "string",
            "name": "provider_id",
            "required": true,
            "description": "The unique identifier of the preprint provider."
          },
          {
            "in": "path",
            "type": "string",
            "name": "subscription_id",
            "required": true,
            "description": "The unique identifier of the subscription."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "notification_subscriptions",
                  "id": "provider123_subscription456",
                  "attributes": {
                    "frequency": "email_digest"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "preprint_provider_subscription_update",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "provider123_subscription456"
                    },
                    "type": {
                      "type": "string",
                      "example": "notification_subscriptions"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "frequency": {
                          "type": "string",
                          "enum": [
                            "none",
                            "email_digest",
                            "email_transactional"
                          ]
                        },
                        "event_name": {
                          "type": "string",
                          "example": "preprint_added"
                        },
                        "provider_name": {
                          "type": "string",
                          "example": "TestArXiv"
                        },
                        "provider_id": {
                          "type": "string",
                          "example": "testarxiv"
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://api.osf.io/v2/providers/preprints/testarxiv/subscriptions/provider123_subscription456/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/subscriptions/": {
      "get": {
        "summary": "List Registration Provider Subscriptions",
        "description": "Retrieve a list of notification subscriptions for a specific registration provider associated with the authenticated user.\n## Permissions\nUser must be authenticated to access their registration provider subscriptions.\n## Returns\nA paginated JSON object containing notification subscriptions for the registration provider.",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration provider."
          },
          {
            "in": "query",
            "name": "page",
            "type": "integer",
            "required": false,
            "description": "Page number of the results to retrieve."
          }
        ],
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "registration_subscription_list",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/providers/registrations/{provider_id}/subscriptions/{subscription_id}/": {
      "get": {
        "summary": "Retrieve a Registration Provider Notification Subscription",
        "description": "Retrieve the details of a specific notification subscription associated with a registration provider.\nThis endpoint allows an authenticated user to view their current subscription preferences for events related to a specific registration provider.\n## Permissions\n - The requesting user **must be authenticated**.\n - The requesting user **must be the owner** of the subscription.\n\nUnauthorized or forbidden access attempts will result in `401 Unauthorized` or `403 Forbidden` errors.\n## Returns A JSON object representing the notification subscription, including:\n\n - `id`: Unique identifier of the subscription.\n - `type`: Resource type (always `subscription`).\n - `attributes`: Event type and notification frequency.\n - `relationships`: Links to the associated user and provider resources.\n - `links`: A `self` link to this subscription resource.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "registration_provider_subscription_detail",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration provider associated with this subscription."
          },
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription successfully retrieved.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "reg123_subscription456",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "reg123"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/providers/registrations/reg123/subscriptions/reg123_subscription456/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid."
          },
          "403": {
            "description": "Forbidden. You do not have permission to access this subscription."
          },
          "404": {
            "description": "Not Found. The subscription or provider does not exist."
          }
        }
      },
      "patch": {
        "summary": "Update a Registration Provider Notification Subscription",
        "description": "Update a specific notification subscription associated with a registration provider. \nTypically, this endpoint is used to change the notification `frequency` for the subscription.\n## Permissions\n - The requesting user **must be authenticated**.\n - The requesting user **must be the owner** of the subscription.\n\nUnauthorized or forbidden access attempts will result in `401 Unauthorized` or `403 Forbidden` errors.\n## Request Body Provide the subscription ID and the updated `frequency` attribute.\n## Available Frequency Values\n - `instant`: Immediate email notifications.\n - `daily`: Daily summary emails.\n - `none`: No notifications.\n\n## Returns A JSON object representing the updated subscription.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "registration_provider_subscription_patch",
        "parameters": [
          {
            "in": "path",
            "name": "provider_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the registration provider associated with this subscription."
          },
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "JSON API-formatted payload specifying the updated subscription attributes.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "subscription"
                      ],
                      "description": "The resource type. Must be `subscription`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the subscription."
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "frequency"
                      ],
                      "properties": {
                        "frequency": {
                          "type": "string",
                          "enum": [
                            "instant",
                            "daily",
                            "none"
                          ],
                          "description": "Determines how frequently the user receives notifications.\n- `instant`: Immediate email notifications.\n- `daily`: Daily summary emails.\n- `none`: No notifications.\n"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "subscription",
                  "id": "reg123_subscription456",
                  "attributes": {
                    "frequency": "daily"
                  }
                }
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Subscription successfully updated.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "reg123_subscription456",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "daily"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "reg123"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/providers/registrations/reg123/subscriptions/reg123_subscription456/"
                  }
                },
                "meta": {
                  "version": "2.0"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The request body is malformed or missing required fields."
          },
          "401": {
            "description": "Unauthorized. Authentication credentials are missing or invalid."
          },
          "403": {
            "description": "Forbidden. You do not have permission to modify this subscription."
          },
          "404": {
            "description": "Not Found. The subscription or provider does not exist."
          }
        }
      }
    },
    "/registration_subscriptions/{subscription_id}/": {
      "get": {
        "summary": "Retrieve a Registration Provider Subscription",
        "description": "Retrieve details of a specific notification subscription for a registration provider.\n## Permissions\nThe user must be authenticated and have permission to access the specified registration provider subscription.\n## Returns\nA JSON object containing details of the notification subscription for the registration provider.",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          }
        ],
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "registration_subscription_detail",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "reg123_subscription456"
                    },
                    "type": {
                      "type": "string",
                      "example": "notification_subscriptions"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "frequency": {
                          "type": "string",
                          "enum": [
                            "none",
                            "email_digest",
                            "email_transactional"
                          ],
                          "example": "email_transactional"
                        },
                        "event_name": {
                          "type": "string",
                          "example": "new_pending_registration"
                        },
                        "provider_name": {
                          "type": "string",
                          "example": "TestRegistrationProvider"
                        },
                        "provider_id": {
                          "type": "string",
                          "example": "reg123"
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://api.osf.io/v2/providers/registrations/reg123/subscriptions/reg123_subscription456/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "summary": "Update a Registration Provider Subscription",
        "description": "Update the frequency of a specific notification subscription for a registration provider.\n## Permissions\nUser must be authenticated and be the owner of the subscription to modify it.\n## Returns\nA JSON object containing the updated details of the notification subscription.",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "example": {
                "data": {
                  "type": "notification_subscriptions",
                  "id": "reg123_subscription456",
                  "attributes": {
                    "frequency": "none"
                  }
                }
              }
            }
          }
        ],
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "registration_subscription_update",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/collection_subscriptions/{subscription_id}/": {
      "get": {
        "summary": "Retrieve a Collection Subscription",
        "description": "Retrieve the details of a specific notification subscription associated with a collection provider.\n## Permissions\n - The authenticated user **must** be the owner of the subscription.\n - Access is restricted to subscriptions owned by the requesting user.\n\n## Returns\n - A JSON:API compliant representation of the subscription resource.\n - Includes event name, frequency, user, provider, and related links.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "collection_subscription_detail",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription successfully retrieved.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "collection123_subscription456",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "collection123"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/collection_subscriptions/collection123_subscription456/"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to view this subscription."
          },
          "404": {
            "description": "Not Found. No subscription found matching the given ID."
          }
        }
      },
      "patch": {
        "summary": "Update a Collection Subscription",
        "description": "Update the notification frequency for a specific collection provider subscription.\n## Permissions\n - The authenticated user **must** be the owner of the subscription.\n - Only the `frequency` attribute can be modified.\n\n## Request Body Provide the `frequency` inside the `attributes` object. Valid values include:\n - `instant`: Immediate email notifications.\n - `daily`: Daily digest emails.\n - `none`: Disable notifications for this event.\n\n## Returns\n - A JSON:API compliant representation of the updated subscription resource.",
        "tags": [
          "Notification Subscriptions"
        ],
        "operationId": "collection_subscription_update",
        "parameters": [
          {
            "in": "path",
            "name": "subscription_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the notification subscription."
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "JSON:API-compliant payload specifying the updated subscription attributes.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "id",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "subscription"
                      ],
                      "description": "Must be `subscription`."
                    },
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the subscription."
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "frequency"
                      ],
                      "properties": {
                        "frequency": {
                          "type": "string",
                          "enum": [
                            "instant",
                            "daily",
                            "none"
                          ],
                          "description": "The notification frequency for this subscription.\n- `instant`: Immediate email notifications.\n- `daily`: Daily digest emails.\n- `none`: No notifications.\n"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "type": "subscription",
                  "id": "collection123_subscription456",
                  "attributes": {
                    "frequency": "daily"
                  }
                }
              }
            }
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Subscription successfully updated.",
            "schema": {
              "type": "object",
              "title": "Subscription",
              "description": "A Subscription resource represents a user's notification preferences for specific events\noccurring on the OSF. Subscriptions can be global or tied to specific providers such as \ncollections, preprints, or registrations.\n",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "The unique identifier of the Subscription.\nThis corresponds to the `_id` field on the NotificationSubscription model.\n"
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "enum": [
                    "subscription"
                  ],
                  "description": "The type identifier of this resource. Always `subscription`.\n"
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "description": "Attributes describing the subscription event and notification frequency.\n",
                  "properties": {
                    "event_name": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The name of the event that triggers this subscription.\nPossible values include:\n  - `global_comments`\n  - `global_mentions`\n  - `global_reviews`\n  - `global_comment_replies`\n  - `comments`\n  - `file_updated`\n  - `new_pending_submissions`\n"
                    },
                    "frequency": {
                      "type": "string",
                      "description": "The notification frequency for the subscribed event.\nAccepted values:\n  - `instant`: Receive email notifications immediately when the event occurs.\n  - `daily`: Receive a daily summary email.\n  - `none`: Do not receive notifications for this subscription.\n",
                      "enum": [
                        "instant",
                        "daily",
                        "none"
                      ]
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "description": "Links to related resources: the user and (optionally) a provider.\n",
                  "properties": {
                    "user": {
                      "type": "object",
                      "description": "The user associated with this subscription.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the user resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "users"
                              ],
                              "description": "The resource type (`users`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the user.\n"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider associated with this subscription.\nThis can be a Collection Provider, Preprint Provider, or Registration Provider.\n",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "uri",
                              "description": "A link to the provider resource.\n"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "providers"
                              ],
                              "description": "The resource type (`providers`).\n"
                            },
                            "id": {
                              "type": "string",
                              "description": "The unique identifier of the provider.\n"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "description": "Links to alternative representations or actions for the Subscription resource.\n",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "A link to the detail page for this subscription.\n"
                    }
                  }
                }
              },
              "example": {
                "data": {
                  "id": "abcd1234",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "instant"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/users/user_id/"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "provider_id"
                      },
                      "links": {
                        "related": "https://api.osf.io/v2/providers/collections/provider_id/"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/subscriptions/abcd1234/"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "collection123_subscription456",
                  "type": "subscription",
                  "attributes": {
                    "event_name": "new_pending_submissions",
                    "frequency": "daily"
                  },
                  "relationships": {
                    "user": {
                      "data": {
                        "type": "users",
                        "id": "user_id"
                      }
                    },
                    "provider": {
                      "data": {
                        "type": "providers",
                        "id": "collection123"
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/collection_subscriptions/collection123_subscription456/"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid input provided."
          },
          "401": {
            "description": "Unauthorized. Authentication is required."
          },
          "403": {
            "description": "Forbidden. You do not have permission to update this subscription."
          },
          "404": {
            "description": "Not Found. No subscription matches the given ID."
          }
        }
      }
    },
    "/regions/": {
      "get": {
        "summary": "List Regions",
        "description": "Retrieves a list of available storage regions within OSF.\nRegions define geographical or cloud storage locations for storing files uploaded through OSF Storage.\n## Returns\n A JSON:API-compliant response containing an array of regions under the `data` key, including region attributes such as `id` and `name`.\n\nSupports standard pagination and sorting by name.\n## Errors\n \nIf unsuccessful, returns an `errors` object. Refer to the [Errors and Error Codes](#tag/Errors-and-Error-Codes) section for details.",
        "tags": [
          "Regions"
        ],
        "operationId": "region_list",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of regions.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "us-east-1"
                      },
                      "type": {
                        "type": "string",
                        "example": "regions"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "US East"
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "example": "https://api.osf.io/v2/regions/us-east-1/"
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 1
                    },
                    "per_page": {
                      "type": "integer",
                      "example": 10
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/regions/"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/regions/{region_id}/": {
      "get": {
        "summary": "Region Detail",
        "description": "Retrieves detailed information for a specific storage region identified by `{region_id}`.\nA storage region defines the geographical or cloud-based location used by OSF Storage for storing files.\n#### Returns\nA JSON:API-compliant response containing a single `region` entity under the `data` key.\n#### Errors\nReturns an `errors` object if unsuccessful:\n  - `404 Not Found`: No region matches the provided `region_id`.",
        "tags": [
          "Regions"
        ],
        "operationId": "region_detail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "region_id",
            "in": "path",
            "description": "The unique identifier for the region.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved region details.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "us-east-1"
                    },
                    "type": {
                      "type": "string",
                      "example": "regions"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "US East"
                        }
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "type": "string",
                          "example": "https://api.osf.io/v2/regions/us-east-1/"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Region not found.",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "detail": {
                        "type": "string",
                        "example": "No region matching that region_id could be found."
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tokens/": {
      "get": {
        "summary": "List Personal Access Tokens",
        "description": "Retrieve a list of active personal access tokens created by the authenticated user.\nPersonal access tokens are used to authenticate requests to the OSF API without user credentials.\n#### Returns A JSON:API-compliant response with an array of personal access token objects under the `data` key.\n#### Errors Returns an `errors` object on failure. See [Errors and Error Codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Tokens"
        ],
        "operationId": "token_list",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of personal access tokens.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "token123"
                      },
                      "type": {
                        "type": "string",
                        "example": "tokens"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "example": "My API Token"
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-03-14T15:00:00Z"
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "properties": {
                          "scopes": {
                            "type": "object",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "string",
                                    "example": "https://api.osf.io/v2/tokens/token123/scopes/"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "example": "https://api.osf.io/v2/tokens/"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Personal Access Token",
        "description": "Create a new personal access token for authenticating API requests.\n#### Request Body A JSON:API-compliant request with token attributes (`name`) and `scopes` as relationships.\n#### Returns A `201 Created` response with the newly created token details, including the token itself (`token_id`).\n**Note:** The token (`token_id`) is returned **only once** during creation.\n#### Errors - `400 Bad Request`: Missing required fields or invalid scope. - `403 Forbidden`: User lacks permission to create tokens.",
        "tags": [
          "Tokens"
        ],
        "operationId": "token_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "tokens"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "My API Token"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "object",
                          "properties": {
                            "data": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "scopes"
                                  },
                                  "id": {
                                    "type": "string",
                                    "example": "osf.full_write"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Token successfully created.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "token123"
                    },
                    "type": {
                      "type": "string",
                      "example": "tokens"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "My API Token"
                        },
                        "token_id": {
                          "type": "string",
                          "example": "abc123def456"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "object",
                          "properties": {
                            "links": {
                              "type": "object",
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "example": "https://api.osf.io/v2/tokens/token123/scopes/"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tokens/{_id}/": {
      "get": {
        "summary": "Personal Access Token Detail",
        "description": "Retrieve details of a specific personal access token.\n#### Returns A JSON:API-compliant response with the token's details.\n#### Errors - `404 Not Found`: Token not found or not owned by the user.",
        "tags": [
          "Tokens"
        ],
        "operationId": "token_detail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The tokens's unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of tokens details.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "token123"
                    },
                    "type": {
                      "type": "string",
                      "example": "tokens"
                    },
                    "attributes": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "My API Token"
                        },
                        "date_created": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-03-14T15:00:00Z"
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "scopes": {
                          "type": "object",
                          "properties": {
                            "links": {
                              "type": "object",
                              "properties": {
                                "related": {
                                  "type": "string",
                                  "example": "https://api.osf.io/v2/tokens/token123/scopes/"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Token not found."
          }
        }
      },
      "delete": {
        "summary": "Deactivate Personal Access Token",
        "description": "Deactivate (revoke) a personal access token. The token becomes inactive but is retained in the database.\n#### Errors - `404 Not Found`: Token does not exist or is not accessible.",
        "tags": [
          "Tokens"
        ],
        "operationId": "token_deactivate",
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The tokens's unique identifier."
          }
        ],
        "responses": {
          "204": {
            "description": "Token successfully deactivated."
          }
        }
      }
    },
    "/tokens/{_id}/scopes/": {
      "get": {
        "summary": "List Scopes of a Personal Access Token",
        "description": "Retrieve the scopes associated with a specific personal access token.\nScopes determine the level of access and operations permitted by the token.\n#### Returns A JSON:API-compliant response containing an array of scopes.\n#### Errors - `404 Not Found`: Token or scopes not accessible by user.",
        "tags": [
          "Tokens"
        ],
        "operationId": "token_scopes_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The token's unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved tokens scopes.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "osf.full_write"
                      },
                      "type": {
                        "type": "string",
                        "example": "scopes"
                      },
                      "attributes": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string",
                            "example": "Full write access to OSF resources."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Token not found."
          }
        }
      }
    },
    "/applications/": {
      "get": {
        "summary": "List Registered Applications",
        "description": "Retrieves a list of OAuth2 applications registered by the authenticated user.\nApplications allow external services to authenticate via OAuth2.\n#### Returns\nA JSON object containing an array of registered OAuth2 applications under the `data` key.",
        "tags": [
          "Applications"
        ],
        "operationId": "application_list",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of applications.",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "abc123",
                    "type": "applications",
                    "attributes": {
                      "name": "My App",
                      "description": "A sample application",
                      "home_url": "https://example.com",
                      "callback_url": "https://example.com/callback",
                      "owner": "user123",
                      "date_created": "2024-03-14T10:00:00Z"
                    },
                    "links": {
                      "html": "https://osf.io/settings/applications/abc123/",
                      "reset": "https://api.osf.io/v2/applications/abc123/reset/"
                    }
                  }
                ],
                "meta": {
                  "total": 1,
                  "per_page": 10
                },
                "links": {
                  "self": "https://api.osf.io/v2/applications/"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a New Application",
        "description": "Registers a new OAuth2 application.\nThe authenticated user becomes the owner of the application.",
        "tags": [
          "Applications"
        ],
        "operationId": "application_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "JSON:API payload representing the new OAuth2 Application.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "applications"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "name",
                        "home_url",
                        "callback_url"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "example": "My App"
                        },
                        "description": {
                          "type": "string",
                          "example": "An optional description"
                        },
                        "home_url": {
                          "type": "string",
                          "example": "https://example.com"
                        },
                        "callback_url": {
                          "type": "string",
                          "example": "https://example.com/oauth/callback"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OAuth2 Application successfully created.",
            "examples": {
              "application/json": {
                "data": {
                  "id": "abc123",
                  "type": "applications",
                  "attributes": {
                    "name": "My App",
                    "description": "An optional description",
                    "home_url": "https://example.com",
                    "callback_url": "https://example.com/oauth/callback",
                    "client_id": "client_abc123",
                    "client_secret": "secret_123",
                    "owner": "user123",
                    "date_created": "2024-03-14T10:00:00Z"
                  },
                  "links": {
                    "html": "https://osf.io/settings/applications/client_abc123/",
                    "reset": "https://api.osf.io/v2/applications/client_abc123/reset/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/applications/{client_id}/": {
      "get": {
        "summary": "Retrieve Application Details",
        "description": "Fetch detailed information for a specific OAuth2 application registered by the authenticated user.",
        "tags": [
          "Applications"
        ],
        "operationId": "application_detail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The application's `client_id`."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved application details.",
            "examples": {
              "application/json": {
                "data": {
                  "id": "client_abc123",
                  "type": "applications",
                  "attributes": {
                    "name": "My App",
                    "description": "An optional description",
                    "home_url": "https://example.com",
                    "callback_url": "https://example.com/oauth/callback",
                    "owner": "user123",
                    "date_created": "2024-03-14T10:00:00Z"
                  },
                  "links": {
                    "html": "https://osf.io/settings/applications/client_abc123/",
                    "reset": "https://api.osf.io/v2/applications/client_abc123/reset/"
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Application",
        "description": "Modify fields of an existing OAuth2 application. Fields such as `name`, `description`, `home_url`, or `callback_url` can be modified.\nTo reset the client secret, set `\"client_secret\": \"\"`.",
        "tags": [
          "Applications"
        ],
        "operationId": "application_update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "JSON:API payload with updated OAuth2 Application fields.",
            "schema": {
              "type": "object",
              "example": {
                "application/json": {
                  "data": {
                    "type": "applications",
                    "attributes": {
                      "name": "My Updated App",
                      "description": "Updated description"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Application successfully updated.",
            "examples": {
              "application/json": {
                "data": {
                  "id": "client_abc123",
                  "type": "applications",
                  "attributes": {
                    "name": "My Updated App",
                    "description": "Updated description",
                    "home_url": "https://example.com",
                    "callback_url": "https://example.com/oauth/callback",
                    "owner": "user123",
                    "date_created": "2024-03-14T10:00:00Z"
                  },
                  "links": {
                    "html": "https://osf.io/settings/applications/client_abc123/",
                    "reset": "https://api.osf.io/v2/applications/client_abc123/reset/"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Deactivate Application",
        "description": "Deactivates an OAuth2 application, hiding it from lists without deleting from the database.",
        "tags": [
          "Applications"
        ],
        "operationId": "application_deactivate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Application successfully deactivated."
          }
        }
      }
    },
    "/applications/{client_id}/reset/": {
      "post": {
        "summary": "Reset Application Client Secret",
        "description": "Resets the client secret for a specific OAuth2 application, revoking all associated tokens.\n**Deprecated in API v2.14+**",
        "tags": [
          "Applications"
        ],
        "operationId": "application_reset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Client secret successfully reset.",
            "examples": {
              "application/json": {
                "data": {
                  "id": "client_abc123",
                  "type": "applications",
                  "attributes": {
                    "client_secret": "new_secret_xyz789"
                  },
                  "links": {
                    "html": "https://osf.io/settings/applications/client_abc123/",
                    "reset": "https://api.osf.io/v2/applications/client_abc123/reset/"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Application not found or unauthorized."
          },
          "410": {
            "description": "Endpoint deprecated and removed in v2.15."
          }
        }
      }
    },
    "/scopes/": {
      "get": {
        "summary": "List OAuth Scopes",
        "description": "Retrieve a list of publicly available OAuth scopes.\nScopes define permissions granted to OAuth applications and personal access tokens.\n#### Filtering & Pagination\nSupports standard filtering and pagination via query parameters.\n#### Returns\nA JSON object containing an array of OAuth scopes under the `data` key.",
        "tags": [
          "OAuth Scopes"
        ],
        "operationId": "scope_list",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of OAuth scopes.",
            "examples": {
              "application/json": {
                "data": [
                  {
                    "id": "osf.nodes.read",
                    "type": "scopes",
                    "attributes": {
                      "description": "Read access to OSF nodes."
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/scopes/osf.nodes.read/"
                    }
                  },
                  {
                    "id": "osf.nodes.write",
                    "type": "scopes",
                    "attributes": {
                      "description": "Write access to OSF nodes."
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/scopes/osf.nodes.write/"
                    }
                  }
                ],
                "links": {
                  "self": "https://api.osf.io/v2/scopes/"
                },
                "meta": {
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    },
    "/scopes/{scope_id}/": {
      "get": {
        "summary": "Retrieve OAuth Scope Detail",
        "description": "Retrieve detailed information about a specific OAuth scope.\nOnly publicly available scopes are accessible without special permissions.",
        "tags": [
          "OAuth Scopes"
        ],
        "operationId": "scope_detail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "scope_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique identifier of the OAuth scope."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved OAuth scope details.",
            "examples": {
              "application/json": {
                "data": {
                  "id": "osf.nodes.read",
                  "type": "scopes",
                  "attributes": {
                    "description": "Read access to OSF nodes."
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/scopes/osf.nodes.read/"
                  }
                }
              }
            }
          },
          "404": {
            "description": "OAuth scope not found or inaccessible."
          }
        }
      }
    },
    "/actions/reviews/": {
      "get": {
        "summary": "List Review Actions",
        "description": "Retrieve a list of review actions accessible to the authenticated user. Review actions document state transitions or user comments related specifically to reviewable resources, like preprints.\nSupports pagination and filtering by:\n  - `id`\n  - `trigger`\n  - `from_state`\n  - `to_state`\n  - `date_created`\n  - `date_modified`\n\nPagination follows the [JSON:API pagination specification](https://jsonapi.org/format/#fetching-pagination).\n#### Permissions\n\n - User must be authenticated and have permissions to view actions associated with the respective resources.\n\n#### Errors\nIf unsuccessful, returns an `errors` object. See [Errors and Error Codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Actions"
        ],
        "operationId": "review_action_list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "type": "integer",
            "description": "Page number of the results to fetch.",
            "required": false
          },
          {
            "name": "per_page",
            "in": "query",
            "type": "integer",
            "description": "Number of actions per page.",
            "required": false
          },
          {
            "name": "filter[id]",
            "in": "query",
            "type": "string",
            "description": "Filter by the unique ID of the review action.",
            "required": false
          },
          {
            "name": "filter[trigger]",
            "in": "query",
            "type": "string",
            "description": "Filter by the trigger that initiated the action.",
            "required": false
          },
          {
            "name": "filter[from_state]",
            "in": "query",
            "type": "string",
            "description": "Filter by the previous state of the resource.",
            "required": false
          },
          {
            "name": "filter[to_state]",
            "in": "query",
            "type": "string",
            "description": "Filter by the new state of the resource.",
            "required": false
          },
          {
            "name": "filter[date_created]",
            "in": "query",
            "type": "string",
            "description": "Filter by the creation date of the action.",
            "required": false
          },
          {
            "name": "filter[date_modified]",
            "in": "query",
            "type": "string",
            "description": "Filter by the last modification date of the action.",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of review actions.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id",
                      "type",
                      "attributes",
                      "relationships"
                    ],
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "A unique identifier representing the action.",
                        "example": "abc123"
                      },
                      "type": {
                        "type": "string",
                        "description": "Specifies the resource type of the action, indicating the workflow it belongs to.",
                        "enum": [
                          "review-actions",
                          "node-request-actions",
                          "preprint-request-actions",
                          "registration-actions",
                          "schema-response-actions",
                          "collection-submission-actions"
                        ],
                        "example": "review-actions"
                      },
                      "attributes": {
                        "type": "object",
                        "required": [
                          "trigger",
                          "from_state",
                          "to_state",
                          "date_created",
                          "date_modified"
                        ],
                        "properties": {
                          "trigger": {
                            "type": "string",
                            "description": "The event that initiated this action, representing workflow triggers such as:\n - `submit`: Submitting for review\n - `accept`: Accepting the submission\n - `reject`: Rejecting the submission\n - `withdraw`: Withdrawing the submission\n - `edit_comment`: Editing an existing comment",
                            "example": "accept"
                          },
                          "comment": {
                            "type": "string",
                            "description": "Optional explanatory comment provided by the user who triggered the action, offering context or justification.",
                            "example": "Approved after careful consideration."
                          },
                          "from_state": {
                            "type": "string",
                            "description": "The state of the resource immediately before the action occurred, e.g., `pending`, `initial`, `accepted`, `rejected`.",
                            "example": "pending"
                          },
                          "to_state": {
                            "type": "string",
                            "description": "The state of the resource immediately after the action occurred, e.g., `accepted`, `rejected`, `withdrawn`.",
                            "example": "accepted"
                          },
                          "date_created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the action was first created.",
                            "example": "2024-01-01T00:00:00Z"
                          },
                          "date_modified": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp when the action was last modified.",
                            "example": "2024-01-01T01:00:00Z"
                          },
                          "auto": {
                            "type": "boolean",
                            "description": "Indicates whether the action was system-generated (`true`) or manually performed by a user (`false`).",
                            "example": false
                          },
                          "visible": {
                            "type": "boolean",
                            "description": "Controls the visibility of the action. Visible (`true`) actions are accessible to general users, while non-visible (`false`) actions are restricted to administrators or moderators.",
                            "example": true
                          }
                        }
                      },
                      "relationships": {
                        "type": "object",
                        "required": [
                          "creator",
                          "target",
                          "provider"
                        ],
                        "properties": {
                          "creator": {
                            "type": "object",
                            "description": "Information about the user who initiated the action.",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "object",
                                    "properties": {
                                      "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "https://api.osf.io/v2/users/user456/"
                                      },
                                      "meta": {
                                        "type": "object",
                                        "example": {}
                                      }
                                    }
                                  }
                                }
                              },
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "user456"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "users"
                                  }
                                }
                              }
                            }
                          },
                          "target": {
                            "type": "object",
                            "description": "The resource (e.g., preprint, registration, schema response) directly affected by this action.",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "object",
                                    "properties": {
                                      "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "https://api.osf.io/v2/preprints/preprint789/"
                                      },
                                      "meta": {
                                        "type": "object",
                                        "example": {}
                                      }
                                    }
                                  }
                                }
                              },
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "preprint789"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "preprints"
                                  }
                                }
                              }
                            }
                          },
                          "provider": {
                            "type": "object",
                            "description": "The provider managing the moderation or review process associated with the action's target resource.",
                            "properties": {
                              "links": {
                                "type": "object",
                                "properties": {
                                  "related": {
                                    "type": "object",
                                    "properties": {
                                      "href": {
                                        "type": "string",
                                        "format": "uri",
                                        "example": "https://api.osf.io/v2/providers/osf/"
                                      },
                                      "meta": {
                                        "type": "object",
                                        "example": {}
                                      }
                                    }
                                  }
                                }
                              },
                              "data": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string",
                                    "example": "osf"
                                  },
                                  "type": {
                                    "type": "string",
                                    "example": "providers"
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      "links": {
                        "type": "object",
                        "properties": {
                          "self": {
                            "type": "string",
                            "format": "uri",
                            "description": "Direct URL to access detailed information about this action.",
                            "example": "https://api.osf.io/v2/actions/abc123/"
                          }
                        }
                      }
                    }
                  }
                },
                "meta": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "description": "Total number of actions available.",
                      "example": 1
                    },
                    "per_page": {
                      "type": "integer",
                      "description": "Number of actions per page.",
                      "example": 10
                    },
                    "version": {
                      "type": "string",
                      "description": "API version.",
                      "example": "2.20"
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "Link to the current page of results.",
                      "example": "https://api.osf.io/v2/actions/reviews/"
                    },
                    "next": {
                      "type": "string",
                      "format": "uri",
                      "description": "Link to the next page of results.",
                      "example": "https://api.osf.io/v2/actions/reviews/?page=2"
                    },
                    "prev": {
                      "type": "string",
                      "format": "uri",
                      "description": "Link to the previous page of results.",
                      "example": "https://api.osf.io/v2/actions/reviews/?page=1"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Invalid filter or pagination parameters."
          },
          "403": {
            "description": "Forbidden. The user does not have permission to view these review actions."
          }
        }
      }
    },
    "/actions/requests/nodes/": {
      "post": {
        "summary": "Create a Node Request Action",
        "description": "Create a new action on an existing Node Request.\nNode Request Actions represent user-driven or automated steps in a moderation workflow for requests related to project nodes (e.g., access, registration withdrawal). They capture state transitions and optional comments.\n#### Available Triggers\nSupported `trigger` values:\n - `submit`: Submit the request for review. (No special permissions required)\n - `accept`: Approve the request. (Requires admin permissions on the node)\n - `reject`: Deny the request. (Requires admin permissions)\n - `edit_comment`: Add or update a moderator/admin comment without state change. (Requires admin permissions)\n\n#### Permissions\n\n - Accept/reject/edit_comment: Requires admin permissions on the associated node.\n - Submit: Allowed by any user with write permissions on the node.\n\n#### Returns\nOn success, returns `201 Created` with the newly created action resource in the `data` key.\n#### Errors\n\n - `400 Bad Request`: Malformed or incomplete payload.\n - `403 Forbidden`: Insufficient privileges to perform the trigger.\n - `409 Conflict`: Trigger is invalid in the current state.\n\nSee [Errors and Error Codes](#tag/Errors-and-Error-Codes) for full reference.",
        "tags": [
          "Actions"
        ],
        "operationId": "node_request_action_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "A JSON:API compliant payload describing the Node Request Action to create.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "node-request-actions"
                      ],
                      "example": "node-request-actions"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "trigger"
                      ],
                      "properties": {
                        "trigger": {
                          "type": "string",
                          "enum": [
                            "submit",
                            "accept",
                            "reject",
                            "edit_comment"
                          ],
                          "example": "accept"
                        },
                        "comment": {
                          "type": "string",
                          "example": "Approving the node access request."
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "required": [
                        "target"
                      ],
                      "properties": {
                        "target": {
                          "type": "object",
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "type",
                                "id"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "node-requests"
                                  ],
                                  "example": "node-requests"
                                },
                                "id": {
                                  "type": "string",
                                  "example": "nodeReq123"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Node Request Action successfully created.",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier representing the action.",
                  "example": "abc123"
                },
                "type": {
                  "type": "string",
                  "description": "Specifies the resource type of the action, indicating the workflow it belongs to.",
                  "enum": [
                    "review-actions",
                    "node-request-actions",
                    "preprint-request-actions",
                    "registration-actions",
                    "schema-response-actions",
                    "collection-submission-actions"
                  ],
                  "example": "review-actions"
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "trigger",
                    "from_state",
                    "to_state",
                    "date_created",
                    "date_modified"
                  ],
                  "properties": {
                    "trigger": {
                      "type": "string",
                      "description": "The event that initiated this action, representing workflow triggers such as:\n - `submit`: Submitting for review\n - `accept`: Accepting the submission\n - `reject`: Rejecting the submission\n - `withdraw`: Withdrawing the submission\n - `edit_comment`: Editing an existing comment",
                      "example": "accept"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Optional explanatory comment provided by the user who triggered the action, offering context or justification.",
                      "example": "Approved after careful consideration."
                    },
                    "from_state": {
                      "type": "string",
                      "description": "The state of the resource immediately before the action occurred, e.g., `pending`, `initial`, `accepted`, `rejected`.",
                      "example": "pending"
                    },
                    "to_state": {
                      "type": "string",
                      "description": "The state of the resource immediately after the action occurred, e.g., `accepted`, `rejected`, `withdrawn`.",
                      "example": "accepted"
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the action was first created.",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the action was last modified.",
                      "example": "2024-01-01T01:00:00Z"
                    },
                    "auto": {
                      "type": "boolean",
                      "description": "Indicates whether the action was system-generated (`true`) or manually performed by a user (`false`).",
                      "example": false
                    },
                    "visible": {
                      "type": "boolean",
                      "description": "Controls the visibility of the action. Visible (`true`) actions are accessible to general users, while non-visible (`false`) actions are restricted to administrators or moderators.",
                      "example": true
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "required": [
                    "creator",
                    "target",
                    "provider"
                  ],
                  "properties": {
                    "creator": {
                      "type": "object",
                      "description": "Information about the user who initiated the action.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/users/user456/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "user456"
                            },
                            "type": {
                              "type": "string",
                              "example": "users"
                            }
                          }
                        }
                      }
                    },
                    "target": {
                      "type": "object",
                      "description": "The resource (e.g., preprint, registration, schema response) directly affected by this action.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/preprints/preprint789/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "preprint789"
                            },
                            "type": {
                              "type": "string",
                              "example": "preprints"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider managing the moderation or review process associated with the action's target resource.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/providers/osf/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "osf"
                            },
                            "type": {
                              "type": "string",
                              "example": "providers"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "Direct URL to access detailed information about this action.",
                      "example": "https://api.osf.io/v2/actions/abc123/"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or incomplete request payload."
          },
          "403": {
            "description": "Forbidden. Insufficient permissions for requested trigger."
          },
          "409": {
            "description": "Conflict. Invalid trigger for the node request's current state."
          }
        }
      }
    },
    "/actions/requests/preprints/": {
      "post": {
        "summary": "Create a Preprint Request Action",
        "description": "Create a new action on a Preprint Request.\nPreprint Request Actions record transitions and comments during moderation workflows on preprint-related requests, such as access changes or withdrawal approvals.\n#### Available Triggers\nSupported `trigger` values:\n - `submit`: Submit or re-submit the request for review.\n - `accept`: Approve the request (e.g., accept withdrawal).\n - `reject`: Reject the request.\n - `edit_comment`: Add or update a comment without affecting state.\n\n#### Permissions\n\n - `submit`: Allowed for users with write access on the preprint.\n - `accept`, `reject`, `edit_comment`: Require admin privileges or moderator rights via provider.\n\n#### Returns\nOn success, returns `201 Created` with a full representation of the new action.\n#### Errors\n\n - `400 Bad Request`: Malformed or missing fields in the request body.\n - `403 Forbidden`: Action not permitted for the current user.\n - `409 Conflict`: Invalid transition for the request's current state.\n\nFor full error handling, see [Errors and Error Codes](#tag/Errors-and-Error-Codes).",
        "tags": [
          "Actions"
        ],
        "operationId": "preprint_request_action_create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "A JSON:API compliant payload describing the Preprint Request Action to create.",
            "schema": {
              "type": "object",
              "required": [
                "data"
              ],
              "properties": {
                "data": {
                  "type": "object",
                  "required": [
                    "type",
                    "attributes",
                    "relationships"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "preprint-request-actions"
                      ],
                      "example": "preprint-request-actions"
                    },
                    "attributes": {
                      "type": "object",
                      "required": [
                        "trigger"
                      ],
                      "properties": {
                        "trigger": {
                          "type": "string",
                          "enum": [
                            "submit",
                            "accept",
                            "reject",
                            "edit_comment"
                          ],
                          "example": "accept"
                        },
                        "comment": {
                          "type": "string",
                          "example": "Approving the preprint withdrawal request."
                        }
                      }
                    },
                    "relationships": {
                      "type": "object",
                      "required": [
                        "target"
                      ],
                      "properties": {
                        "target": {
                          "type": "object",
                          "required": [
                            "data"
                          ],
                          "properties": {
                            "data": {
                              "type": "object",
                              "required": [
                                "type",
                                "id"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "preprint-requests"
                                  ],
                                  "example": "preprint-requests"
                                },
                                "id": {
                                  "type": "string",
                                  "example": "preprintReq123"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Preprint Request Action successfully created.",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier representing the action.",
                  "example": "abc123"
                },
                "type": {
                  "type": "string",
                  "description": "Specifies the resource type of the action, indicating the workflow it belongs to.",
                  "enum": [
                    "review-actions",
                    "node-request-actions",
                    "preprint-request-actions",
                    "registration-actions",
                    "schema-response-actions",
                    "collection-submission-actions"
                  ],
                  "example": "review-actions"
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "trigger",
                    "from_state",
                    "to_state",
                    "date_created",
                    "date_modified"
                  ],
                  "properties": {
                    "trigger": {
                      "type": "string",
                      "description": "The event that initiated this action, representing workflow triggers such as:\n - `submit`: Submitting for review\n - `accept`: Accepting the submission\n - `reject`: Rejecting the submission\n - `withdraw`: Withdrawing the submission\n - `edit_comment`: Editing an existing comment",
                      "example": "accept"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Optional explanatory comment provided by the user who triggered the action, offering context or justification.",
                      "example": "Approved after careful consideration."
                    },
                    "from_state": {
                      "type": "string",
                      "description": "The state of the resource immediately before the action occurred, e.g., `pending`, `initial`, `accepted`, `rejected`.",
                      "example": "pending"
                    },
                    "to_state": {
                      "type": "string",
                      "description": "The state of the resource immediately after the action occurred, e.g., `accepted`, `rejected`, `withdrawn`.",
                      "example": "accepted"
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the action was first created.",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the action was last modified.",
                      "example": "2024-01-01T01:00:00Z"
                    },
                    "auto": {
                      "type": "boolean",
                      "description": "Indicates whether the action was system-generated (`true`) or manually performed by a user (`false`).",
                      "example": false
                    },
                    "visible": {
                      "type": "boolean",
                      "description": "Controls the visibility of the action. Visible (`true`) actions are accessible to general users, while non-visible (`false`) actions are restricted to administrators or moderators.",
                      "example": true
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "required": [
                    "creator",
                    "target",
                    "provider"
                  ],
                  "properties": {
                    "creator": {
                      "type": "object",
                      "description": "Information about the user who initiated the action.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/users/user456/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "user456"
                            },
                            "type": {
                              "type": "string",
                              "example": "users"
                            }
                          }
                        }
                      }
                    },
                    "target": {
                      "type": "object",
                      "description": "The resource (e.g., preprint, registration, schema response) directly affected by this action.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/preprints/preprint789/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "preprint789"
                            },
                            "type": {
                              "type": "string",
                              "example": "preprints"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider managing the moderation or review process associated with the action's target resource.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/providers/osf/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "osf"
                            },
                            "type": {
                              "type": "string",
                              "example": "providers"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "Direct URL to access detailed information about this action.",
                      "example": "https://api.osf.io/v2/actions/abc123/"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or incomplete request payload."
          },
          "403": {
            "description": "Forbidden. You do not have permission to perform this action."
          },
          "409": {
            "description": "Conflict. Trigger is invalid for the request's current state."
          }
        }
      }
    },
    "/actions/{action_id}/": {
      "get": {
        "summary": "Retrieve an Action by ID",
        "description": "Retrieve detailed information about a specific Action using its unique identifier.\nActions record state transitions, user comments, and workflow triggers related to resources like preprints, registrations, node requests, schema responses, and collection submissions.\nAn Action includes:\n  - The initiating event (`trigger`)\n  - Optional user-provided comments (`comment`)\n  - Resource state before (`from_state`) and after (`to_state`) the action\n  - Metadata such as timestamps (`date_created`, `date_modified`) and visibility settings (`visible`)\n  - Relationships linking the action to its creator, target resource, and the provider managing the process.\n\n#### Permissions\n\n - Users must have at least read permissions on the associated resource.\n - Non-public actions (`visible: false`) require administrative or moderator privileges.\n\n#### Errors\nAn unsuccessful request returns an `errors` key. Refer to the [Errors and Error Codes](#tag/Errors-and-Error-Codes) documentation.",
        "tags": [
          "Actions"
        ],
        "operationId": "action_detail_read",
        "parameters": [
          {
            "in": "path",
            "name": "action_id",
            "type": "string",
            "required": true,
            "description": "Unique identifier for the action (e.g., `abc123`)."
          }
        ],
        "responses": {
          "200": {
            "description": "Action retrieved successfully.",
            "schema": {
              "type": "object",
              "required": [
                "id",
                "type",
                "attributes",
                "relationships"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier representing the action.",
                  "example": "abc123"
                },
                "type": {
                  "type": "string",
                  "description": "Specifies the resource type of the action, indicating the workflow it belongs to.",
                  "enum": [
                    "review-actions",
                    "node-request-actions",
                    "preprint-request-actions",
                    "registration-actions",
                    "schema-response-actions",
                    "collection-submission-actions"
                  ],
                  "example": "review-actions"
                },
                "attributes": {
                  "type": "object",
                  "required": [
                    "trigger",
                    "from_state",
                    "to_state",
                    "date_created",
                    "date_modified"
                  ],
                  "properties": {
                    "trigger": {
                      "type": "string",
                      "description": "The event that initiated this action, representing workflow triggers such as:\n - `submit`: Submitting for review\n - `accept`: Accepting the submission\n - `reject`: Rejecting the submission\n - `withdraw`: Withdrawing the submission\n - `edit_comment`: Editing an existing comment",
                      "example": "accept"
                    },
                    "comment": {
                      "type": "string",
                      "description": "Optional explanatory comment provided by the user who triggered the action, offering context or justification.",
                      "example": "Approved after careful consideration."
                    },
                    "from_state": {
                      "type": "string",
                      "description": "The state of the resource immediately before the action occurred, e.g., `pending`, `initial`, `accepted`, `rejected`.",
                      "example": "pending"
                    },
                    "to_state": {
                      "type": "string",
                      "description": "The state of the resource immediately after the action occurred, e.g., `accepted`, `rejected`, `withdrawn`.",
                      "example": "accepted"
                    },
                    "date_created": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the action was first created.",
                      "example": "2024-01-01T00:00:00Z"
                    },
                    "date_modified": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp when the action was last modified.",
                      "example": "2024-01-01T01:00:00Z"
                    },
                    "auto": {
                      "type": "boolean",
                      "description": "Indicates whether the action was system-generated (`true`) or manually performed by a user (`false`).",
                      "example": false
                    },
                    "visible": {
                      "type": "boolean",
                      "description": "Controls the visibility of the action. Visible (`true`) actions are accessible to general users, while non-visible (`false`) actions are restricted to administrators or moderators.",
                      "example": true
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "required": [
                    "creator",
                    "target",
                    "provider"
                  ],
                  "properties": {
                    "creator": {
                      "type": "object",
                      "description": "Information about the user who initiated the action.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/users/user456/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "user456"
                            },
                            "type": {
                              "type": "string",
                              "example": "users"
                            }
                          }
                        }
                      }
                    },
                    "target": {
                      "type": "object",
                      "description": "The resource (e.g., preprint, registration, schema response) directly affected by this action.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/preprints/preprint789/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "preprint789"
                            },
                            "type": {
                              "type": "string",
                              "example": "preprints"
                            }
                          }
                        }
                      }
                    },
                    "provider": {
                      "type": "object",
                      "description": "The provider managing the moderation or review process associated with the action's target resource.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "format": "uri",
                                  "example": "https://api.osf.io/v2/providers/osf/"
                                },
                                "meta": {
                                  "type": "object",
                                  "example": {}
                                }
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "example": "osf"
                            },
                            "type": {
                              "type": "string",
                              "example": "providers"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "uri",
                      "description": "Direct URL to access detailed information about this action.",
                      "example": "https://api.osf.io/v2/actions/abc123/"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied. Insufficient privileges to access the requested action."
          },
          "404": {
            "description": "Action not found or inaccessible. Verify action ID and permissions."
          }
        }
      }
    },
    "/identifiers/{identifier_id}/": {
      "get": {
        "summary": "Retrieve a Specific Identifier",
        "description": "Retrieve the details of a specific identifier by its unique identifier ID.\nIdentifiers represent permanent references to OSF nodes, often registered with external services like DataCite  (for DOIs) or ARK registries. This endpoint provides information about the identifier’s category (e.g., DOI or ARK), its value, and its association with the referent node.\n#### Permissions\n\n - Public identifiers are accessible by any user.\n - Private node identifiers require authentication and appropriate permissions (at least read access).",
        "parameters": [
          {
            "in": "path",
            "name": "identifier_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier for the identifier resource."
          }
        ],
        "tags": [
          "Identifiers"
        ],
        "operationId": "identifiers_read",
        "x-response-schema": "Identifier",
        "responses": {
          "200": {
            "description": "Successful retrieval of the identifier.",
            "schema": {
              "type": "object",
              "title": "Identifier",
              "description": "Representation of an identifier entity within the OSF API.",
              "properties": {
                "id": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Unique identifier for the identifier entity."
                },
                "type": {
                  "type": "string",
                  "readOnly": true,
                  "description": "Resource type, always `identifiers` for identifier entities."
                },
                "attributes": {
                  "type": "object",
                  "title": "Attributes",
                  "readOnly": true,
                  "description": "Attributes of the identifier entity, including category and value.",
                  "properties": {
                    "category": {
                      "type": "string",
                      "enum": [
                        "doi"
                      ],
                      "readOnly": true,
                      "description": "The category of the identifier, such as ARK or DOI."
                    },
                    "value": {
                      "type": "string",
                      "readOnly": true,
                      "description": "The actual value of the identifier."
                    }
                  }
                },
                "relationships": {
                  "type": "object",
                  "title": "Relationships",
                  "readOnly": true,
                  "description": "Relationships to other entities, indicating the node this identifier refers to.",
                  "properties": {
                    "referent": {
                      "type": "object",
                      "description": "Relationship object linking to the node associated with this identifier.",
                      "properties": {
                        "links": {
                          "type": "object",
                          "properties": {
                            "related": {
                              "type": "string",
                              "format": "url",
                              "description": "URL to the related node."
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "links": {
                  "type": "object",
                  "title": "Links",
                  "readOnly": true,
                  "description": "Links to representations of the identifier entity.",
                  "properties": {
                    "self": {
                      "type": "string",
                      "format": "url",
                      "readOnly": true,
                      "description": "URL to the detail page for this identifier."
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": {
                  "id": "57f1641db83f6901ed94b45a",
                  "type": "identifiers",
                  "attributes": {
                    "category": "ark",
                    "value": "c7605/osf.io/73pnd"
                  },
                  "relationships": {
                    "referent": {
                      "links": {
                        "related": {
                          "href": "https://api.osf.io/v2/nodes/73pnd/",
                          "meta": {}
                        }
                      }
                    }
                  },
                  "links": {
                    "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b45a/"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/identifiers/{node_id}/identifiers/": {
      "get": {
        "summary": "List all identifiers",
        "description": "List of all identifiers for a given node.\n#### Returns\nReturns a JSON object containing `data` and `links` keys.\n\nThe `data` key contains an array of identifiers. Each resource in the array is a separate identifier object.\n\nThe `links` key contains a dictionary of links that can be used for [pagination](#tag/Pagination).\n#### Filtering\nYou can optionally request that the response only include identifiers that match your filters by utilizing the `filter` query parameter, e.g. https://api.osf.io/v2/identifiers/73pnd/identifiers/?filter[category]=doi.\nIdentifiers may be filtered by their `category` e.g `ark` or `doi`.",
        "parameters": [
          {
            "in": "path",
            "name": "node_id",
            "type": "string",
            "required": true,
            "description": "The unique identifier of the node."
          }
        ],
        "tags": [
          "Identifiers"
        ],
        "operationId": "identifiers_list",
        "x-response-schema": "Identifier",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "Identifier",
                "description": "Representation of an identifier entity within the OSF API.",
                "properties": {
                  "id": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Unique identifier for the identifier entity."
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Resource type, always `identifiers` for identifier entities."
                  },
                  "attributes": {
                    "type": "object",
                    "title": "Attributes",
                    "readOnly": true,
                    "description": "Attributes of the identifier entity, including category and value.",
                    "properties": {
                      "category": {
                        "type": "string",
                        "enum": [
                          "doi"
                        ],
                        "readOnly": true,
                        "description": "The category of the identifier, such as ARK or DOI."
                      },
                      "value": {
                        "type": "string",
                        "readOnly": true,
                        "description": "The actual value of the identifier."
                      }
                    }
                  },
                  "relationships": {
                    "type": "object",
                    "title": "Relationships",
                    "readOnly": true,
                    "description": "Relationships to other entities, indicating the node this identifier refers to.",
                    "properties": {
                      "referent": {
                        "type": "object",
                        "description": "Relationship object linking to the node associated with this identifier.",
                        "properties": {
                          "links": {
                            "type": "object",
                            "properties": {
                              "related": {
                                "type": "string",
                                "format": "url",
                                "description": "URL to the related node."
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "links": {
                    "type": "object",
                    "title": "Links",
                    "readOnly": true,
                    "description": "Links to representations of the identifier entity.",
                    "properties": {
                      "self": {
                        "type": "string",
                        "format": "url",
                        "readOnly": true,
                        "description": "URL to the detail page for this identifier."
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "data": [
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b459/"
                    },
                    "attributes": {
                      "category": "doi",
                      "value": "10.17605/OSF.IO/73PND"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b459"
                  },
                  {
                    "relationships": {
                      "referent": {
                        "links": {
                          "related": {
                            "href": "https://api.osf.io/v2/nodes/73pnd/",
                            "meta": {}
                          }
                        }
                      }
                    },
                    "links": {
                      "self": "https://api.osf.io/v2/identifiers/57f1641db83f6901ed94b45a/"
                    },
                    "attributes": {
                      "category": "ark",
                      "value": "c7605/osf.io/73pnd"
                    },
                    "type": "identifiers",
                    "id": "57f1641db83f6901ed94b45a"
                  }
                ],
                "links": {
                  "first": null,
                  "last": null,
                  "prev": null,
                  "next": null,
                  "meta": null,
                  "total": 2,
                  "per_page": 10
                }
              }
            }
          }
        }
      }
    }
  }
}
